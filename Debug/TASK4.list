
TASK4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b04  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08008c18  08008c18  00009c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009104  08009104  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009104  08009104  0000a104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800910c  0800910c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800910c  0800910c  0000a10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009110  08009110  0000a110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009114  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001d4  080092e8  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  080092e8  0000b3c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a18a  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6f  00000000  00000000  00015387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000171f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ff  00000000  00000000  00017dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f1f  00000000  00000000  000186cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d749  00000000  00000000  000315ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef7e  00000000  00000000  0003ed37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdcb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f0  00000000  00000000  000cdcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d21e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008bfc 	.word	0x08008bfc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008bfc 	.word	0x08008bfc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000
 8000bd4:	00000000 	.word	0x00000000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 fd03 	bl	80015e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f8ef 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f000 fa29 	bl	800103c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bea:	f000 f947 	bl	8000e7c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000bee:	f000 f983 	bl	8000ef8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4868      	ldr	r0, [pc, #416]	@ (8000d98 <main+0x1c0>)
 8000bf6:	f002 fa85 	bl	8003104 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2000);
 8000bfa:	4b67      	ldr	r3, [pc, #412]	@ (8000d98 <main+0x1c0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c02:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD16X2_Init(MyLCD);
 8000c04:	2000      	movs	r0, #0
 8000c06:	f003 fa0f 	bl	8004028 <LCD16X2_Init>
  LCD16X2_Clear(MyLCD);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f003 f98c 	bl	8003f28 <LCD16X2_Clear>
  LCD16X2_Set_Cursor(MyLCD, 1, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2101      	movs	r1, #1
 8000c14:	2000      	movs	r0, #0
 8000c16:	f003 f9c7 	bl	8003fa8 <LCD16X2_Set_Cursor>
  LCD16X2_Write_String(MyLCD, "  Welcome");
 8000c1a:	4960      	ldr	r1, [pc, #384]	@ (8000d9c <main+0x1c4>)
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f003 fc75 	bl	800450c <LCD16X2_Write_String>
  HAL_Delay(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c26:	f000 fd41 	bl	80016ac <HAL_Delay>
  HAL_ADC_Start(&hadc1);
 8000c2a:	485d      	ldr	r0, [pc, #372]	@ (8000da0 <main+0x1c8>)
 8000c2c:	f000 fe3a 	bl	80018a4 <HAL_ADC_Start>
  char LCD_buffer[12]={'\0'};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
  uint8_t Leds_Value=0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]
  uint16_t adc_val=0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	81bb      	strh	r3, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 8000c42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c46:	f000 fd31 	bl	80016ac <HAL_Delay>
	 	  	  	 	  LCD16X2_Clear(MyLCD);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f003 f96c 	bl	8003f28 <LCD16X2_Clear>
	 	  	  	 	  switch(Mode)
 8000c50:	4b54      	ldr	r3, [pc, #336]	@ (8000da4 <main+0x1cc>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	f000 8085 	beq.w	8000d64 <main+0x18c>
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	dcf1      	bgt.n	8000c42 <main+0x6a>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <main+0x90>
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d074      	beq.n	8000d50 <main+0x178>
 8000c66:	e08b      	b.n	8000d80 <main+0x1a8>
	 	  	  	 	  {
	 	  	  	 	  case NORMAL_MODE:
	 	  	  	 		 LCD16X2_Set_Cursor(MyLCD, 1, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f003 f99b 	bl	8003fa8 <LCD16X2_Set_Cursor>
	 	  	  	 	     LCD16X2_Write_String(MyLCD, "Traffic:RUNNING");
 8000c72:	494d      	ldr	r1, [pc, #308]	@ (8000da8 <main+0x1d0>)
 8000c74:	2000      	movs	r0, #0
 8000c76:	f003 fc49 	bl	800450c <LCD16X2_Write_String>
	 	  	  	 		 Traffic_Control();
 8000c7a:	f000 fa93 	bl	80011a4 <Traffic_Control>
	 	  	  	 	     HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c82:	4847      	ldr	r0, [pc, #284]	@ (8000da0 <main+0x1c8>)
 8000c84:	f000 febc 	bl	8001a00 <HAL_ADC_PollForConversion>
	 	  	  	 		 adc_val = HAL_ADC_GetValue(&hadc1);
 8000c88:	4845      	ldr	r0, [pc, #276]	@ (8000da0 <main+0x1c8>)
 8000c8a:	f000 ffbf 	bl	8001c0c <HAL_ADC_GetValue>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	81bb      	strh	r3, [r7, #12]
	 	  	  	 		 Leds_Value = adc_val & 0x0F;
 8000c92:	89bb      	ldrh	r3, [r7, #12]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	73fb      	strb	r3, [r7, #15]
	 	  	  	         //itoa(adc_val, LCD_buffer, 10);
	 	  	  	         sprintf(LCD_buffer,"%.3f V",(adc_val/4095.0)*(3.3));
 8000c9c:	89bb      	ldrh	r3, [r7, #12]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fbb0 	bl	8000404 <__aeabi_i2d>
 8000ca4:	a338      	add	r3, pc, #224	@ (adr r3, 8000d88 <main+0x1b0>)
 8000ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000caa:	f7ff fd3f 	bl	800072c <__aeabi_ddiv>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	a336      	add	r3, pc, #216	@ (adr r3, 8000d90 <main+0x1b8>)
 8000cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbc:	f7ff fc0c 	bl	80004d8 <__aeabi_dmul>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	4638      	mov	r0, r7
 8000cc6:	4939      	ldr	r1, [pc, #228]	@ (8000dac <main+0x1d4>)
 8000cc8:	f004 fb66 	bl	8005398 <siprintf>

	 	  	  	 	     LCD16X2_Set_Cursor(MyLCD, 2, 1);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2102      	movs	r1, #2
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f003 f969 	bl	8003fa8 <LCD16X2_Set_Cursor>
	 	  	  	 	     LCD16X2_Write_String(MyLCD,"ADC : ");
 8000cd6:	4936      	ldr	r1, [pc, #216]	@ (8000db0 <main+0x1d8>)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f003 fc17 	bl	800450c <LCD16X2_Write_String>
	 	  	  	 	     LCD16X2_Write_String(MyLCD,LCD_buffer);
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f003 fc12 	bl	800450c <LCD16X2_Write_String>
	 	  	  	      	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (Leds_Value & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cf6:	482f      	ldr	r0, [pc, #188]	@ (8000db4 <main+0x1dc>)
 8000cf8:	f001 fbba 	bl	8002470 <HAL_GPIO_WritePin>
	 	  	     	 	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, (Leds_Value & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	105b      	asrs	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d0e:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <main+0x1e0>)
 8000d10:	f001 fbae 	bl	8002470 <HAL_GPIO_WritePin>
	 	  	  	 	 	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,(Leds_Value & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	109b      	asrs	r3, r3, #2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d26:	4824      	ldr	r0, [pc, #144]	@ (8000db8 <main+0x1e0>)
 8000d28:	f001 fba2 	bl	8002470 <HAL_GPIO_WritePin>
	 	  	  	 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11,(Leds_Value & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	10db      	asrs	r3, r3, #3
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d3e:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <main+0x1e0>)
 8000d40:	f001 fb96 	bl	8002470 <HAL_GPIO_WritePin>
	 	  	  	 		 //50% duty motor
	 	  	  	       	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <main+0x1c0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d4c:	635a      	str	r2, [r3, #52]	@ 0x34
	 	  	  	 		 break;
 8000d4e:	e017      	b.n	8000d80 <main+0x1a8>
	 	  	  	 	  case OFF_MODE:
	 	  	  	 		 LCD16X2_Write_String(MyLCD,"Traffic:STOPPED");
 8000d50:	491a      	ldr	r1, [pc, #104]	@ (8000dbc <main+0x1e4>)
 8000d52:	2000      	movs	r0, #0
 8000d54:	f003 fbda 	bl	800450c <LCD16X2_Write_String>

	 	  	  	 		 //0% duty motor
	 	  	  	 	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2000);
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <main+0x1c0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d60:	635a      	str	r2, [r3, #52]	@ 0x34
	 	  	  	 		 break;
 8000d62:	e00d      	b.n	8000d80 <main+0x1a8>
	 	  	  	 	  case EMERGENCY_MODE:
	 	  	  	 		 LCD16X2_Write_String(MyLCD,"Traffic:EMERGENCY");
 8000d64:	4916      	ldr	r1, [pc, #88]	@ (8000dc0 <main+0x1e8>)
 8000d66:	2000      	movs	r0, #0
 8000d68:	f003 fbd0 	bl	800450c <LCD16X2_Write_String>
	 	  	  	 		 Led_Blinking(LED_RED);
 8000d6c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000d70:	f000 f9e4 	bl	800113c <Led_Blinking>
	 	  	  	 		 //75% duty
	 	  	  	 	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <main+0x1c0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d7c:	635a      	str	r2, [r3, #52]	@ 0x34
	 	  	  	 		  break;
 8000d7e:	bf00      	nop
	  HAL_Delay(500);
 8000d80:	e75f      	b.n	8000c42 <main+0x6a>
 8000d82:	bf00      	nop
 8000d84:	f3af 8000 	nop.w
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40affe00 	.word	0x40affe00
 8000d90:	66666666 	.word	0x66666666
 8000d94:	400a6666 	.word	0x400a6666
 8000d98:	20000224 	.word	0x20000224
 8000d9c:	08008c18 	.word	0x08008c18
 8000da0:	200001f4 	.word	0x200001f4
 8000da4:	200001f0 	.word	0x200001f0
 8000da8:	08008c24 	.word	0x08008c24
 8000dac:	08008c34 	.word	0x08008c34
 8000db0:	08008c3c 	.word	0x08008c3c
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	08008c44 	.word	0x08008c44
 8000dc0:	08008c54 	.word	0x08008c54

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	@ 0x50
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dce:	2228      	movs	r2, #40	@ 0x28
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 fb45 	bl	8005462 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e02:	2301      	movs	r3, #1
 8000e04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e06:	2302      	movs	r3, #2
 8000e08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e10:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fb62 	bl	80024e4 <HAL_RCC_OscConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e26:	f000 f9ed 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2102      	movs	r1, #2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fdce 	bl	80029e8 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e52:	f000 f9d7 	bl	8001204 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e56:	2302      	movs	r3, #2
 8000e58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 ff3a 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e6e:	f000 f9c9 	bl	8001204 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3750      	adds	r7, #80	@ 0x50
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <MX_ADC1_Init+0x74>)
 8000e8e:	4a19      	ldr	r2, [pc, #100]	@ (8000ef4 <MX_ADC1_Init+0x78>)
 8000e90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <MX_ADC1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_ADC1_Init+0x74>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <MX_ADC1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <MX_ADC1_Init+0x74>)
 8000ea6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000eaa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eac:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <MX_ADC1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <MX_ADC1_Init+0x74>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb8:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <MX_ADC1_Init+0x74>)
 8000eba:	f000 fc1b 	bl	80016f4 <HAL_ADC_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ec4:	f000 f99e 	bl	8001204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_ADC1_Init+0x74>)
 8000eda:	f000 fea3 	bl	8001c24 <HAL_ADC_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ee4:	f000 f98e 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200001f4 	.word	0x200001f4
 8000ef4:	40012400 	.word	0x40012400

08000ef8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b096      	sub	sp, #88	@ 0x58
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 fa96 	bl	8005462 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f36:	4b3f      	ldr	r3, [pc, #252]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000f38:	4a3f      	ldr	r2, [pc, #252]	@ (8001038 <MX_TIM1_Init+0x140>)
 8000f3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1080-1;
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000f3e:	f240 4237 	movw	r2, #1079	@ 0x437
 8000f42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000f4c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000f50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b38      	ldr	r3, [pc, #224]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f58:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b35      	ldr	r3, [pc, #212]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f64:	4833      	ldr	r0, [pc, #204]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000f66:	f002 f825 	bl	8002fb4 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f70:	f000 f948 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f78:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f7e:	4619      	mov	r1, r3
 8000f80:	482c      	ldr	r0, [pc, #176]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000f82:	f002 fa23 	bl	80033cc <HAL_TIM_ConfigClockSource>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f8c:	f000 f93a 	bl	8001204 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f90:	4828      	ldr	r0, [pc, #160]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000f92:	f002 f85e 	bl	8003052 <HAL_TIM_PWM_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f9c:	f000 f932 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fac:	4619      	mov	r1, r3
 8000fae:	4821      	ldr	r0, [pc, #132]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000fb0:	f002 fd84 	bl	8003abc <HAL_TIMEx_MasterConfigSynchronization>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000fba:	f000 f923 	bl	8001204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbe:	2360      	movs	r3, #96	@ 0x60
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4814      	ldr	r0, [pc, #80]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8000fe4:	f002 f930 	bl	8003248 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000fee:	f000 f909 	bl	8001204 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001006:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800100a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8001016:	f002 fdaf 	bl	8003b78 <HAL_TIMEx_ConfigBreakDeadTime>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001020:	f000 f8f0 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <MX_TIM1_Init+0x13c>)
 8001026:	f000 f97f 	bl	8001328 <HAL_TIM_MspPostInit>

}
 800102a:	bf00      	nop
 800102c:	3758      	adds	r7, #88	@ 0x58
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000224 	.word	0x20000224
 8001038:	40012c00 	.word	0x40012c00

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001050:	4b36      	ldr	r3, [pc, #216]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a35      	ldr	r2, [pc, #212]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001056:	f043 0320 	orr.w	r3, r3, #32
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b33      	ldr	r3, [pc, #204]	@ (800112c <MX_GPIO_Init+0xf0>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0320 	and.w	r3, r3, #32
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b30      	ldr	r3, [pc, #192]	@ (800112c <MX_GPIO_Init+0xf0>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a2f      	ldr	r2, [pc, #188]	@ (800112c <MX_GPIO_Init+0xf0>)
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b2d      	ldr	r3, [pc, #180]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a29      	ldr	r2, [pc, #164]	@ (800112c <MX_GPIO_Init+0xf0>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <MX_GPIO_Init+0xf0>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8001098:	2200      	movs	r2, #0
 800109a:	f647 61f6 	movw	r1, #32502	@ 0x7ef6
 800109e:	4824      	ldr	r0, [pc, #144]	@ (8001130 <MX_GPIO_Init+0xf4>)
 80010a0:	f001 f9e6 	bl	8002470 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010aa:	4822      	ldr	r0, [pc, #136]	@ (8001134 <MX_GPIO_Init+0xf8>)
 80010ac:	f001 f9e0 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA4 PA5
                           PA6 PA7 PA9 PA10
                           PA11 PA12 PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 80010b0:	f647 63f6 	movw	r3, #32502	@ 0x7ef6
 80010b4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2302      	movs	r3, #2
 80010c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	4819      	ldr	r0, [pc, #100]	@ (8001130 <MX_GPIO_Init+0xf4>)
 80010ca:	f001 f84d 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ce:	2303      	movs	r3, #3
 80010d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <MX_GPIO_Init+0xfc>)
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	4619      	mov	r1, r3
 80010e0:	4814      	ldr	r0, [pc, #80]	@ (8001134 <MX_GPIO_Init+0xf8>)
 80010e2:	f001 f841 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	@ (8001134 <MX_GPIO_Init+0xf8>)
 8001100:	f001 f832 	bl	8002168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2006      	movs	r0, #6
 800110a:	f000 fff6 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800110e:	2006      	movs	r0, #6
 8001110:	f001 f80f 	bl	8002132 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2101      	movs	r1, #1
 8001118:	2007      	movs	r0, #7
 800111a:	f000 ffee 	bl	80020fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800111e:	2007      	movs	r0, #7
 8001120:	f001 f807 	bl	8002132 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	40010800 	.word	0x40010800
 8001134:	40010c00 	.word	0x40010c00
 8001138:	10210000 	.word	0x10210000

0800113c <Led_Blinking>:

/* USER CODE BEGIN 4 */
void Led_Blinking(uint16_t Pin)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
	 HAL_GPIO_WritePin(GPIOA, Pin, GPIO_PIN_SET);
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	4814      	ldr	r0, [pc, #80]	@ (80011a0 <Led_Blinking+0x64>)
 800114e:	f001 f98f 	bl	8002470 <HAL_GPIO_WritePin>
	 HAL_Delay(500);
 8001152:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001156:	f000 faa9 	bl	80016ac <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, Pin, GPIO_PIN_RESET);
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	2200      	movs	r2, #0
 800115e:	4619      	mov	r1, r3
 8001160:	480f      	ldr	r0, [pc, #60]	@ (80011a0 <Led_Blinking+0x64>)
 8001162:	f001 f985 	bl	8002470 <HAL_GPIO_WritePin>
	 HAL_Delay(500);
 8001166:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800116a:	f000 fa9f 	bl	80016ac <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, Pin, GPIO_PIN_SET);
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	2201      	movs	r2, #1
 8001172:	4619      	mov	r1, r3
 8001174:	480a      	ldr	r0, [pc, #40]	@ (80011a0 <Led_Blinking+0x64>)
 8001176:	f001 f97b 	bl	8002470 <HAL_GPIO_WritePin>
	 HAL_Delay(500);
 800117a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800117e:	f000 fa95 	bl	80016ac <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA, Pin, GPIO_PIN_RESET);
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <Led_Blinking+0x64>)
 800118a:	f001 f971 	bl	8002470 <HAL_GPIO_WritePin>
	 HAL_Delay(500);
 800118e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001192:	f000 fa8b 	bl	80016ac <HAL_Delay>


}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800

080011a4 <Traffic_Control>:
void Traffic_Control(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	Led_Blinking(LED_RED);
 80011a8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80011ac:	f7ff ffc6 	bl	800113c <Led_Blinking>
	Led_Blinking(LED_YELLOW);
 80011b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011b4:	f7ff ffc2 	bl	800113c <Led_Blinking>
	Led_Blinking(LED_GREEN);
 80011b8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80011bc:	f7ff ffbe 	bl	800113c <Led_Blinking>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <ISR0_EXTI_IRQHandler>:
void ISR0_EXTI_IRQHandler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	if(Mode==NORMAL_MODE)
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <ISR0_EXTI_IRQHandler+0x24>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d103      	bne.n	80011d8 <ISR0_EXTI_IRQHandler+0x14>
	{
		Mode=OFF_MODE;
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <ISR0_EXTI_IRQHandler+0x24>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Mode=NORMAL_MODE;
	}
}
 80011d6:	e002      	b.n	80011de <ISR0_EXTI_IRQHandler+0x1a>
		Mode=NORMAL_MODE;
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <ISR0_EXTI_IRQHandler+0x24>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200001f0 	.word	0x200001f0

080011ec <ISR1_EXTI_IRQHandler>:
void ISR1_EXTI_IRQHandler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	Mode=EMERGENCY_MODE;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <ISR1_EXTI_IRQHandler+0x14>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200001f0 	.word	0x200001f0

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <Error_Handler+0x8>

08001210 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a14      	ldr	r2, [pc, #80]	@ (800126c <HAL_MspInit+0x5c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_MspInit+0x5c>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0e      	ldr	r2, [pc, #56]	@ (800126c <HAL_MspInit+0x5c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_MspInit+0x5c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_MspInit+0x60>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_MspInit+0x60>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000

08001274 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a14      	ldr	r2, [pc, #80]	@ (80012e0 <HAL_ADC_MspInit+0x6c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d121      	bne.n	80012d8 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <HAL_ADC_MspInit+0x70>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a12      	ldr	r2, [pc, #72]	@ (80012e4 <HAL_ADC_MspInit+0x70>)
 800129a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <HAL_ADC_MspInit+0x70>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_ADC_MspInit+0x70>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a0c      	ldr	r2, [pc, #48]	@ (80012e4 <HAL_ADC_MspInit+0x70>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <HAL_ADC_MspInit+0x70>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c4:	2301      	movs	r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <HAL_ADC_MspInit+0x74>)
 80012d4:	f000 ff48 	bl	8002168 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40012400 	.word	0x40012400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010800 	.word	0x40010800

080012ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a09      	ldr	r2, [pc, #36]	@ (8001320 <HAL_TIM_Base_MspInit+0x34>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d10b      	bne.n	8001316 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_TIM_Base_MspInit+0x38>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	4a08      	ldr	r2, [pc, #32]	@ (8001324 <HAL_TIM_Base_MspInit+0x38>)
 8001304:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001308:	6193      	str	r3, [r2, #24]
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_TIM_Base_MspInit+0x38>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40012c00 	.word	0x40012c00
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a10      	ldr	r2, [pc, #64]	@ (8001384 <HAL_TIM_MspPostInit+0x5c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d118      	bne.n	800137a <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_TIM_MspPostInit+0x60>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a0e      	ldr	r2, [pc, #56]	@ (8001388 <HAL_TIM_MspPostInit+0x60>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <HAL_TIM_MspPostInit+0x60>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001364:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2302      	movs	r3, #2
 800136c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	@ (800138c <HAL_TIM_MspPostInit+0x64>)
 8001376:	f000 fef7 	bl	8002168 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40012c00 	.word	0x40012c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 f948 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	ISR0_EXTI_IRQHandler();
 80013ec:	f7ff feea 	bl	80011c4 <ISR0_EXTI_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f001 f855 	bl	80024a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}

080013fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	ISR1_EXTI_IRQHandler();
 80013fe:	f7ff fef5 	bl	80011ec <ISR1_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001402:	2002      	movs	r0, #2
 8001404:	f001 f84c 	bl	80024a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return 1;
 8001410:	2301      	movs	r3, #1
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <_kill>:

int _kill(int pid, int sig)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001424:	f004 f870 	bl	8005508 <__errno>
 8001428:	4603      	mov	r3, r0
 800142a:	2216      	movs	r2, #22
 800142c:	601a      	str	r2, [r3, #0]
  return -1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_exit>:

void _exit (int status)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001442:	f04f 31ff 	mov.w	r1, #4294967295
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffe7 	bl	800141a <_kill>
  while (1) {}    /* Make sure we hang here */
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <_exit+0x12>

08001450 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e00a      	b.n	8001478 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001462:	f3af 8000 	nop.w
 8001466:	4601      	mov	r1, r0
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf0      	blt.n	8001462 <_read+0x12>
  }

  return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e009      	b.n	80014b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbf1      	blt.n	800149c <_write+0x12>
  }
  return len;
 80014b8:	687b      	ldr	r3, [r7, #4]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <_close>:

int _close(int file)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e8:	605a      	str	r2, [r3, #4]
  return 0;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <_isatty>:

int _isatty(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f003 ffd8 	bl	8005508 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20005000 	.word	0x20005000
 8001584:	00000400 	.word	0x00000400
 8001588:	2000026c 	.word	0x2000026c
 800158c:	200003c0 	.word	0x200003c0

08001590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800159c:	f7ff fff8 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015a2:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015a4:	4a0c      	ldr	r2, [pc, #48]	@ (80015d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015b8:	4c09      	ldr	r4, [pc, #36]	@ (80015e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f003 ffa5 	bl	8005514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ca:	f7ff fb05 	bl	8000bd8 <main>
  bx lr
 80015ce:	4770      	bx	lr
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015d8:	08009114 	.word	0x08009114
  ldr r2, =_sbss
 80015dc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015e0:	200003c0 	.word	0x200003c0

080015e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC1_2_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <HAL_Init+0x28>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	@ (8001610 <HAL_Init+0x28>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 fd73 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	200f      	movs	r0, #15
 8001600:	f000 f808 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff fe04 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40022000 	.word	0x40022000

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_InitTick+0x54>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_InitTick+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162a:	fbb3 f3f1 	udiv	r3, r3, r1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd8b 	bl	800214e <HAL_SYSTICK_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00e      	b.n	8001660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d80a      	bhi.n	800165e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f000 fd53 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001654:	4a06      	ldr	r2, [pc, #24]	@ (8001670 <HAL_InitTick+0x5c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000000 	.word	0x20000000
 800166c:	20000008 	.word	0x20000008
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_IncTick+0x1c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_IncTick+0x20>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a03      	ldr	r2, [pc, #12]	@ (8001694 <HAL_IncTick+0x20>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000008 	.word	0x20000008
 8001694:	20000270 	.word	0x20000270

08001698 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b02      	ldr	r3, [pc, #8]	@ (80016a8 <HAL_GetTick+0x10>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000270 	.word	0x20000270

080016ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b4:	f7ff fff0 	bl	8001698 <HAL_GetTick>
 80016b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c4:	d005      	beq.n	80016d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <HAL_Delay+0x44>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d2:	bf00      	nop
 80016d4:	f7ff ffe0 	bl	8001698 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d8f7      	bhi.n	80016d4 <HAL_Delay+0x28>
  {
  }
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008

080016f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0be      	b.n	8001894 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	d109      	bne.n	8001738 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fd9e 	bl	8001274 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fbc5 	bl	8001ec8 <ADC_ConversionStop_Disable>
 800173e:	4603      	mov	r3, r0
 8001740:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 8099 	bne.w	8001882 <HAL_ADC_Init+0x18e>
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 8095 	bne.w	8001882 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001760:	f023 0302 	bic.w	r3, r3, #2
 8001764:	f043 0202 	orr.w	r2, r3, #2
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001774:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7b1b      	ldrb	r3, [r3, #12]
 800177a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800177c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	4313      	orrs	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800178c:	d003      	beq.n	8001796 <HAL_ADC_Init+0xa2>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d102      	bne.n	800179c <HAL_ADC_Init+0xa8>
 8001796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800179a:	e000      	b.n	800179e <HAL_ADC_Init+0xaa>
 800179c:	2300      	movs	r3, #0
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7d1b      	ldrb	r3, [r3, #20]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d119      	bne.n	80017e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7b1b      	ldrb	r3, [r3, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	035a      	lsls	r2, r3, #13
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	e00b      	b.n	80017e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f043 0220 	orr.w	r2, r3, #32
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	4b28      	ldr	r3, [pc, #160]	@ (800189c <HAL_ADC_Init+0x1a8>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	430b      	orrs	r3, r1
 8001806:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001810:	d003      	beq.n	800181a <HAL_ADC_Init+0x126>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d104      	bne.n	8001824 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	3b01      	subs	r3, #1
 8001820:	051b      	lsls	r3, r3, #20
 8001822:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	430a      	orrs	r2, r1
 8001836:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <HAL_ADC_Init+0x1ac>)
 8001840:	4013      	ands	r3, r2
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	429a      	cmp	r2, r3
 8001846:	d10b      	bne.n	8001860 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800185e:	e018      	b.n	8001892 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	f023 0312 	bic.w	r3, r3, #18
 8001868:	f043 0210 	orr.w	r2, r3, #16
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	f043 0201 	orr.w	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001880:	e007      	b.n	8001892 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	f043 0210 	orr.w	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001892:	7dfb      	ldrb	r3, [r7, #23]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	ffe1f7fd 	.word	0xffe1f7fd
 80018a0:	ff1f0efe 	.word	0xff1f0efe

080018a4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Start+0x1a>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e098      	b.n	80019f0 <HAL_ADC_Start+0x14c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 faa4 	bl	8001e14 <ADC_Enable>
 80018cc:	4603      	mov	r3, r0
 80018ce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 8087 	bne.w	80019e6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a41      	ldr	r2, [pc, #260]	@ (80019f8 <HAL_ADC_Start+0x154>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d105      	bne.n	8001902 <HAL_ADC_Start+0x5e>
 80018f6:	4b41      	ldr	r3, [pc, #260]	@ (80019fc <HAL_ADC_Start+0x158>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d115      	bne.n	800192e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d026      	beq.n	800196a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001920:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001924:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800192c:	e01d      	b.n	800196a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001932:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a2f      	ldr	r2, [pc, #188]	@ (80019fc <HAL_ADC_Start+0x158>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d004      	beq.n	800194e <HAL_ADC_Start+0xaa>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2b      	ldr	r2, [pc, #172]	@ (80019f8 <HAL_ADC_Start+0x154>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10d      	bne.n	800196a <HAL_ADC_Start+0xc6>
 800194e:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <HAL_ADC_Start+0x158>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001962:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197a:	f023 0206 	bic.w	r2, r3, #6
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001982:	e002      	b.n	800198a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f06f 0202 	mvn.w	r2, #2
 800199a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019a6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019aa:	d113      	bne.n	80019d4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019b0:	4a11      	ldr	r2, [pc, #68]	@ (80019f8 <HAL_ADC_Start+0x154>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d105      	bne.n	80019c2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_ADC_Start+0x158>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d108      	bne.n	80019d4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	e00c      	b.n	80019ee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	e003      	b.n	80019ee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40012800 	.word	0x40012800
 80019fc:	40012400 	.word	0x40012400

08001a00 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a16:	f7ff fe3f 	bl	8001698 <HAL_GetTick>
 8001a1a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2e:	f043 0220 	orr.w	r2, r3, #32
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0d3      	b.n	8001bea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d131      	bne.n	8001ab4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d12a      	bne.n	8001ab4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a5e:	e021      	b.n	8001aa4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a66:	d01d      	beq.n	8001aa4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_ADC_PollForConversion+0x7e>
 8001a6e:	f7ff fe13 	bl	8001698 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d212      	bcs.n	8001aa4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a90:	f043 0204 	orr.w	r2, r3, #4
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0a2      	b.n	8001bea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0d6      	beq.n	8001a60 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ab2:	e070      	b.n	8001b96 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf4 <HAL_ADC_PollForConversion+0x1f4>)
 8001ab6:	681c      	ldr	r4, [r3, #0]
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f001 f9c5 	bl	8002e48 <HAL_RCCEx_GetPeriphCLKFreq>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6919      	ldr	r1, [r3, #16]
 8001aca:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf8 <HAL_ADC_PollForConversion+0x1f8>)
 8001acc:	400b      	ands	r3, r1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d118      	bne.n	8001b04 <HAL_ADC_PollForConversion+0x104>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68d9      	ldr	r1, [r3, #12]
 8001ad8:	4b48      	ldr	r3, [pc, #288]	@ (8001bfc <HAL_ADC_PollForConversion+0x1fc>)
 8001ada:	400b      	ands	r3, r1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d111      	bne.n	8001b04 <HAL_ADC_PollForConversion+0x104>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6919      	ldr	r1, [r3, #16]
 8001ae6:	4b46      	ldr	r3, [pc, #280]	@ (8001c00 <HAL_ADC_PollForConversion+0x200>)
 8001ae8:	400b      	ands	r3, r1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d108      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x100>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68d9      	ldr	r1, [r3, #12]
 8001af4:	4b43      	ldr	r3, [pc, #268]	@ (8001c04 <HAL_ADC_PollForConversion+0x204>)
 8001af6:	400b      	ands	r3, r1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x100>
 8001afc:	2314      	movs	r3, #20
 8001afe:	e020      	b.n	8001b42 <HAL_ADC_PollForConversion+0x142>
 8001b00:	2329      	movs	r3, #41	@ 0x29
 8001b02:	e01e      	b.n	8001b42 <HAL_ADC_PollForConversion+0x142>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6919      	ldr	r1, [r3, #16]
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c00 <HAL_ADC_PollForConversion+0x200>)
 8001b0c:	400b      	ands	r3, r1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x120>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68d9      	ldr	r1, [r3, #12]
 8001b18:	4b3a      	ldr	r3, [pc, #232]	@ (8001c04 <HAL_ADC_PollForConversion+0x204>)
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00d      	beq.n	8001b3c <HAL_ADC_PollForConversion+0x13c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	4b38      	ldr	r3, [pc, #224]	@ (8001c08 <HAL_ADC_PollForConversion+0x208>)
 8001b28:	400b      	ands	r3, r1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d108      	bne.n	8001b40 <HAL_ADC_PollForConversion+0x140>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68d9      	ldr	r1, [r3, #12]
 8001b34:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <HAL_ADC_PollForConversion+0x208>)
 8001b36:	400b      	ands	r3, r1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_ADC_PollForConversion+0x140>
 8001b3c:	2354      	movs	r3, #84	@ 0x54
 8001b3e:	e000      	b.n	8001b42 <HAL_ADC_PollForConversion+0x142>
 8001b40:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
 8001b46:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b48:	e021      	b.n	8001b8e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d01a      	beq.n	8001b88 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_ADC_PollForConversion+0x168>
 8001b58:	f7ff fd9e 	bl	8001698 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d20f      	bcs.n	8001b88 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d90b      	bls.n	8001b88 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	f043 0204 	orr.w	r2, r3, #4
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e030      	b.n	8001bea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d8d9      	bhi.n	8001b4a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f06f 0212 	mvn.w	r2, #18
 8001b9e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bb6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001bba:	d115      	bne.n	8001be8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d111      	bne.n	8001be8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd90      	pop	{r4, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	24924924 	.word	0x24924924
 8001bfc:	00924924 	.word	0x00924924
 8001c00:	12492492 	.word	0x12492492
 8001c04:	00492492 	.word	0x00492492
 8001c08:	00249249 	.word	0x00249249

08001c0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x20>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e0dc      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1da>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b06      	cmp	r3, #6
 8001c52:	d81c      	bhi.n	8001c8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b05      	subs	r3, #5
 8001c66:	221f      	movs	r2, #31
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4019      	ands	r1, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b05      	subs	r3, #5
 8001c80:	fa00 f203 	lsl.w	r2, r0, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c8c:	e03c      	b.n	8001d08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d81c      	bhi.n	8001cd0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b23      	subs	r3, #35	@ 0x23
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	4019      	ands	r1, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b23      	subs	r3, #35	@ 0x23
 8001cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cce:	e01b      	b.n	8001d08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b41      	subs	r3, #65	@ 0x41
 8001ce2:	221f      	movs	r2, #31
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4019      	ands	r1, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b41      	subs	r3, #65	@ 0x41
 8001cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d91c      	bls.n	8001d4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68d9      	ldr	r1, [r3, #12]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b1e      	subs	r3, #30
 8001d22:	2207      	movs	r2, #7
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4019      	ands	r1, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6898      	ldr	r0, [r3, #8]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b1e      	subs	r3, #30
 8001d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	e019      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6919      	ldr	r1, [r3, #16]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4019      	ands	r1, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6898      	ldr	r0, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	fa00 f203 	lsl.w	r2, r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d003      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d8a:	2b11      	cmp	r3, #17
 8001d8c:	d132      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1d      	ldr	r2, [pc, #116]	@ (8001e08 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d125      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d126      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001db4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d11a      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dbe:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <HAL_ADC_ConfigChannel+0x1e8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <HAL_ADC_ConfigChannel+0x1ec>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	0c9a      	lsrs	r2, r3, #18
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dd4:	e002      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f9      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x1b2>
 8001de2:	e007      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	40012400 	.word	0x40012400
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	431bde83 	.word	0x431bde83

08001e14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d040      	beq.n	8001eb4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e42:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <ADC_Enable+0xac>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec4 <ADC_Enable+0xb0>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	0c9b      	lsrs	r3, r3, #18
 8001e4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e50:	e002      	b.n	8001e58 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f9      	bne.n	8001e52 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e5e:	f7ff fc1b 	bl	8001698 <HAL_GetTick>
 8001e62:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e64:	e01f      	b.n	8001ea6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e66:	f7ff fc17 	bl	8001698 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d918      	bls.n	8001ea6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d011      	beq.n	8001ea6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e86:	f043 0210 	orr.w	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e007      	b.n	8001eb6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d1d8      	bne.n	8001e66 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	431bde83 	.word	0x431bde83

08001ec8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d12e      	bne.n	8001f40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ef2:	f7ff fbd1 	bl	8001698 <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ef8:	e01b      	b.n	8001f32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001efa:	f7ff fbcd 	bl	8001698 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d914      	bls.n	8001f32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d10d      	bne.n	8001f32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e007      	b.n	8001f42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d0dc      	beq.n	8001efa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7e:	4a04      	ldr	r2, [pc, #16]	@ (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	60d3      	str	r3, [r2, #12]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <__NVIC_GetPriorityGrouping+0x18>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 0307 	and.w	r3, r3, #7
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	db0b      	blt.n	8001fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	f003 021f 	and.w	r2, r3, #31
 8001fc8:	4906      	ldr	r1, [pc, #24]	@ (8001fe4 <__NVIC_EnableIRQ+0x34>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0a      	blt.n	8002012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	@ (8002034 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	440b      	add	r3, r1
 800200c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002010:	e00a      	b.n	8002028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	@ (8002038 <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	440b      	add	r3, r1
 8002026:	761a      	strb	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	@ 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f1c3 0307 	rsb	r3, r3, #7
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf28      	it	cs
 800205a:	2304      	movcs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	2b06      	cmp	r3, #6
 8002064:	d902      	bls.n	800206c <NVIC_EncodePriority+0x30>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3b03      	subs	r3, #3
 800206a:	e000      	b.n	800206e <NVIC_EncodePriority+0x32>
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43d9      	mvns	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	4313      	orrs	r3, r2
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	@ 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ff90 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff2d 	bl	8001f4c <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff42 	bl	8001f94 <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff90 	bl	800203c <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff5f 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff35 	bl	8001fb0 <__NVIC_EnableIRQ>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ffa2 	bl	80020a0 <SysTick_Config>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	b480      	push	{r7}
 800216a:	b08b      	sub	sp, #44	@ 0x2c
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217a:	e169      	b.n	8002450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800217c:	2201      	movs	r2, #1
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	429a      	cmp	r2, r3
 8002196:	f040 8158 	bne.w	800244a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4a9a      	ldr	r2, [pc, #616]	@ (8002408 <HAL_GPIO_Init+0x2a0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d05e      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021a4:	4a98      	ldr	r2, [pc, #608]	@ (8002408 <HAL_GPIO_Init+0x2a0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d875      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021aa:	4a98      	ldr	r2, [pc, #608]	@ (800240c <HAL_GPIO_Init+0x2a4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d058      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021b0:	4a96      	ldr	r2, [pc, #600]	@ (800240c <HAL_GPIO_Init+0x2a4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d86f      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021b6:	4a96      	ldr	r2, [pc, #600]	@ (8002410 <HAL_GPIO_Init+0x2a8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d052      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021bc:	4a94      	ldr	r2, [pc, #592]	@ (8002410 <HAL_GPIO_Init+0x2a8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d869      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021c2:	4a94      	ldr	r2, [pc, #592]	@ (8002414 <HAL_GPIO_Init+0x2ac>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d04c      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021c8:	4a92      	ldr	r2, [pc, #584]	@ (8002414 <HAL_GPIO_Init+0x2ac>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d863      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021ce:	4a92      	ldr	r2, [pc, #584]	@ (8002418 <HAL_GPIO_Init+0x2b0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d046      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
 80021d4:	4a90      	ldr	r2, [pc, #576]	@ (8002418 <HAL_GPIO_Init+0x2b0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d85d      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021da:	2b12      	cmp	r3, #18
 80021dc:	d82a      	bhi.n	8002234 <HAL_GPIO_Init+0xcc>
 80021de:	2b12      	cmp	r3, #18
 80021e0:	d859      	bhi.n	8002296 <HAL_GPIO_Init+0x12e>
 80021e2:	a201      	add	r2, pc, #4	@ (adr r2, 80021e8 <HAL_GPIO_Init+0x80>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	08002263 	.word	0x08002263
 80021ec:	0800223d 	.word	0x0800223d
 80021f0:	0800224f 	.word	0x0800224f
 80021f4:	08002291 	.word	0x08002291
 80021f8:	08002297 	.word	0x08002297
 80021fc:	08002297 	.word	0x08002297
 8002200:	08002297 	.word	0x08002297
 8002204:	08002297 	.word	0x08002297
 8002208:	08002297 	.word	0x08002297
 800220c:	08002297 	.word	0x08002297
 8002210:	08002297 	.word	0x08002297
 8002214:	08002297 	.word	0x08002297
 8002218:	08002297 	.word	0x08002297
 800221c:	08002297 	.word	0x08002297
 8002220:	08002297 	.word	0x08002297
 8002224:	08002297 	.word	0x08002297
 8002228:	08002297 	.word	0x08002297
 800222c:	08002245 	.word	0x08002245
 8002230:	08002259 	.word	0x08002259
 8002234:	4a79      	ldr	r2, [pc, #484]	@ (800241c <HAL_GPIO_Init+0x2b4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800223a:	e02c      	b.n	8002296 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	623b      	str	r3, [r7, #32]
          break;
 8002242:	e029      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	3304      	adds	r3, #4
 800224a:	623b      	str	r3, [r7, #32]
          break;
 800224c:	e024      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	3308      	adds	r3, #8
 8002254:	623b      	str	r3, [r7, #32]
          break;
 8002256:	e01f      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	330c      	adds	r3, #12
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e01a      	b.n	8002298 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800226a:	2304      	movs	r3, #4
 800226c:	623b      	str	r3, [r7, #32]
          break;
 800226e:	e013      	b.n	8002298 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d105      	bne.n	8002284 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002278:	2308      	movs	r3, #8
 800227a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	611a      	str	r2, [r3, #16]
          break;
 8002282:	e009      	b.n	8002298 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002284:	2308      	movs	r3, #8
 8002286:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	615a      	str	r2, [r3, #20]
          break;
 800228e:	e003      	b.n	8002298 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
          break;
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x130>
          break;
 8002296:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2bff      	cmp	r3, #255	@ 0xff
 800229c:	d801      	bhi.n	80022a2 <HAL_GPIO_Init+0x13a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	e001      	b.n	80022a6 <HAL_GPIO_Init+0x13e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2bff      	cmp	r3, #255	@ 0xff
 80022ac:	d802      	bhi.n	80022b4 <HAL_GPIO_Init+0x14c>
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	e002      	b.n	80022ba <HAL_GPIO_Init+0x152>
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	3b08      	subs	r3, #8
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	210f      	movs	r1, #15
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	401a      	ands	r2, r3
 80022cc:	6a39      	ldr	r1, [r7, #32]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	431a      	orrs	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 80b1 	beq.w	800244a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002420 <HAL_GPIO_Init+0x2b8>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002420 <HAL_GPIO_Init+0x2b8>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002420 <HAL_GPIO_Init+0x2b8>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002300:	4a48      	ldr	r2, [pc, #288]	@ (8002424 <HAL_GPIO_Init+0x2bc>)
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a40      	ldr	r2, [pc, #256]	@ (8002428 <HAL_GPIO_Init+0x2c0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d013      	beq.n	8002354 <HAL_GPIO_Init+0x1ec>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3f      	ldr	r2, [pc, #252]	@ (800242c <HAL_GPIO_Init+0x2c4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00d      	beq.n	8002350 <HAL_GPIO_Init+0x1e8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3e      	ldr	r2, [pc, #248]	@ (8002430 <HAL_GPIO_Init+0x2c8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <HAL_GPIO_Init+0x1e4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3d      	ldr	r2, [pc, #244]	@ (8002434 <HAL_GPIO_Init+0x2cc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <HAL_GPIO_Init+0x1e0>
 8002344:	2303      	movs	r3, #3
 8002346:	e006      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 8002348:	2304      	movs	r3, #4
 800234a:	e004      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 800234c:	2302      	movs	r3, #2
 800234e:	e002      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_GPIO_Init+0x1ee>
 8002354:	2300      	movs	r3, #0
 8002356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002358:	f002 0203 	and.w	r2, r2, #3
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4093      	lsls	r3, r2
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002366:	492f      	ldr	r1, [pc, #188]	@ (8002424 <HAL_GPIO_Init+0x2bc>)
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002380:	4b2d      	ldr	r3, [pc, #180]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	492c      	ldr	r1, [pc, #176]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800238e:	4b2a      	ldr	r3, [pc, #168]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	43db      	mvns	r3, r3
 8002396:	4928      	ldr	r1, [pc, #160]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 8002398:	4013      	ands	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023a8:	4b23      	ldr	r3, [pc, #140]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	4922      	ldr	r1, [pc, #136]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60cb      	str	r3, [r1, #12]
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023b6:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	43db      	mvns	r3, r3
 80023be:	491e      	ldr	r1, [pc, #120]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4918      	ldr	r1, [pc, #96]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
 80023dc:	e006      	b.n	80023ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023de:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4914      	ldr	r1, [pc, #80]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d021      	beq.n	800243c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	490e      	ldr	r1, [pc, #56]	@ (8002438 <HAL_GPIO_Init+0x2d0>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e021      	b.n	800244a <HAL_GPIO_Init+0x2e2>
 8002406:	bf00      	nop
 8002408:	10320000 	.word	0x10320000
 800240c:	10310000 	.word	0x10310000
 8002410:	10220000 	.word	0x10220000
 8002414:	10210000 	.word	0x10210000
 8002418:	10120000 	.word	0x10120000
 800241c:	10110000 	.word	0x10110000
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	40010800 	.word	0x40010800
 800242c:	40010c00 	.word	0x40010c00
 8002430:	40011000 	.word	0x40011000
 8002434:	40011400 	.word	0x40011400
 8002438:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_GPIO_Init+0x304>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	43db      	mvns	r3, r3
 8002444:	4909      	ldr	r1, [pc, #36]	@ (800246c <HAL_GPIO_Init+0x304>)
 8002446:	4013      	ands	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	3301      	adds	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	f47f ae8e 	bne.w	800217c <HAL_GPIO_Init+0x14>
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	372c      	adds	r7, #44	@ 0x2c
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40010400 	.word	0x40010400

08002470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002480:	787b      	ldrb	r3, [r7, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800248c:	e003      	b.n	8002496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	041a      	lsls	r2, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	611a      	str	r2, [r3, #16]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024aa:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024b6:	4a05      	ldr	r2, [pc, #20]	@ (80024cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f806 	bl	80024d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40010400 	.word	0x40010400

080024d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e272      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8087 	beq.w	8002612 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002504:	4b92      	ldr	r3, [pc, #584]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b04      	cmp	r3, #4
 800250e:	d00c      	beq.n	800252a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002510:	4b8f      	ldr	r3, [pc, #572]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d112      	bne.n	8002542 <HAL_RCC_OscConfig+0x5e>
 800251c:	4b8c      	ldr	r3, [pc, #560]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002528:	d10b      	bne.n	8002542 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252a:	4b89      	ldr	r3, [pc, #548]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d06c      	beq.n	8002610 <HAL_RCC_OscConfig+0x12c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d168      	bne.n	8002610 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e24c      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x76>
 800254c:	4b80      	ldr	r3, [pc, #512]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a7f      	ldr	r2, [pc, #508]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e02e      	b.n	80025b8 <HAL_RCC_OscConfig+0xd4>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x98>
 8002562:	4b7b      	ldr	r3, [pc, #492]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a7a      	ldr	r2, [pc, #488]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b78      	ldr	r3, [pc, #480]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a77      	ldr	r2, [pc, #476]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002574:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e01d      	b.n	80025b8 <HAL_RCC_OscConfig+0xd4>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0xbc>
 8002586:	4b72      	ldr	r3, [pc, #456]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a71      	ldr	r2, [pc, #452]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b6f      	ldr	r3, [pc, #444]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6e      	ldr	r2, [pc, #440]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0xd4>
 80025a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b68      	ldr	r3, [pc, #416]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a67      	ldr	r2, [pc, #412]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff f86a 	bl	8001698 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff f866 	bl	8001698 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	@ 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e200      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	4b5d      	ldr	r3, [pc, #372]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0xe4>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff f856 	bl	8001698 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7ff f852 	bl	8001698 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	@ 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1ec      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	4b53      	ldr	r3, [pc, #332]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x10c>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d063      	beq.n	80026e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261e:	4b4c      	ldr	r3, [pc, #304]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800262a:	4b49      	ldr	r3, [pc, #292]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b08      	cmp	r3, #8
 8002634:	d11c      	bne.n	8002670 <HAL_RCC_OscConfig+0x18c>
 8002636:	4b46      	ldr	r3, [pc, #280]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d116      	bne.n	8002670 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	4b43      	ldr	r3, [pc, #268]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_RCC_OscConfig+0x176>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e1c0      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b3d      	ldr	r3, [pc, #244]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4939      	ldr	r1, [pc, #228]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266e:	e03a      	b.n	80026e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002678:	4b36      	ldr	r3, [pc, #216]	@ (8002754 <HAL_RCC_OscConfig+0x270>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7ff f80b 	bl	8001698 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002686:	f7ff f807 	bl	8001698 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e1a1      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	4b2d      	ldr	r3, [pc, #180]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4927      	ldr	r1, [pc, #156]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
 80026b8:	e015      	b.n	80026e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ba:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <HAL_RCC_OscConfig+0x270>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe ffea 	bl	8001698 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c8:	f7fe ffe6 	bl	8001698 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e180      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d03a      	beq.n	8002768 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d019      	beq.n	800272e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fa:	4b17      	ldr	r3, [pc, #92]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002700:	f7fe ffca 	bl	8001698 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002708:	f7fe ffc6 	bl	8001698 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e160      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <HAL_RCC_OscConfig+0x26c>)
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002726:	2001      	movs	r0, #1
 8002728:	f000 faba 	bl	8002ca0 <RCC_Delay>
 800272c:	e01c      	b.n	8002768 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272e:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <HAL_RCC_OscConfig+0x274>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002734:	f7fe ffb0 	bl	8001698 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273a:	e00f      	b.n	800275c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7fe ffac 	bl	8001698 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d908      	bls.n	800275c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e146      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	42420000 	.word	0x42420000
 8002758:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275c:	4b92      	ldr	r3, [pc, #584]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e9      	bne.n	800273c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a6 	beq.w	80028c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277a:	4b8b      	ldr	r3, [pc, #556]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4b88      	ldr	r3, [pc, #544]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4a87      	ldr	r2, [pc, #540]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002790:	61d3      	str	r3, [r2, #28]
 8002792:	4b85      	ldr	r3, [pc, #532]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	4b82      	ldr	r3, [pc, #520]	@ (80029ac <HAL_RCC_OscConfig+0x4c8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ae:	4b7f      	ldr	r3, [pc, #508]	@ (80029ac <HAL_RCC_OscConfig+0x4c8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7e      	ldr	r2, [pc, #504]	@ (80029ac <HAL_RCC_OscConfig+0x4c8>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe ff6d 	bl	8001698 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe ff69 	bl	8001698 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b64      	cmp	r3, #100	@ 0x64
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e103      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b75      	ldr	r3, [pc, #468]	@ (80029ac <HAL_RCC_OscConfig+0x4c8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x312>
 80027e8:	4b6f      	ldr	r3, [pc, #444]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4a6e      	ldr	r2, [pc, #440]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6213      	str	r3, [r2, #32]
 80027f4:	e02d      	b.n	8002852 <HAL_RCC_OscConfig+0x36e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x334>
 80027fe:	4b6a      	ldr	r3, [pc, #424]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a69      	ldr	r2, [pc, #420]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6213      	str	r3, [r2, #32]
 800280a:	4b67      	ldr	r3, [pc, #412]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a66      	ldr	r2, [pc, #408]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6213      	str	r3, [r2, #32]
 8002816:	e01c      	b.n	8002852 <HAL_RCC_OscConfig+0x36e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d10c      	bne.n	800283a <HAL_RCC_OscConfig+0x356>
 8002820:	4b61      	ldr	r3, [pc, #388]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4a60      	ldr	r2, [pc, #384]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	4b5e      	ldr	r3, [pc, #376]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4a5d      	ldr	r2, [pc, #372]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6213      	str	r3, [r2, #32]
 8002838:	e00b      	b.n	8002852 <HAL_RCC_OscConfig+0x36e>
 800283a:	4b5b      	ldr	r3, [pc, #364]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4a5a      	ldr	r2, [pc, #360]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6213      	str	r3, [r2, #32]
 8002846:	4b58      	ldr	r3, [pc, #352]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a57      	ldr	r2, [pc, #348]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d015      	beq.n	8002886 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7fe ff1d 	bl	8001698 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe ff19 	bl	8001698 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0b1      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	4b4b      	ldr	r3, [pc, #300]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ee      	beq.n	8002862 <HAL_RCC_OscConfig+0x37e>
 8002884:	e014      	b.n	80028b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7fe ff07 	bl	8001698 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe ff03 	bl	8001698 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e09b      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a4:	4b40      	ldr	r3, [pc, #256]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ee      	bne.n	800288e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b6:	4b3c      	ldr	r3, [pc, #240]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4a3b      	ldr	r2, [pc, #236]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8087 	beq.w	80029da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028cc:	4b36      	ldr	r3, [pc, #216]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d061      	beq.n	800299c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d146      	bne.n	800296e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e0:	4b33      	ldr	r3, [pc, #204]	@ (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fe fed7 	bl	8001698 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7fe fed3 	bl	8001698 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e06d      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002900:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002914:	d108      	bne.n	8002928 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002916:	4b24      	ldr	r3, [pc, #144]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	4921      	ldr	r1, [pc, #132]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002928:	4b1f      	ldr	r3, [pc, #124]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a19      	ldr	r1, [r3, #32]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	430b      	orrs	r3, r1
 800293a:	491b      	ldr	r1, [pc, #108]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fea7 	bl	8001698 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fea3 	bl	8001698 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e03d      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x46a>
 800296c:	e035      	b.n	80029da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_RCC_OscConfig+0x4cc>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe fe90 	bl	8001698 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe fe8c 	bl	8001698 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e026      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x498>
 800299a:	e01e      	b.n	80029da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e019      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40007000 	.word	0x40007000
 80029b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCC_OscConfig+0x500>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d001      	beq.n	80029da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000

080029e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0d0      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029fc:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d910      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b67      	ldr	r3, [pc, #412]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	4965      	ldr	r1, [pc, #404]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b63      	ldr	r3, [pc, #396]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b8      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a44:	4b59      	ldr	r3, [pc, #356]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a58      	ldr	r2, [pc, #352]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a5c:	4b53      	ldr	r3, [pc, #332]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a52      	ldr	r2, [pc, #328]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b50      	ldr	r3, [pc, #320]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	494d      	ldr	r1, [pc, #308]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d040      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b47      	ldr	r3, [pc, #284]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d115      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa6:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e073      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e06b      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac6:	4b39      	ldr	r3, [pc, #228]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f023 0203 	bic.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4936      	ldr	r1, [pc, #216]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fdde 	bl	8001698 <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae0:	f7fe fdda 	bl	8001698 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e053      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	4b2d      	ldr	r3, [pc, #180]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 020c 	and.w	r2, r3, #12
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1eb      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b08:	4b27      	ldr	r3, [pc, #156]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d210      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 0207 	bic.w	r2, r3, #7
 8002b1e:	4922      	ldr	r1, [pc, #136]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e032      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4916      	ldr	r1, [pc, #88]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b62:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	490e      	ldr	r1, [pc, #56]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b76:	f000 f821 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	490a      	ldr	r1, [pc, #40]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	5ccb      	ldrb	r3, [r1, r3]
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	4a09      	ldr	r2, [pc, #36]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b92:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fd3c 	bl	8001614 <HAL_InitTick>

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08008c68 	.word	0x08008c68
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x30>
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bea:	e027      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bee:	613b      	str	r3, [r7, #16]
      break;
 8002bf0:	e027      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	0c9b      	lsrs	r3, r3, #18
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	4a17      	ldr	r2, [pc, #92]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bfc:	5cd3      	ldrb	r3, [r2, r3]
 8002bfe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d010      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	0c5b      	lsrs	r3, r3, #17
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	4a11      	ldr	r2, [pc, #68]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c1e:	fb03 f202 	mul.w	r2, r3, r2
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e004      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c30:	fb02 f303 	mul.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	613b      	str	r3, [r7, #16]
      break;
 8002c3a:	e002      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b05      	ldr	r3, [pc, #20]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c3e:	613b      	str	r3, [r7, #16]
      break;
 8002c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c42:	693b      	ldr	r3, [r7, #16]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	007a1200 	.word	0x007a1200
 8002c58:	08008c80 	.word	0x08008c80
 8002c5c:	08008c90 	.word	0x08008c90
 8002c60:	003d0900 	.word	0x003d0900

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b02      	ldr	r3, [pc, #8]	@ (8002c74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	20000000 	.word	0x20000000

08002c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c7c:	f7ff fff2 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	0adb      	lsrs	r3, r3, #11
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4903      	ldr	r1, [pc, #12]	@ (8002c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	08008c78 	.word	0x08008c78

08002ca0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <RCC_Delay+0x34>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <RCC_Delay+0x38>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0a5b      	lsrs	r3, r3, #9
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cbc:	bf00      	nop
  }
  while (Delay --);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1e5a      	subs	r2, r3, #1
 8002cc2:	60fa      	str	r2, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f9      	bne.n	8002cbc <RCC_Delay+0x1c>
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	10624dd3 	.word	0x10624dd3

08002cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d07d      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d08:	4b4c      	ldr	r3, [pc, #304]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	61d3      	str	r3, [r2, #28]
 8002d14:	4b49      	ldr	r3, [pc, #292]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d20:	2301      	movs	r3, #1
 8002d22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	4b46      	ldr	r3, [pc, #280]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d118      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d30:	4b43      	ldr	r3, [pc, #268]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a42      	ldr	r2, [pc, #264]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fcac 	bl	8001698 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	e008      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d44:	f7fe fca8 	bl	8001698 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e06d      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b3a      	ldr	r3, [pc, #232]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d62:	4b36      	ldr	r3, [pc, #216]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d02e      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d027      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d80:	4b2e      	ldr	r3, [pc, #184]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d90:	4b2c      	ldr	r3, [pc, #176]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d96:	4a29      	ldr	r2, [pc, #164]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d014      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe fc77 	bl	8001698 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fe fc73 	bl	8001698 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e036      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ee      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4917      	ldr	r1, [pc, #92]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4a13      	ldr	r2, [pc, #76]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e00:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	490b      	ldr	r1, [pc, #44]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	4904      	ldr	r1, [pc, #16]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40007000 	.word	0x40007000
 8002e44:	42420440 	.word	0x42420440

08002e48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	f200 808a 	bhi.w	8002f86 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d045      	beq.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d075      	beq.n	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e7e:	e082      	b.n	8002f86 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002e80:	4b46      	ldr	r3, [pc, #280]	@ (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e86:	4b45      	ldr	r3, [pc, #276]	@ (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d07b      	beq.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	0c9b      	lsrs	r3, r3, #18
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	4a41      	ldr	r2, [pc, #260]	@ (8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d015      	beq.n	8002ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	0c5b      	lsrs	r3, r3, #17
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ec4:	4a38      	ldr	r2, [pc, #224]	@ (8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	e004      	b.n	8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4a34      	ldr	r2, [pc, #208]	@ (8002fac <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eec:	d102      	bne.n	8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	61bb      	str	r3, [r7, #24]
      break;
 8002ef2:	e04a      	b.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]
      break;
 8002f02:	e042      	b.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002f04:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f14:	d108      	bne.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	e01f      	b.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f32:	d109      	bne.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002f34:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002f40:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e00f      	b.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f52:	d11c      	bne.n	8002f8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f54:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d016      	beq.n	8002f8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002f60:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002f64:	61bb      	str	r3, [r7, #24]
      break;
 8002f66:	e012      	b.n	8002f8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f68:	e011      	b.n	8002f8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f6a:	f7ff fe85 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b0a      	ldr	r3, [pc, #40]	@ (8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	0b9b      	lsrs	r3, r3, #14
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	61bb      	str	r3, [r7, #24]
      break;
 8002f84:	e004      	b.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f86:	bf00      	nop
 8002f88:	e002      	b.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e000      	b.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002f8e:	bf00      	nop
    }
  }
  return (frequency);
 8002f90:	69bb      	ldr	r3, [r7, #24]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08008c94 	.word	0x08008c94
 8002fa4:	08008ca4 	.word	0x08008ca4
 8002fa8:	007a1200 	.word	0x007a1200
 8002fac:	003d0900 	.word	0x003d0900
 8002fb0:	aaaaaaab 	.word	0xaaaaaaab

08002fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e041      	b.n	800304a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe f986 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f000 fab2 	bl	800355c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e041      	b.n	80030e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f839 	bl	80030f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	4619      	mov	r1, r3
 8003090:	4610      	mov	r0, r2
 8003092:	f000 fa63 	bl	800355c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
	...

08003104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d109      	bne.n	8003128 <HAL_TIM_PWM_Start+0x24>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e022      	b.n	800316e <HAL_TIM_PWM_Start+0x6a>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b04      	cmp	r3, #4
 800312c:	d109      	bne.n	8003142 <HAL_TIM_PWM_Start+0x3e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	e015      	b.n	800316e <HAL_TIM_PWM_Start+0x6a>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d109      	bne.n	800315c <HAL_TIM_PWM_Start+0x58>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e008      	b.n	800316e <HAL_TIM_PWM_Start+0x6a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e05e      	b.n	8003234 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <HAL_TIM_PWM_Start+0x82>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003184:	e013      	b.n	80031ae <HAL_TIM_PWM_Start+0xaa>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d104      	bne.n	8003196 <HAL_TIM_PWM_Start+0x92>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003194:	e00b      	b.n	80031ae <HAL_TIM_PWM_Start+0xaa>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_PWM_Start+0xa2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a4:	e003      	b.n	80031ae <HAL_TIM_PWM_Start+0xaa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2201      	movs	r2, #1
 80031b4:	6839      	ldr	r1, [r7, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fc5c 	bl	8003a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1e      	ldr	r2, [pc, #120]	@ (800323c <HAL_TIM_PWM_Start+0x138>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d107      	bne.n	80031d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a18      	ldr	r2, [pc, #96]	@ (800323c <HAL_TIM_PWM_Start+0x138>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00e      	beq.n	80031fe <HAL_TIM_PWM_Start+0xfa>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e8:	d009      	beq.n	80031fe <HAL_TIM_PWM_Start+0xfa>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a14      	ldr	r2, [pc, #80]	@ (8003240 <HAL_TIM_PWM_Start+0x13c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_TIM_PWM_Start+0xfa>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a12      	ldr	r2, [pc, #72]	@ (8003244 <HAL_TIM_PWM_Start+0x140>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d111      	bne.n	8003222 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b06      	cmp	r3, #6
 800320e:	d010      	beq.n	8003232 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	e007      	b.n	8003232 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800

08003248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003262:	2302      	movs	r3, #2
 8003264:	e0ae      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	f200 809f 	bhi.w	80033b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003276:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	080032b1 	.word	0x080032b1
 8003280:	080033b5 	.word	0x080033b5
 8003284:	080033b5 	.word	0x080033b5
 8003288:	080033b5 	.word	0x080033b5
 800328c:	080032f1 	.word	0x080032f1
 8003290:	080033b5 	.word	0x080033b5
 8003294:	080033b5 	.word	0x080033b5
 8003298:	080033b5 	.word	0x080033b5
 800329c:	08003333 	.word	0x08003333
 80032a0:	080033b5 	.word	0x080033b5
 80032a4:	080033b5 	.word	0x080033b5
 80032a8:	080033b5 	.word	0x080033b5
 80032ac:	08003373 	.word	0x08003373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f9be 	bl	8003638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0208 	orr.w	r2, r2, #8
 80032ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6999      	ldr	r1, [r3, #24]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	619a      	str	r2, [r3, #24]
      break;
 80032ee:	e064      	b.n	80033ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fa04 	bl	8003704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800330a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6999      	ldr	r1, [r3, #24]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	021a      	lsls	r2, r3, #8
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	619a      	str	r2, [r3, #24]
      break;
 8003330:	e043      	b.n	80033ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fa4d 	bl	80037d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0208 	orr.w	r2, r2, #8
 800334c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0204 	bic.w	r2, r2, #4
 800335c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69d9      	ldr	r1, [r3, #28]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	61da      	str	r2, [r3, #28]
      break;
 8003370:	e023      	b.n	80033ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fa97 	bl	80038ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800338c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800339c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69d9      	ldr	r1, [r3, #28]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	021a      	lsls	r2, r3, #8
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	61da      	str	r2, [r3, #28]
      break;
 80033b2:	e002      	b.n	80033ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]
      break;
 80033b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_TIM_ConfigClockSource+0x1c>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e0b4      	b.n	8003552 <HAL_TIM_ConfigClockSource+0x186>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800340e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003420:	d03e      	beq.n	80034a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003426:	f200 8087 	bhi.w	8003538 <HAL_TIM_ConfigClockSource+0x16c>
 800342a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800342e:	f000 8086 	beq.w	800353e <HAL_TIM_ConfigClockSource+0x172>
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003436:	d87f      	bhi.n	8003538 <HAL_TIM_ConfigClockSource+0x16c>
 8003438:	2b70      	cmp	r3, #112	@ 0x70
 800343a:	d01a      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0xa6>
 800343c:	2b70      	cmp	r3, #112	@ 0x70
 800343e:	d87b      	bhi.n	8003538 <HAL_TIM_ConfigClockSource+0x16c>
 8003440:	2b60      	cmp	r3, #96	@ 0x60
 8003442:	d050      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003444:	2b60      	cmp	r3, #96	@ 0x60
 8003446:	d877      	bhi.n	8003538 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b50      	cmp	r3, #80	@ 0x50
 800344a:	d03c      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0xfa>
 800344c:	2b50      	cmp	r3, #80	@ 0x50
 800344e:	d873      	bhi.n	8003538 <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	2b40      	cmp	r3, #64	@ 0x40
 8003452:	d058      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x13a>
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d86f      	bhi.n	8003538 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b30      	cmp	r3, #48	@ 0x30
 800345a:	d064      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x15a>
 800345c:	2b30      	cmp	r3, #48	@ 0x30
 800345e:	d86b      	bhi.n	8003538 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b20      	cmp	r3, #32
 8003462:	d060      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x15a>
 8003464:	2b20      	cmp	r3, #32
 8003466:	d867      	bhi.n	8003538 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d05c      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x15a>
 800346c:	2b10      	cmp	r3, #16
 800346e:	d05a      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x15a>
 8003470:	e062      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003482:	f000 fad8 	bl	8003a36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	609a      	str	r2, [r3, #8]
      break;
 800349e:	e04f      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b0:	f000 fac1 	bl	8003a36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034c2:	609a      	str	r2, [r3, #8]
      break;
 80034c4:	e03c      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d2:	461a      	mov	r2, r3
 80034d4:	f000 fa38 	bl	8003948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2150      	movs	r1, #80	@ 0x50
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fa8f 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 80034e4:	e02c      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f2:	461a      	mov	r2, r3
 80034f4:	f000 fa56 	bl	80039a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2160      	movs	r1, #96	@ 0x60
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fa7f 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 8003504:	e01c      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003512:	461a      	mov	r2, r3
 8003514:	f000 fa18 	bl	8003948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2140      	movs	r1, #64	@ 0x40
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fa6f 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 8003524:	e00c      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4619      	mov	r1, r3
 8003530:	4610      	mov	r0, r2
 8003532:	f000 fa66 	bl	8003a02 <TIM_ITRx_SetConfig>
      break;
 8003536:	e003      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e000      	b.n	8003540 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800353e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a2f      	ldr	r2, [pc, #188]	@ (800362c <TIM_Base_SetConfig+0xd0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00b      	beq.n	800358c <TIM_Base_SetConfig+0x30>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357a:	d007      	beq.n	800358c <TIM_Base_SetConfig+0x30>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a2c      	ldr	r2, [pc, #176]	@ (8003630 <TIM_Base_SetConfig+0xd4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0x30>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a2b      	ldr	r2, [pc, #172]	@ (8003634 <TIM_Base_SetConfig+0xd8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d108      	bne.n	800359e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a22      	ldr	r2, [pc, #136]	@ (800362c <TIM_Base_SetConfig+0xd0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00b      	beq.n	80035be <TIM_Base_SetConfig+0x62>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ac:	d007      	beq.n	80035be <TIM_Base_SetConfig+0x62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <TIM_Base_SetConfig+0xd4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_Base_SetConfig+0x62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003634 <TIM_Base_SetConfig+0xd8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d108      	bne.n	80035d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a0d      	ldr	r2, [pc, #52]	@ (800362c <TIM_Base_SetConfig+0xd0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d103      	bne.n	8003604 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f023 0201 	bic.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	611a      	str	r2, [r3, #16]
  }
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800

08003638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f023 0201 	bic.w	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f023 0302 	bic.w	r3, r3, #2
 8003680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a1c      	ldr	r2, [pc, #112]	@ (8003700 <TIM_OC1_SetConfig+0xc8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d10c      	bne.n	80036ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0308 	bic.w	r3, r3, #8
 800369a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a13      	ldr	r2, [pc, #76]	@ (8003700 <TIM_OC1_SetConfig+0xc8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d111      	bne.n	80036da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40012c00 	.word	0x40012c00

08003704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f023 0210 	bic.w	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0320 	bic.w	r3, r3, #32
 800374e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a1d      	ldr	r2, [pc, #116]	@ (80037d4 <TIM_OC2_SetConfig+0xd0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d10d      	bne.n	8003780 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800376a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800377e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a14      	ldr	r2, [pc, #80]	@ (80037d4 <TIM_OC2_SetConfig+0xd0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d113      	bne.n	80037b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800378e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	40012c00 	.word	0x40012c00

080037d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <TIM_OC3_SetConfig+0xd0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10d      	bne.n	8003852 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800383c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a14      	ldr	r2, [pc, #80]	@ (80038a8 <TIM_OC3_SetConfig+0xd0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d113      	bne.n	8003882 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	621a      	str	r2, [r3, #32]
}
 800389c:	bf00      	nop
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40012c00 	.word	0x40012c00

080038ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	031b      	lsls	r3, r3, #12
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a0f      	ldr	r2, [pc, #60]	@ (8003944 <TIM_OC4_SetConfig+0x98>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d109      	bne.n	8003920 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	40012c00 	.word	0x40012c00

08003948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f023 0201 	bic.w	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f023 030a 	bic.w	r3, r3, #10
 8003984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	621a      	str	r2, [r3, #32]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0210 	bic.w	r2, r3, #16
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	031b      	lsls	r3, r3, #12
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	621a      	str	r2, [r3, #32]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f043 0307 	orr.w	r3, r3, #7
 8003a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	609a      	str	r2, [r3, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b087      	sub	sp, #28
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	021a      	lsls	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	609a      	str	r2, [r3, #8]
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2201      	movs	r2, #1
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1a      	ldr	r2, [r3, #32]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e046      	b.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a16      	ldr	r2, [pc, #88]	@ (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b20:	d009      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a10      	ldr	r2, [pc, #64]	@ (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d10c      	bne.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800

08003b78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e03d      	b.n	8003c10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
	...

08003c1c <LCD16X2_DATA>:
#include "../../Util/Util.h"

//-----[ Alphanumeric LCD16X2 Functions ]-----

void LCD16X2_DATA(uint8_t LCD16X2_Index, unsigned char Data)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	460a      	mov	r2, r1
 8003c26:	71fb      	strb	r3, [r7, #7]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	71bb      	strb	r3, [r7, #6]
    if(Data & 1)
 8003c2c:	79bb      	ldrb	r3, [r7, #6]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <LCD16X2_DATA+0x44>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 1);
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	4a5a      	ldr	r2, [pc, #360]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003c3a:	2134      	movs	r1, #52	@ 0x34
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	3304      	adds	r3, #4
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	4a56      	ldr	r2, [pc, #344]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003c4a:	2134      	movs	r1, #52	@ 0x34
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3308      	adds	r3, #8
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	2201      	movs	r2, #1
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f7fe fc09 	bl	8002470 <HAL_GPIO_WritePin>
 8003c5e:	e013      	b.n	8003c88 <LCD16X2_DATA+0x6c>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 0);
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	4a50      	ldr	r2, [pc, #320]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003c64:	2134      	movs	r1, #52	@ 0x34
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	4a4c      	ldr	r2, [pc, #304]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003c74:	2134      	movs	r1, #52	@ 0x34
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	2200      	movs	r2, #0
 8003c82:	4619      	mov	r1, r3
 8003c84:	f7fe fbf4 	bl	8002470 <HAL_GPIO_WritePin>
    if(Data & 2)
 8003c88:	79bb      	ldrb	r3, [r7, #6]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d014      	beq.n	8003cbc <LCD16X2_DATA+0xa0>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 1);
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	4a43      	ldr	r2, [pc, #268]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003c96:	2134      	movs	r1, #52	@ 0x34
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	4a3f      	ldr	r2, [pc, #252]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003ca6:	2134      	movs	r1, #52	@ 0x34
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	3310      	adds	r3, #16
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f7fe fbdb 	bl	8002470 <HAL_GPIO_WritePin>
 8003cba:	e013      	b.n	8003ce4 <LCD16X2_DATA+0xc8>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 0);
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	4a39      	ldr	r2, [pc, #228]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003cc0:	2134      	movs	r1, #52	@ 0x34
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	330c      	adds	r3, #12
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	4a35      	ldr	r2, [pc, #212]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003cd0:	2134      	movs	r1, #52	@ 0x34
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3310      	adds	r3, #16
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f7fe fbc6 	bl	8002470 <HAL_GPIO_WritePin>
    if(Data & 4)
 8003ce4:	79bb      	ldrb	r3, [r7, #6]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d014      	beq.n	8003d18 <LCD16X2_DATA+0xfc>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 1);
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	4a2c      	ldr	r2, [pc, #176]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003cf2:	2134      	movs	r1, #52	@ 0x34
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	4a28      	ldr	r2, [pc, #160]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003d02:	2134      	movs	r1, #52	@ 0x34
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3318      	adds	r3, #24
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	4619      	mov	r1, r3
 8003d12:	f7fe fbad 	bl	8002470 <HAL_GPIO_WritePin>
 8003d16:	e013      	b.n	8003d40 <LCD16X2_DATA+0x124>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 0);
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	4a22      	ldr	r2, [pc, #136]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003d1c:	2134      	movs	r1, #52	@ 0x34
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	3314      	adds	r3, #20
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003d2c:	2134      	movs	r1, #52	@ 0x34
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	3318      	adds	r3, #24
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f7fe fb98 	bl	8002470 <HAL_GPIO_WritePin>
    if(Data & 8)
 8003d40:	79bb      	ldrb	r3, [r7, #6]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d014      	beq.n	8003d74 <LCD16X2_DATA+0x158>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 1);
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	4a15      	ldr	r2, [pc, #84]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003d4e:	2134      	movs	r1, #52	@ 0x34
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	331c      	adds	r3, #28
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	4a11      	ldr	r2, [pc, #68]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003d5e:	2134      	movs	r1, #52	@ 0x34
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	3320      	adds	r3, #32
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f7fe fb7f 	bl	8002470 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
}
 8003d72:	e013      	b.n	8003d9c <LCD16X2_DATA+0x180>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	4a0b      	ldr	r2, [pc, #44]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003d78:	2134      	movs	r1, #52	@ 0x34
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	331c      	adds	r3, #28
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	4a07      	ldr	r2, [pc, #28]	@ (8003da4 <LCD16X2_DATA+0x188>)
 8003d88:	2134      	movs	r1, #52	@ 0x34
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3320      	adds	r3, #32
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	4619      	mov	r1, r3
 8003d98:	f7fe fb6a 	bl	8002470 <HAL_GPIO_WritePin>
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	08008ca8 	.word	0x08008ca8

08003da8 <LCD16X2_CMD>:

void LCD16X2_CMD(uint8_t LCD16X2_Index, unsigned char CMD)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	460a      	mov	r2, r1
 8003db2:	71fb      	strb	r3, [r7, #7]
 8003db4:	4613      	mov	r3, r2
 8003db6:	71bb      	strb	r3, [r7, #6]
    // Select Command Register
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	4a57      	ldr	r2, [pc, #348]	@ (8003f18 <LCD16X2_CMD+0x170>)
 8003dbc:	2134      	movs	r1, #52	@ 0x34
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	332c      	adds	r3, #44	@ 0x2c
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	4a53      	ldr	r2, [pc, #332]	@ (8003f18 <LCD16X2_CMD+0x170>)
 8003dcc:	2134      	movs	r1, #52	@ 0x34
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3330      	adds	r3, #48	@ 0x30
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f7fe fb48 	bl	8002470 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
	LCD16X2_DATA(LCD16X2_Index, CMD);
 8003de0:	79ba      	ldrb	r2, [r7, #6]
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff18 	bl	8003c1c <LCD16X2_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	4a4a      	ldr	r2, [pc, #296]	@ (8003f18 <LCD16X2_CMD+0x170>)
 8003df0:	2134      	movs	r1, #52	@ 0x34
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	3324      	adds	r3, #36	@ 0x24
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	4a46      	ldr	r2, [pc, #280]	@ (8003f18 <LCD16X2_CMD+0x170>)
 8003e00:	2134      	movs	r1, #52	@ 0x34
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	3328      	adds	r3, #40	@ 0x28
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f7fe fb2e 	bl	8002470 <HAL_GPIO_WritePin>
    DELAY_US(5);
 8003e14:	4b41      	ldr	r3, [pc, #260]	@ (8003f1c <LCD16X2_CMD+0x174>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	4b41      	ldr	r3, [pc, #260]	@ (8003f20 <LCD16X2_CMD+0x178>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a41      	ldr	r2, [pc, #260]	@ (8003f24 <LCD16X2_CMD+0x17c>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	0c9a      	lsrs	r2, r3, #18
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	441a      	add	r2, r3
 8003e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f20 <LCD16X2_CMD+0x178>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	493c      	ldr	r1, [pc, #240]	@ (8003f24 <LCD16X2_CMD+0x17c>)
 8003e32:	fba1 1303 	umull	r1, r3, r1, r3
 8003e36:	0c9b      	lsrs	r3, r3, #18
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	4b37      	ldr	r3, [pc, #220]	@ (8003f1c <LCD16X2_CMD+0x174>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d8f8      	bhi.n	8003e3e <LCD16X2_CMD+0x96>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	4a32      	ldr	r2, [pc, #200]	@ (8003f18 <LCD16X2_CMD+0x170>)
 8003e50:	2134      	movs	r1, #52	@ 0x34
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	3324      	adds	r3, #36	@ 0x24
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f18 <LCD16X2_CMD+0x170>)
 8003e60:	2134      	movs	r1, #52	@ 0x34
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	3328      	adds	r3, #40	@ 0x28
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4619      	mov	r1, r3
 8003e70:	f7fe fafe 	bl	8002470 <HAL_GPIO_WritePin>
    DELAY_US(5);
 8003e74:	4b29      	ldr	r3, [pc, #164]	@ (8003f1c <LCD16X2_CMD+0x174>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	4b29      	ldr	r3, [pc, #164]	@ (8003f20 <LCD16X2_CMD+0x178>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a29      	ldr	r2, [pc, #164]	@ (8003f24 <LCD16X2_CMD+0x17c>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	0c9a      	lsrs	r2, r3, #18
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	441a      	add	r2, r3
 8003e8c:	4b24      	ldr	r3, [pc, #144]	@ (8003f20 <LCD16X2_CMD+0x178>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4924      	ldr	r1, [pc, #144]	@ (8003f24 <LCD16X2_CMD+0x17c>)
 8003e92:	fba1 1303 	umull	r1, r3, r1, r3
 8003e96:	0c9b      	lsrs	r3, r3, #18
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f1c <LCD16X2_CMD+0x174>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d8f8      	bhi.n	8003e9e <LCD16X2_CMD+0xf6>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	4a1a      	ldr	r2, [pc, #104]	@ (8003f18 <LCD16X2_CMD+0x170>)
 8003eb0:	2134      	movs	r1, #52	@ 0x34
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3324      	adds	r3, #36	@ 0x24
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <LCD16X2_CMD+0x170>)
 8003ec0:	2134      	movs	r1, #52	@ 0x34
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3328      	adds	r3, #40	@ 0x28
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f7fe face 	bl	8002470 <HAL_GPIO_WritePin>
    DELAY_US(100);
 8003ed4:	4b11      	ldr	r3, [pc, #68]	@ (8003f1c <LCD16X2_CMD+0x174>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	4b11      	ldr	r3, [pc, #68]	@ (8003f20 <LCD16X2_CMD+0x178>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a11      	ldr	r2, [pc, #68]	@ (8003f24 <LCD16X2_CMD+0x17c>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	0c9b      	lsrs	r3, r3, #18
 8003ee6:	2264      	movs	r2, #100	@ 0x64
 8003ee8:	fb03 f202 	mul.w	r2, r3, r2
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <LCD16X2_CMD+0x178>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	490c      	ldr	r1, [pc, #48]	@ (8003f24 <LCD16X2_CMD+0x17c>)
 8003ef2:	fba1 1303 	umull	r1, r3, r1, r3
 8003ef6:	0c9b      	lsrs	r3, r3, #18
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <LCD16X2_CMD+0x174>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d8f8      	bhi.n	8003efe <LCD16X2_CMD+0x156>
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	08008ca8 	.word	0x08008ca8
 8003f1c:	e000e010 	.word	0xe000e010
 8003f20:	20000000 	.word	0x20000000
 8003f24:	431bde83 	.word	0x431bde83

08003f28 <LCD16X2_Clear>:

void LCD16X2_Clear(uint8_t LCD16X2_Index)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0);
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff ff36 	bl	8003da8 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 1);
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff31 	bl	8003da8 <LCD16X2_CMD>
    DELAY_MS(2);
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e01f      	b.n	8003f8c <LCD16X2_Clear+0x64>
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <LCD16X2_Clear+0x74>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	4b13      	ldr	r3, [pc, #76]	@ (8003fa0 <LCD16X2_Clear+0x78>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a13      	ldr	r2, [pc, #76]	@ (8003fa4 <LCD16X2_Clear+0x7c>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	0c9b      	lsrs	r3, r3, #18
 8003f5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f62:	fb03 f202 	mul.w	r2, r3, r2
 8003f66:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <LCD16X2_Clear+0x78>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	490e      	ldr	r1, [pc, #56]	@ (8003fa4 <LCD16X2_Clear+0x7c>)
 8003f6c:	fba1 1303 	umull	r1, r3, r1, r3
 8003f70:	0c9b      	lsrs	r3, r3, #18
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	4b08      	ldr	r3, [pc, #32]	@ (8003f9c <LCD16X2_Clear+0x74>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d8f8      	bhi.n	8003f78 <LCD16X2_Clear+0x50>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d9dc      	bls.n	8003f4c <LCD16X2_Clear+0x24>
}
 8003f92:	bf00      	nop
 8003f94:	bf00      	nop
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	e000e010 	.word	0xe000e010
 8003fa0:	20000000 	.word	0x20000000
 8003fa4:	431bde83 	.word	0x431bde83

08003fa8 <LCD16X2_Set_Cursor>:

void LCD16X2_Set_Cursor(uint8_t LCD16X2_Index, unsigned char r, unsigned char c)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	71bb      	strb	r3, [r7, #6]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	717b      	strb	r3, [r7, #5]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 8003fba:	79bb      	ldrb	r3, [r7, #6]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d115      	bne.n	8003fec <LCD16X2_Set_Cursor+0x44>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8003fc0:	797b      	ldrb	r3, [r7, #5]
 8003fc2:	337f      	adds	r3, #127	@ 0x7f
 8003fc4:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8003fd4:	7bba      	ldrb	r2, [r7, #14]
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fee4 	bl	8003da8 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 8003fe0:	7b7a      	ldrb	r2, [r7, #13]
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fede 	bl	8003da8 <LCD16X2_CMD>
    }
    if(r == 2)
 8003fec:	79bb      	ldrb	r3, [r7, #6]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d115      	bne.n	800401e <LCD16X2_Set_Cursor+0x76>
    {
      Temp  = 0xC0 + c - 1;
 8003ff2:	797b      	ldrb	r3, [r7, #5]
 8003ff4:	3b41      	subs	r3, #65	@ 0x41
 8003ff6:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8004006:	7bba      	ldrb	r2, [r7, #14]
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fecb 	bl	8003da8 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 8004012:	7b7a      	ldrb	r2, [r7, #13]
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fec5 	bl	8003da8 <LCD16X2_CMD>
    }
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <LCD16X2_Init>:

void LCD16X2_Init(uint8_t LCD16X2_Index)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08e      	sub	sp, #56	@ 0x38
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8004032:	bf00      	nop
 8004034:	f7fd fb30 	bl	8001698 <HAL_GetTick>
 8004038:	4603      	mov	r3, r0
 800403a:	2b31      	cmp	r3, #49	@ 0x31
 800403c:	d9fa      	bls.n	8004034 <LCD16X2_Init+0xc>
	// The Init. Procedure As Described In The Datasheet
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	4a7c      	ldr	r2, [pc, #496]	@ (8004234 <LCD16X2_Init+0x20c>)
 8004042:	2134      	movs	r1, #52	@ 0x34
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	332c      	adds	r3, #44	@ 0x2c
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	4a78      	ldr	r2, [pc, #480]	@ (8004234 <LCD16X2_Init+0x20c>)
 8004052:	2134      	movs	r1, #52	@ 0x34
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	3330      	adds	r3, #48	@ 0x30
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	2200      	movs	r2, #0
 8004060:	4619      	mov	r1, r3
 8004062:	f7fe fa05 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	4a72      	ldr	r2, [pc, #456]	@ (8004234 <LCD16X2_Init+0x20c>)
 800406a:	2134      	movs	r1, #52	@ 0x34
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	3324      	adds	r3, #36	@ 0x24
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	4a6e      	ldr	r2, [pc, #440]	@ (8004234 <LCD16X2_Init+0x20c>)
 800407a:	2134      	movs	r1, #52	@ 0x34
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	3328      	adds	r3, #40	@ 0x28
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	2200      	movs	r2, #0
 8004088:	4619      	mov	r1, r3
 800408a:	f7fe f9f1 	bl	8002470 <HAL_GPIO_WritePin>
    // Init in 4-Bit Data Mode
	LCD16X2_DATA(LCD16X2_Index, 0x00);
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fdc2 	bl	8003c1c <LCD16X2_DATA>
    DELAY_MS(150);
 8004098:	2300      	movs	r3, #0
 800409a:	637b      	str	r3, [r7, #52]	@ 0x34
 800409c:	e01f      	b.n	80040de <LCD16X2_Init+0xb6>
 800409e:	4b66      	ldr	r3, [pc, #408]	@ (8004238 <LCD16X2_Init+0x210>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	4b65      	ldr	r3, [pc, #404]	@ (800423c <LCD16X2_Init+0x214>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a65      	ldr	r2, [pc, #404]	@ (8004240 <LCD16X2_Init+0x218>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	0c9b      	lsrs	r3, r3, #18
 80040b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040b4:	fb03 f202 	mul.w	r2, r3, r2
 80040b8:	4b60      	ldr	r3, [pc, #384]	@ (800423c <LCD16X2_Init+0x214>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4960      	ldr	r1, [pc, #384]	@ (8004240 <LCD16X2_Init+0x218>)
 80040be:	fba1 1303 	umull	r1, r3, r1, r3
 80040c2:	0c9b      	lsrs	r3, r3, #18
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004238 <LCD16X2_Init+0x210>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d8f8      	bhi.n	80040ca <LCD16X2_Init+0xa2>
 80040d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040da:	3301      	adds	r3, #1
 80040dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e0:	2b95      	cmp	r3, #149	@ 0x95
 80040e2:	d9dc      	bls.n	800409e <LCD16X2_Init+0x76>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	2103      	movs	r1, #3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fe5d 	bl	8003da8 <LCD16X2_CMD>
    DELAY_MS(5);
 80040ee:	2300      	movs	r3, #0
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f2:	e01f      	b.n	8004134 <LCD16X2_Init+0x10c>
 80040f4:	4b50      	ldr	r3, [pc, #320]	@ (8004238 <LCD16X2_Init+0x210>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	4b50      	ldr	r3, [pc, #320]	@ (800423c <LCD16X2_Init+0x214>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a50      	ldr	r2, [pc, #320]	@ (8004240 <LCD16X2_Init+0x218>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	0c9b      	lsrs	r3, r3, #18
 8004106:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800410a:	fb03 f202 	mul.w	r2, r3, r2
 800410e:	4b4b      	ldr	r3, [pc, #300]	@ (800423c <LCD16X2_Init+0x214>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	494b      	ldr	r1, [pc, #300]	@ (8004240 <LCD16X2_Init+0x218>)
 8004114:	fba1 1303 	umull	r1, r3, r1, r3
 8004118:	0c9b      	lsrs	r3, r3, #18
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	4b45      	ldr	r3, [pc, #276]	@ (8004238 <LCD16X2_Init+0x210>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	429a      	cmp	r2, r3
 800412c:	d8f8      	bhi.n	8004120 <LCD16X2_Init+0xf8>
 800412e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004130:	3301      	adds	r3, #1
 8004132:	633b      	str	r3, [r7, #48]	@ 0x30
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004136:	2b04      	cmp	r3, #4
 8004138:	d9dc      	bls.n	80040f4 <LCD16X2_Init+0xcc>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	2103      	movs	r1, #3
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fe32 	bl	8003da8 <LCD16X2_CMD>
    DELAY_MS(5);
 8004144:	2300      	movs	r3, #0
 8004146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004148:	e01f      	b.n	800418a <LCD16X2_Init+0x162>
 800414a:	4b3b      	ldr	r3, [pc, #236]	@ (8004238 <LCD16X2_Init+0x210>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	4b3a      	ldr	r3, [pc, #232]	@ (800423c <LCD16X2_Init+0x214>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a3a      	ldr	r2, [pc, #232]	@ (8004240 <LCD16X2_Init+0x218>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	0c9b      	lsrs	r3, r3, #18
 800415c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004160:	fb03 f202 	mul.w	r2, r3, r2
 8004164:	4b35      	ldr	r3, [pc, #212]	@ (800423c <LCD16X2_Init+0x214>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4935      	ldr	r1, [pc, #212]	@ (8004240 <LCD16X2_Init+0x218>)
 800416a:	fba1 1303 	umull	r1, r3, r1, r3
 800416e:	0c9b      	lsrs	r3, r3, #18
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	4b30      	ldr	r3, [pc, #192]	@ (8004238 <LCD16X2_Init+0x210>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	6a3a      	ldr	r2, [r7, #32]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	429a      	cmp	r2, r3
 8004182:	d8f8      	bhi.n	8004176 <LCD16X2_Init+0x14e>
 8004184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004186:	3301      	adds	r3, #1
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800418a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418c:	2b04      	cmp	r3, #4
 800418e:	d9dc      	bls.n	800414a <LCD16X2_Init+0x122>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	2103      	movs	r1, #3
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fe07 	bl	8003da8 <LCD16X2_CMD>
    DELAY_US(150);
 800419a:	4b27      	ldr	r3, [pc, #156]	@ (8004238 <LCD16X2_Init+0x210>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a0:	4b26      	ldr	r3, [pc, #152]	@ (800423c <LCD16X2_Init+0x214>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a26      	ldr	r2, [pc, #152]	@ (8004240 <LCD16X2_Init+0x218>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	0c9b      	lsrs	r3, r3, #18
 80041ac:	2296      	movs	r2, #150	@ 0x96
 80041ae:	fb03 f202 	mul.w	r2, r3, r2
 80041b2:	4b22      	ldr	r3, [pc, #136]	@ (800423c <LCD16X2_Init+0x214>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4922      	ldr	r1, [pc, #136]	@ (8004240 <LCD16X2_Init+0x218>)
 80041b8:	fba1 1303 	umull	r1, r3, r1, r3
 80041bc:	0c9b      	lsrs	r3, r3, #18
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004238 <LCD16X2_Init+0x210>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d8f8      	bhi.n	80041c4 <LCD16X2_Init+0x19c>
    // The Rest of The Init Sequence As Defined in The Hitachi HD44780 Datasheet
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2102      	movs	r1, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fde6 	bl	8003da8 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	2102      	movs	r1, #2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fde1 	bl	8003da8 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x08);
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	2108      	movs	r1, #8
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fddc 	bl	8003da8 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fdd7 	bl	8003da8 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x0C);
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	210c      	movs	r1, #12
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fdd2 	bl	8003da8 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fdcd 	bl	8003da8 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x06);
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	2106      	movs	r1, #6
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fdc8 	bl	8003da8 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fdc3 	bl	8003da8 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x01);
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fdbe 	bl	8003da8 <LCD16X2_CMD>
}
 800422c:	bf00      	nop
 800422e:	3738      	adds	r7, #56	@ 0x38
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	08008ca8 	.word	0x08008ca8
 8004238:	e000e010 	.word	0xe000e010
 800423c:	20000000 	.word	0x20000000
 8004240:	431bde83 	.word	0x431bde83

08004244 <LCD16X2_Write_Char>:

void LCD16X2_Write_Char(uint8_t LCD16X2_Index, char Data)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b090      	sub	sp, #64	@ 0x40
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	460a      	mov	r2, r1
 800424e:	71fb      	strb	r3, [r7, #7]
 8004250:	4613      	mov	r3, r2
 8004252:	71bb      	strb	r3, [r7, #6]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8004254:	79bb      	ldrb	r3, [r7, #6]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
   High4 = Data & 0xF0;
 800425e:	79bb      	ldrb	r3, [r7, #6]
 8004260:	f023 030f 	bic.w	r3, r3, #15
 8004264:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 1);
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	4aa4      	ldr	r2, [pc, #656]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 800426c:	2134      	movs	r1, #52	@ 0x34
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	332c      	adds	r3, #44	@ 0x2c
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	4aa0      	ldr	r2, [pc, #640]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 800427c:	2134      	movs	r1, #52	@ 0x34
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3330      	adds	r3, #48	@ 0x30
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	2201      	movs	r2, #1
 800428a:	4619      	mov	r1, r3
 800428c:	f7fe f8f0 	bl	8002470 <HAL_GPIO_WritePin>

   LCD16X2_DATA(LCD16X2_Index, (High4>>4));
 8004290:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	b2da      	uxtb	r2, r3
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fcbd 	bl	8003c1c <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	4a95      	ldr	r2, [pc, #596]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 80042a6:	2134      	movs	r1, #52	@ 0x34
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	3324      	adds	r3, #36	@ 0x24
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	4a91      	ldr	r2, [pc, #580]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 80042b6:	2134      	movs	r1, #52	@ 0x34
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	4413      	add	r3, r2
 80042be:	3328      	adds	r3, #40	@ 0x28
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	2200      	movs	r2, #0
 80042c4:	4619      	mov	r1, r3
 80042c6:	f7fe f8d3 	bl	8002470 <HAL_GPIO_WritePin>
   DELAY_US(5);
 80042ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042d0:	4b8c      	ldr	r3, [pc, #560]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a8c      	ldr	r2, [pc, #560]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	0c9a      	lsrs	r2, r3, #18
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	4b88      	ldr	r3, [pc, #544]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4988      	ldr	r1, [pc, #544]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 80042e8:	fba1 1303 	umull	r1, r3, r1, r3
 80042ec:	0c9b      	lsrs	r3, r3, #18
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042f4:	4b82      	ldr	r3, [pc, #520]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042fe:	429a      	cmp	r2, r3
 8004300:	d8f8      	bhi.n	80042f4 <LCD16X2_Write_Char+0xb0>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	4a7d      	ldr	r2, [pc, #500]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 8004306:	2134      	movs	r1, #52	@ 0x34
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	3324      	adds	r3, #36	@ 0x24
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	4a79      	ldr	r2, [pc, #484]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 8004316:	2134      	movs	r1, #52	@ 0x34
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	3328      	adds	r3, #40	@ 0x28
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	2201      	movs	r2, #1
 8004324:	4619      	mov	r1, r3
 8004326:	f7fe f8a3 	bl	8002470 <HAL_GPIO_WritePin>
   DELAY_US(5);
 800432a:	4b75      	ldr	r3, [pc, #468]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004330:	4b74      	ldr	r3, [pc, #464]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a74      	ldr	r2, [pc, #464]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	0c9a      	lsrs	r2, r3, #18
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	4b70      	ldr	r3, [pc, #448]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4970      	ldr	r1, [pc, #448]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 8004348:	fba1 1303 	umull	r1, r3, r1, r3
 800434c:	0c9b      	lsrs	r3, r3, #18
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004354:	4b6a      	ldr	r3, [pc, #424]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800435e:	429a      	cmp	r2, r3
 8004360:	d8f8      	bhi.n	8004354 <LCD16X2_Write_Char+0x110>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	4a65      	ldr	r2, [pc, #404]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 8004366:	2134      	movs	r1, #52	@ 0x34
 8004368:	fb01 f303 	mul.w	r3, r1, r3
 800436c:	4413      	add	r3, r2
 800436e:	3324      	adds	r3, #36	@ 0x24
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	4a61      	ldr	r2, [pc, #388]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 8004376:	2134      	movs	r1, #52	@ 0x34
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	3328      	adds	r3, #40	@ 0x28
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	4619      	mov	r1, r3
 8004386:	f7fe f873 	bl	8002470 <HAL_GPIO_WritePin>
   DELAY_US(100);
 800438a:	4b5d      	ldr	r3, [pc, #372]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004390:	4b5c      	ldr	r3, [pc, #368]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a5c      	ldr	r2, [pc, #368]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	0c9b      	lsrs	r3, r3, #18
 800439c:	2264      	movs	r2, #100	@ 0x64
 800439e:	fb03 f202 	mul.w	r2, r3, r2
 80043a2:	4b58      	ldr	r3, [pc, #352]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4958      	ldr	r1, [pc, #352]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 80043a8:	fba1 1303 	umull	r1, r3, r1, r3
 80043ac:	0c9b      	lsrs	r3, r3, #18
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b4:	4b52      	ldr	r3, [pc, #328]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043be:	429a      	cmp	r2, r3
 80043c0:	d8f8      	bhi.n	80043b4 <LCD16X2_Write_Char+0x170>

   LCD16X2_DATA(LCD16X2_Index, Low4);
 80043c2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	4611      	mov	r1, r2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fc26 	bl	8003c1c <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	4a4a      	ldr	r2, [pc, #296]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 80043d4:	2134      	movs	r1, #52	@ 0x34
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	4413      	add	r3, r2
 80043dc:	3324      	adds	r3, #36	@ 0x24
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	4a46      	ldr	r2, [pc, #280]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 80043e4:	2134      	movs	r1, #52	@ 0x34
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	3328      	adds	r3, #40	@ 0x28
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	4619      	mov	r1, r3
 80043f4:	f7fe f83c 	bl	8002470 <HAL_GPIO_WritePin>
   DELAY_US(5);
 80043f8:	4b41      	ldr	r3, [pc, #260]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	623b      	str	r3, [r7, #32]
 80043fe:	4b41      	ldr	r3, [pc, #260]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a41      	ldr	r2, [pc, #260]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	0c9a      	lsrs	r2, r3, #18
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441a      	add	r2, r3
 8004410:	4b3c      	ldr	r3, [pc, #240]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	493c      	ldr	r1, [pc, #240]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 8004416:	fba1 1303 	umull	r1, r3, r1, r3
 800441a:	0c9b      	lsrs	r3, r3, #18
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	4b37      	ldr	r3, [pc, #220]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	6a3a      	ldr	r2, [r7, #32]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	429a      	cmp	r2, r3
 800442e:	d8f8      	bhi.n	8004422 <LCD16X2_Write_Char+0x1de>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	4a32      	ldr	r2, [pc, #200]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 8004434:	2134      	movs	r1, #52	@ 0x34
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	3324      	adds	r3, #36	@ 0x24
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	4a2e      	ldr	r2, [pc, #184]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 8004444:	2134      	movs	r1, #52	@ 0x34
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	4413      	add	r3, r2
 800444c:	3328      	adds	r3, #40	@ 0x28
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	2201      	movs	r2, #1
 8004452:	4619      	mov	r1, r3
 8004454:	f7fe f80c 	bl	8002470 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8004458:	4b29      	ldr	r3, [pc, #164]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	4b29      	ldr	r3, [pc, #164]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a29      	ldr	r2, [pc, #164]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	0c9a      	lsrs	r2, r3, #18
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	441a      	add	r2, r3
 8004470:	4b24      	ldr	r3, [pc, #144]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4924      	ldr	r1, [pc, #144]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 8004476:	fba1 1303 	umull	r1, r3, r1, r3
 800447a:	0c9b      	lsrs	r3, r3, #18
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	4b1f      	ldr	r3, [pc, #124]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	429a      	cmp	r2, r3
 800448e:	d8f8      	bhi.n	8004482 <LCD16X2_Write_Char+0x23e>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	4a1a      	ldr	r2, [pc, #104]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 8004494:	2134      	movs	r1, #52	@ 0x34
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	4413      	add	r3, r2
 800449c:	3324      	adds	r3, #36	@ 0x24
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <LCD16X2_Write_Char+0x2b8>)
 80044a4:	2134      	movs	r1, #52	@ 0x34
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	3328      	adds	r3, #40	@ 0x28
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	2200      	movs	r2, #0
 80044b2:	4619      	mov	r1, r3
 80044b4:	f7fd ffdc 	bl	8002470 <HAL_GPIO_WritePin>
   DELAY_US(100);
 80044b8:	4b11      	ldr	r3, [pc, #68]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	4b11      	ldr	r3, [pc, #68]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a11      	ldr	r2, [pc, #68]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	0c9b      	lsrs	r3, r3, #18
 80044ca:	2264      	movs	r2, #100	@ 0x64
 80044cc:	fb03 f202 	mul.w	r2, r3, r2
 80044d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <LCD16X2_Write_Char+0x2c0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	490c      	ldr	r1, [pc, #48]	@ (8004508 <LCD16X2_Write_Char+0x2c4>)
 80044d6:	fba1 1303 	umull	r1, r3, r1, r3
 80044da:	0c9b      	lsrs	r3, r3, #18
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	4b07      	ldr	r3, [pc, #28]	@ (8004500 <LCD16X2_Write_Char+0x2bc>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d8f8      	bhi.n	80044e2 <LCD16X2_Write_Char+0x29e>
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3740      	adds	r7, #64	@ 0x40
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	08008ca8 	.word	0x08008ca8
 8004500:	e000e010 	.word	0xe000e010
 8004504:	20000000 	.word	0x20000000
 8004508:	431bde83 	.word	0x431bde83

0800450c <LCD16X2_Write_String>:

void LCD16X2_Write_String(uint8_t LCD16X2_Index, char *str)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	6039      	str	r1, [r7, #0]
 8004516:	71fb      	strb	r3, [r7, #7]
    int i;
    for(i=0; str[i]!='\0'; i++)
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	e00b      	b.n	8004536 <LCD16X2_Write_String+0x2a>
    {
    	LCD16X2_Write_Char(LCD16X2_Index, str[i]);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	4413      	add	r3, r2
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fe8a 	bl	8004244 <LCD16X2_Write_Char>
    for(i=0; str[i]!='\0'; i++)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	4413      	add	r3, r2
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ed      	bne.n	800451e <LCD16X2_Write_String+0x12>
    }
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <__cvt>:
 800454c:	2b00      	cmp	r3, #0
 800454e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004552:	461d      	mov	r5, r3
 8004554:	bfbb      	ittet	lt
 8004556:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800455a:	461d      	movlt	r5, r3
 800455c:	2300      	movge	r3, #0
 800455e:	232d      	movlt	r3, #45	@ 0x2d
 8004560:	b088      	sub	sp, #32
 8004562:	4614      	mov	r4, r2
 8004564:	bfb8      	it	lt
 8004566:	4614      	movlt	r4, r2
 8004568:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800456a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800456c:	7013      	strb	r3, [r2, #0]
 800456e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004570:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004574:	f023 0820 	bic.w	r8, r3, #32
 8004578:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800457c:	d005      	beq.n	800458a <__cvt+0x3e>
 800457e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004582:	d100      	bne.n	8004586 <__cvt+0x3a>
 8004584:	3601      	adds	r6, #1
 8004586:	2302      	movs	r3, #2
 8004588:	e000      	b.n	800458c <__cvt+0x40>
 800458a:	2303      	movs	r3, #3
 800458c:	aa07      	add	r2, sp, #28
 800458e:	9204      	str	r2, [sp, #16]
 8004590:	aa06      	add	r2, sp, #24
 8004592:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004596:	e9cd 3600 	strd	r3, r6, [sp]
 800459a:	4622      	mov	r2, r4
 800459c:	462b      	mov	r3, r5
 800459e:	f001 f87b 	bl	8005698 <_dtoa_r>
 80045a2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80045a6:	4607      	mov	r7, r0
 80045a8:	d119      	bne.n	80045de <__cvt+0x92>
 80045aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80045ac:	07db      	lsls	r3, r3, #31
 80045ae:	d50e      	bpl.n	80045ce <__cvt+0x82>
 80045b0:	eb00 0906 	add.w	r9, r0, r6
 80045b4:	2200      	movs	r2, #0
 80045b6:	2300      	movs	r3, #0
 80045b8:	4620      	mov	r0, r4
 80045ba:	4629      	mov	r1, r5
 80045bc:	f7fc f9f4 	bl	80009a8 <__aeabi_dcmpeq>
 80045c0:	b108      	cbz	r0, 80045c6 <__cvt+0x7a>
 80045c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80045c6:	2230      	movs	r2, #48	@ 0x30
 80045c8:	9b07      	ldr	r3, [sp, #28]
 80045ca:	454b      	cmp	r3, r9
 80045cc:	d31e      	bcc.n	800460c <__cvt+0xc0>
 80045ce:	4638      	mov	r0, r7
 80045d0:	9b07      	ldr	r3, [sp, #28]
 80045d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80045d4:	1bdb      	subs	r3, r3, r7
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	b008      	add	sp, #32
 80045da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045e2:	eb00 0906 	add.w	r9, r0, r6
 80045e6:	d1e5      	bne.n	80045b4 <__cvt+0x68>
 80045e8:	7803      	ldrb	r3, [r0, #0]
 80045ea:	2b30      	cmp	r3, #48	@ 0x30
 80045ec:	d10a      	bne.n	8004604 <__cvt+0xb8>
 80045ee:	2200      	movs	r2, #0
 80045f0:	2300      	movs	r3, #0
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	f7fc f9d7 	bl	80009a8 <__aeabi_dcmpeq>
 80045fa:	b918      	cbnz	r0, 8004604 <__cvt+0xb8>
 80045fc:	f1c6 0601 	rsb	r6, r6, #1
 8004600:	f8ca 6000 	str.w	r6, [sl]
 8004604:	f8da 3000 	ldr.w	r3, [sl]
 8004608:	4499      	add	r9, r3
 800460a:	e7d3      	b.n	80045b4 <__cvt+0x68>
 800460c:	1c59      	adds	r1, r3, #1
 800460e:	9107      	str	r1, [sp, #28]
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	e7d9      	b.n	80045c8 <__cvt+0x7c>

08004614 <__exponent>:
 8004614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004616:	2900      	cmp	r1, #0
 8004618:	bfb6      	itet	lt
 800461a:	232d      	movlt	r3, #45	@ 0x2d
 800461c:	232b      	movge	r3, #43	@ 0x2b
 800461e:	4249      	neglt	r1, r1
 8004620:	2909      	cmp	r1, #9
 8004622:	7002      	strb	r2, [r0, #0]
 8004624:	7043      	strb	r3, [r0, #1]
 8004626:	dd29      	ble.n	800467c <__exponent+0x68>
 8004628:	f10d 0307 	add.w	r3, sp, #7
 800462c:	461d      	mov	r5, r3
 800462e:	270a      	movs	r7, #10
 8004630:	fbb1 f6f7 	udiv	r6, r1, r7
 8004634:	461a      	mov	r2, r3
 8004636:	fb07 1416 	mls	r4, r7, r6, r1
 800463a:	3430      	adds	r4, #48	@ 0x30
 800463c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004640:	460c      	mov	r4, r1
 8004642:	2c63      	cmp	r4, #99	@ 0x63
 8004644:	4631      	mov	r1, r6
 8004646:	f103 33ff 	add.w	r3, r3, #4294967295
 800464a:	dcf1      	bgt.n	8004630 <__exponent+0x1c>
 800464c:	3130      	adds	r1, #48	@ 0x30
 800464e:	1e94      	subs	r4, r2, #2
 8004650:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004654:	4623      	mov	r3, r4
 8004656:	1c41      	adds	r1, r0, #1
 8004658:	42ab      	cmp	r3, r5
 800465a:	d30a      	bcc.n	8004672 <__exponent+0x5e>
 800465c:	f10d 0309 	add.w	r3, sp, #9
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	42ac      	cmp	r4, r5
 8004664:	bf88      	it	hi
 8004666:	2300      	movhi	r3, #0
 8004668:	3302      	adds	r3, #2
 800466a:	4403      	add	r3, r0
 800466c:	1a18      	subs	r0, r3, r0
 800466e:	b003      	add	sp, #12
 8004670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004672:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004676:	f801 6f01 	strb.w	r6, [r1, #1]!
 800467a:	e7ed      	b.n	8004658 <__exponent+0x44>
 800467c:	2330      	movs	r3, #48	@ 0x30
 800467e:	3130      	adds	r1, #48	@ 0x30
 8004680:	7083      	strb	r3, [r0, #2]
 8004682:	70c1      	strb	r1, [r0, #3]
 8004684:	1d03      	adds	r3, r0, #4
 8004686:	e7f1      	b.n	800466c <__exponent+0x58>

08004688 <_printf_float>:
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	b091      	sub	sp, #68	@ 0x44
 800468e:	460c      	mov	r4, r1
 8004690:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004694:	4616      	mov	r6, r2
 8004696:	461f      	mov	r7, r3
 8004698:	4605      	mov	r5, r0
 800469a:	f000 feeb 	bl	8005474 <_localeconv_r>
 800469e:	6803      	ldr	r3, [r0, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	9308      	str	r3, [sp, #32]
 80046a4:	f7fb fd54 	bl	8000150 <strlen>
 80046a8:	2300      	movs	r3, #0
 80046aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80046ac:	f8d8 3000 	ldr.w	r3, [r8]
 80046b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80046b2:	3307      	adds	r3, #7
 80046b4:	f023 0307 	bic.w	r3, r3, #7
 80046b8:	f103 0208 	add.w	r2, r3, #8
 80046bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80046c0:	f8d4 b000 	ldr.w	fp, [r4]
 80046c4:	f8c8 2000 	str.w	r2, [r8]
 80046c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80046d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046d2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80046d6:	f04f 32ff 	mov.w	r2, #4294967295
 80046da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80046de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80046e2:	4b9c      	ldr	r3, [pc, #624]	@ (8004954 <_printf_float+0x2cc>)
 80046e4:	f7fc f992 	bl	8000a0c <__aeabi_dcmpun>
 80046e8:	bb70      	cbnz	r0, 8004748 <_printf_float+0xc0>
 80046ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80046ee:	f04f 32ff 	mov.w	r2, #4294967295
 80046f2:	4b98      	ldr	r3, [pc, #608]	@ (8004954 <_printf_float+0x2cc>)
 80046f4:	f7fc f96c 	bl	80009d0 <__aeabi_dcmple>
 80046f8:	bb30      	cbnz	r0, 8004748 <_printf_float+0xc0>
 80046fa:	2200      	movs	r2, #0
 80046fc:	2300      	movs	r3, #0
 80046fe:	4640      	mov	r0, r8
 8004700:	4649      	mov	r1, r9
 8004702:	f7fc f95b 	bl	80009bc <__aeabi_dcmplt>
 8004706:	b110      	cbz	r0, 800470e <_printf_float+0x86>
 8004708:	232d      	movs	r3, #45	@ 0x2d
 800470a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800470e:	4a92      	ldr	r2, [pc, #584]	@ (8004958 <_printf_float+0x2d0>)
 8004710:	4b92      	ldr	r3, [pc, #584]	@ (800495c <_printf_float+0x2d4>)
 8004712:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004716:	bf8c      	ite	hi
 8004718:	4690      	movhi	r8, r2
 800471a:	4698      	movls	r8, r3
 800471c:	2303      	movs	r3, #3
 800471e:	f04f 0900 	mov.w	r9, #0
 8004722:	6123      	str	r3, [r4, #16]
 8004724:	f02b 0304 	bic.w	r3, fp, #4
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	4633      	mov	r3, r6
 800472c:	4621      	mov	r1, r4
 800472e:	4628      	mov	r0, r5
 8004730:	9700      	str	r7, [sp, #0]
 8004732:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004734:	f000 f9d4 	bl	8004ae0 <_printf_common>
 8004738:	3001      	adds	r0, #1
 800473a:	f040 8090 	bne.w	800485e <_printf_float+0x1d6>
 800473e:	f04f 30ff 	mov.w	r0, #4294967295
 8004742:	b011      	add	sp, #68	@ 0x44
 8004744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004748:	4642      	mov	r2, r8
 800474a:	464b      	mov	r3, r9
 800474c:	4640      	mov	r0, r8
 800474e:	4649      	mov	r1, r9
 8004750:	f7fc f95c 	bl	8000a0c <__aeabi_dcmpun>
 8004754:	b148      	cbz	r0, 800476a <_printf_float+0xe2>
 8004756:	464b      	mov	r3, r9
 8004758:	2b00      	cmp	r3, #0
 800475a:	bfb8      	it	lt
 800475c:	232d      	movlt	r3, #45	@ 0x2d
 800475e:	4a80      	ldr	r2, [pc, #512]	@ (8004960 <_printf_float+0x2d8>)
 8004760:	bfb8      	it	lt
 8004762:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004766:	4b7f      	ldr	r3, [pc, #508]	@ (8004964 <_printf_float+0x2dc>)
 8004768:	e7d3      	b.n	8004712 <_printf_float+0x8a>
 800476a:	6863      	ldr	r3, [r4, #4]
 800476c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	d13f      	bne.n	80047f4 <_printf_float+0x16c>
 8004774:	2306      	movs	r3, #6
 8004776:	6063      	str	r3, [r4, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	9206      	str	r2, [sp, #24]
 8004782:	aa0e      	add	r2, sp, #56	@ 0x38
 8004784:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004788:	aa0d      	add	r2, sp, #52	@ 0x34
 800478a:	9203      	str	r2, [sp, #12]
 800478c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004790:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004794:	6863      	ldr	r3, [r4, #4]
 8004796:	4642      	mov	r2, r8
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	4628      	mov	r0, r5
 800479c:	464b      	mov	r3, r9
 800479e:	910a      	str	r1, [sp, #40]	@ 0x28
 80047a0:	f7ff fed4 	bl	800454c <__cvt>
 80047a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80047a6:	4680      	mov	r8, r0
 80047a8:	2947      	cmp	r1, #71	@ 0x47
 80047aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80047ac:	d128      	bne.n	8004800 <_printf_float+0x178>
 80047ae:	1cc8      	adds	r0, r1, #3
 80047b0:	db02      	blt.n	80047b8 <_printf_float+0x130>
 80047b2:	6863      	ldr	r3, [r4, #4]
 80047b4:	4299      	cmp	r1, r3
 80047b6:	dd40      	ble.n	800483a <_printf_float+0x1b2>
 80047b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80047bc:	fa5f fa8a 	uxtb.w	sl, sl
 80047c0:	4652      	mov	r2, sl
 80047c2:	3901      	subs	r1, #1
 80047c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80047c8:	910d      	str	r1, [sp, #52]	@ 0x34
 80047ca:	f7ff ff23 	bl	8004614 <__exponent>
 80047ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047d0:	4681      	mov	r9, r0
 80047d2:	1813      	adds	r3, r2, r0
 80047d4:	2a01      	cmp	r2, #1
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	dc02      	bgt.n	80047e0 <_printf_float+0x158>
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	07d2      	lsls	r2, r2, #31
 80047de:	d501      	bpl.n	80047e4 <_printf_float+0x15c>
 80047e0:	3301      	adds	r3, #1
 80047e2:	6123      	str	r3, [r4, #16]
 80047e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d09e      	beq.n	800472a <_printf_float+0xa2>
 80047ec:	232d      	movs	r3, #45	@ 0x2d
 80047ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047f2:	e79a      	b.n	800472a <_printf_float+0xa2>
 80047f4:	2947      	cmp	r1, #71	@ 0x47
 80047f6:	d1bf      	bne.n	8004778 <_printf_float+0xf0>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1bd      	bne.n	8004778 <_printf_float+0xf0>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e7ba      	b.n	8004776 <_printf_float+0xee>
 8004800:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004804:	d9dc      	bls.n	80047c0 <_printf_float+0x138>
 8004806:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800480a:	d118      	bne.n	800483e <_printf_float+0x1b6>
 800480c:	2900      	cmp	r1, #0
 800480e:	6863      	ldr	r3, [r4, #4]
 8004810:	dd0b      	ble.n	800482a <_printf_float+0x1a2>
 8004812:	6121      	str	r1, [r4, #16]
 8004814:	b913      	cbnz	r3, 800481c <_printf_float+0x194>
 8004816:	6822      	ldr	r2, [r4, #0]
 8004818:	07d0      	lsls	r0, r2, #31
 800481a:	d502      	bpl.n	8004822 <_printf_float+0x19a>
 800481c:	3301      	adds	r3, #1
 800481e:	440b      	add	r3, r1
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	f04f 0900 	mov.w	r9, #0
 8004826:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004828:	e7dc      	b.n	80047e4 <_printf_float+0x15c>
 800482a:	b913      	cbnz	r3, 8004832 <_printf_float+0x1aa>
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	07d2      	lsls	r2, r2, #31
 8004830:	d501      	bpl.n	8004836 <_printf_float+0x1ae>
 8004832:	3302      	adds	r3, #2
 8004834:	e7f4      	b.n	8004820 <_printf_float+0x198>
 8004836:	2301      	movs	r3, #1
 8004838:	e7f2      	b.n	8004820 <_printf_float+0x198>
 800483a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800483e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004840:	4299      	cmp	r1, r3
 8004842:	db05      	blt.n	8004850 <_printf_float+0x1c8>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	6121      	str	r1, [r4, #16]
 8004848:	07d8      	lsls	r0, r3, #31
 800484a:	d5ea      	bpl.n	8004822 <_printf_float+0x19a>
 800484c:	1c4b      	adds	r3, r1, #1
 800484e:	e7e7      	b.n	8004820 <_printf_float+0x198>
 8004850:	2900      	cmp	r1, #0
 8004852:	bfcc      	ite	gt
 8004854:	2201      	movgt	r2, #1
 8004856:	f1c1 0202 	rsble	r2, r1, #2
 800485a:	4413      	add	r3, r2
 800485c:	e7e0      	b.n	8004820 <_printf_float+0x198>
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	055a      	lsls	r2, r3, #21
 8004862:	d407      	bmi.n	8004874 <_printf_float+0x1ec>
 8004864:	6923      	ldr	r3, [r4, #16]
 8004866:	4642      	mov	r2, r8
 8004868:	4631      	mov	r1, r6
 800486a:	4628      	mov	r0, r5
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	d12b      	bne.n	80048ca <_printf_float+0x242>
 8004872:	e764      	b.n	800473e <_printf_float+0xb6>
 8004874:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004878:	f240 80dc 	bls.w	8004a34 <_printf_float+0x3ac>
 800487c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004880:	2200      	movs	r2, #0
 8004882:	2300      	movs	r3, #0
 8004884:	f7fc f890 	bl	80009a8 <__aeabi_dcmpeq>
 8004888:	2800      	cmp	r0, #0
 800488a:	d033      	beq.n	80048f4 <_printf_float+0x26c>
 800488c:	2301      	movs	r3, #1
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	4a35      	ldr	r2, [pc, #212]	@ (8004968 <_printf_float+0x2e0>)
 8004894:	47b8      	blx	r7
 8004896:	3001      	adds	r0, #1
 8004898:	f43f af51 	beq.w	800473e <_printf_float+0xb6>
 800489c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80048a0:	4543      	cmp	r3, r8
 80048a2:	db02      	blt.n	80048aa <_printf_float+0x222>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	07d8      	lsls	r0, r3, #31
 80048a8:	d50f      	bpl.n	80048ca <_printf_float+0x242>
 80048aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048ae:	4631      	mov	r1, r6
 80048b0:	4628      	mov	r0, r5
 80048b2:	47b8      	blx	r7
 80048b4:	3001      	adds	r0, #1
 80048b6:	f43f af42 	beq.w	800473e <_printf_float+0xb6>
 80048ba:	f04f 0900 	mov.w	r9, #0
 80048be:	f108 38ff 	add.w	r8, r8, #4294967295
 80048c2:	f104 0a1a 	add.w	sl, r4, #26
 80048c6:	45c8      	cmp	r8, r9
 80048c8:	dc09      	bgt.n	80048de <_printf_float+0x256>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	079b      	lsls	r3, r3, #30
 80048ce:	f100 8102 	bmi.w	8004ad6 <_printf_float+0x44e>
 80048d2:	68e0      	ldr	r0, [r4, #12]
 80048d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048d6:	4298      	cmp	r0, r3
 80048d8:	bfb8      	it	lt
 80048da:	4618      	movlt	r0, r3
 80048dc:	e731      	b.n	8004742 <_printf_float+0xba>
 80048de:	2301      	movs	r3, #1
 80048e0:	4652      	mov	r2, sl
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b8      	blx	r7
 80048e8:	3001      	adds	r0, #1
 80048ea:	f43f af28 	beq.w	800473e <_printf_float+0xb6>
 80048ee:	f109 0901 	add.w	r9, r9, #1
 80048f2:	e7e8      	b.n	80048c6 <_printf_float+0x23e>
 80048f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	dc38      	bgt.n	800496c <_printf_float+0x2e4>
 80048fa:	2301      	movs	r3, #1
 80048fc:	4631      	mov	r1, r6
 80048fe:	4628      	mov	r0, r5
 8004900:	4a19      	ldr	r2, [pc, #100]	@ (8004968 <_printf_float+0x2e0>)
 8004902:	47b8      	blx	r7
 8004904:	3001      	adds	r0, #1
 8004906:	f43f af1a 	beq.w	800473e <_printf_float+0xb6>
 800490a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800490e:	ea59 0303 	orrs.w	r3, r9, r3
 8004912:	d102      	bne.n	800491a <_printf_float+0x292>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	07d9      	lsls	r1, r3, #31
 8004918:	d5d7      	bpl.n	80048ca <_printf_float+0x242>
 800491a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800491e:	4631      	mov	r1, r6
 8004920:	4628      	mov	r0, r5
 8004922:	47b8      	blx	r7
 8004924:	3001      	adds	r0, #1
 8004926:	f43f af0a 	beq.w	800473e <_printf_float+0xb6>
 800492a:	f04f 0a00 	mov.w	sl, #0
 800492e:	f104 0b1a 	add.w	fp, r4, #26
 8004932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004934:	425b      	negs	r3, r3
 8004936:	4553      	cmp	r3, sl
 8004938:	dc01      	bgt.n	800493e <_printf_float+0x2b6>
 800493a:	464b      	mov	r3, r9
 800493c:	e793      	b.n	8004866 <_printf_float+0x1de>
 800493e:	2301      	movs	r3, #1
 8004940:	465a      	mov	r2, fp
 8004942:	4631      	mov	r1, r6
 8004944:	4628      	mov	r0, r5
 8004946:	47b8      	blx	r7
 8004948:	3001      	adds	r0, #1
 800494a:	f43f aef8 	beq.w	800473e <_printf_float+0xb6>
 800494e:	f10a 0a01 	add.w	sl, sl, #1
 8004952:	e7ee      	b.n	8004932 <_printf_float+0x2aa>
 8004954:	7fefffff 	.word	0x7fefffff
 8004958:	08008ce0 	.word	0x08008ce0
 800495c:	08008cdc 	.word	0x08008cdc
 8004960:	08008ce8 	.word	0x08008ce8
 8004964:	08008ce4 	.word	0x08008ce4
 8004968:	08008cec 	.word	0x08008cec
 800496c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800496e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004972:	4553      	cmp	r3, sl
 8004974:	bfa8      	it	ge
 8004976:	4653      	movge	r3, sl
 8004978:	2b00      	cmp	r3, #0
 800497a:	4699      	mov	r9, r3
 800497c:	dc36      	bgt.n	80049ec <_printf_float+0x364>
 800497e:	f04f 0b00 	mov.w	fp, #0
 8004982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004986:	f104 021a 	add.w	r2, r4, #26
 800498a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800498c:	930a      	str	r3, [sp, #40]	@ 0x28
 800498e:	eba3 0309 	sub.w	r3, r3, r9
 8004992:	455b      	cmp	r3, fp
 8004994:	dc31      	bgt.n	80049fa <_printf_float+0x372>
 8004996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004998:	459a      	cmp	sl, r3
 800499a:	dc3a      	bgt.n	8004a12 <_printf_float+0x38a>
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	07da      	lsls	r2, r3, #31
 80049a0:	d437      	bmi.n	8004a12 <_printf_float+0x38a>
 80049a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049a4:	ebaa 0903 	sub.w	r9, sl, r3
 80049a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049aa:	ebaa 0303 	sub.w	r3, sl, r3
 80049ae:	4599      	cmp	r9, r3
 80049b0:	bfa8      	it	ge
 80049b2:	4699      	movge	r9, r3
 80049b4:	f1b9 0f00 	cmp.w	r9, #0
 80049b8:	dc33      	bgt.n	8004a22 <_printf_float+0x39a>
 80049ba:	f04f 0800 	mov.w	r8, #0
 80049be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049c2:	f104 0b1a 	add.w	fp, r4, #26
 80049c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049c8:	ebaa 0303 	sub.w	r3, sl, r3
 80049cc:	eba3 0309 	sub.w	r3, r3, r9
 80049d0:	4543      	cmp	r3, r8
 80049d2:	f77f af7a 	ble.w	80048ca <_printf_float+0x242>
 80049d6:	2301      	movs	r3, #1
 80049d8:	465a      	mov	r2, fp
 80049da:	4631      	mov	r1, r6
 80049dc:	4628      	mov	r0, r5
 80049de:	47b8      	blx	r7
 80049e0:	3001      	adds	r0, #1
 80049e2:	f43f aeac 	beq.w	800473e <_printf_float+0xb6>
 80049e6:	f108 0801 	add.w	r8, r8, #1
 80049ea:	e7ec      	b.n	80049c6 <_printf_float+0x33e>
 80049ec:	4642      	mov	r2, r8
 80049ee:	4631      	mov	r1, r6
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b8      	blx	r7
 80049f4:	3001      	adds	r0, #1
 80049f6:	d1c2      	bne.n	800497e <_printf_float+0x2f6>
 80049f8:	e6a1      	b.n	800473e <_printf_float+0xb6>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4631      	mov	r1, r6
 80049fe:	4628      	mov	r0, r5
 8004a00:	920a      	str	r2, [sp, #40]	@ 0x28
 8004a02:	47b8      	blx	r7
 8004a04:	3001      	adds	r0, #1
 8004a06:	f43f ae9a 	beq.w	800473e <_printf_float+0xb6>
 8004a0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a0c:	f10b 0b01 	add.w	fp, fp, #1
 8004a10:	e7bb      	b.n	800498a <_printf_float+0x302>
 8004a12:	4631      	mov	r1, r6
 8004a14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a18:	4628      	mov	r0, r5
 8004a1a:	47b8      	blx	r7
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d1c0      	bne.n	80049a2 <_printf_float+0x31a>
 8004a20:	e68d      	b.n	800473e <_printf_float+0xb6>
 8004a22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a24:	464b      	mov	r3, r9
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	4442      	add	r2, r8
 8004a2c:	47b8      	blx	r7
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d1c3      	bne.n	80049ba <_printf_float+0x332>
 8004a32:	e684      	b.n	800473e <_printf_float+0xb6>
 8004a34:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004a38:	f1ba 0f01 	cmp.w	sl, #1
 8004a3c:	dc01      	bgt.n	8004a42 <_printf_float+0x3ba>
 8004a3e:	07db      	lsls	r3, r3, #31
 8004a40:	d536      	bpl.n	8004ab0 <_printf_float+0x428>
 8004a42:	2301      	movs	r3, #1
 8004a44:	4642      	mov	r2, r8
 8004a46:	4631      	mov	r1, r6
 8004a48:	4628      	mov	r0, r5
 8004a4a:	47b8      	blx	r7
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	f43f ae76 	beq.w	800473e <_printf_float+0xb6>
 8004a52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a56:	4631      	mov	r1, r6
 8004a58:	4628      	mov	r0, r5
 8004a5a:	47b8      	blx	r7
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	f43f ae6e 	beq.w	800473e <_printf_float+0xb6>
 8004a62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a66:	2200      	movs	r2, #0
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a6e:	f7fb ff9b 	bl	80009a8 <__aeabi_dcmpeq>
 8004a72:	b9c0      	cbnz	r0, 8004aa6 <_printf_float+0x41e>
 8004a74:	4653      	mov	r3, sl
 8004a76:	f108 0201 	add.w	r2, r8, #1
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b8      	blx	r7
 8004a80:	3001      	adds	r0, #1
 8004a82:	d10c      	bne.n	8004a9e <_printf_float+0x416>
 8004a84:	e65b      	b.n	800473e <_printf_float+0xb6>
 8004a86:	2301      	movs	r3, #1
 8004a88:	465a      	mov	r2, fp
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b8      	blx	r7
 8004a90:	3001      	adds	r0, #1
 8004a92:	f43f ae54 	beq.w	800473e <_printf_float+0xb6>
 8004a96:	f108 0801 	add.w	r8, r8, #1
 8004a9a:	45d0      	cmp	r8, sl
 8004a9c:	dbf3      	blt.n	8004a86 <_printf_float+0x3fe>
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004aa4:	e6e0      	b.n	8004868 <_printf_float+0x1e0>
 8004aa6:	f04f 0800 	mov.w	r8, #0
 8004aaa:	f104 0b1a 	add.w	fp, r4, #26
 8004aae:	e7f4      	b.n	8004a9a <_printf_float+0x412>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4642      	mov	r2, r8
 8004ab4:	e7e1      	b.n	8004a7a <_printf_float+0x3f2>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	464a      	mov	r2, r9
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f ae3c 	beq.w	800473e <_printf_float+0xb6>
 8004ac6:	f108 0801 	add.w	r8, r8, #1
 8004aca:	68e3      	ldr	r3, [r4, #12]
 8004acc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004ace:	1a5b      	subs	r3, r3, r1
 8004ad0:	4543      	cmp	r3, r8
 8004ad2:	dcf0      	bgt.n	8004ab6 <_printf_float+0x42e>
 8004ad4:	e6fd      	b.n	80048d2 <_printf_float+0x24a>
 8004ad6:	f04f 0800 	mov.w	r8, #0
 8004ada:	f104 0919 	add.w	r9, r4, #25
 8004ade:	e7f4      	b.n	8004aca <_printf_float+0x442>

08004ae0 <_printf_common>:
 8004ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	4616      	mov	r6, r2
 8004ae6:	4698      	mov	r8, r3
 8004ae8:	688a      	ldr	r2, [r1, #8]
 8004aea:	690b      	ldr	r3, [r1, #16]
 8004aec:	4607      	mov	r7, r0
 8004aee:	4293      	cmp	r3, r2
 8004af0:	bfb8      	it	lt
 8004af2:	4613      	movlt	r3, r2
 8004af4:	6033      	str	r3, [r6, #0]
 8004af6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004afa:	460c      	mov	r4, r1
 8004afc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b00:	b10a      	cbz	r2, 8004b06 <_printf_common+0x26>
 8004b02:	3301      	adds	r3, #1
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	0699      	lsls	r1, r3, #26
 8004b0a:	bf42      	ittt	mi
 8004b0c:	6833      	ldrmi	r3, [r6, #0]
 8004b0e:	3302      	addmi	r3, #2
 8004b10:	6033      	strmi	r3, [r6, #0]
 8004b12:	6825      	ldr	r5, [r4, #0]
 8004b14:	f015 0506 	ands.w	r5, r5, #6
 8004b18:	d106      	bne.n	8004b28 <_printf_common+0x48>
 8004b1a:	f104 0a19 	add.w	sl, r4, #25
 8004b1e:	68e3      	ldr	r3, [r4, #12]
 8004b20:	6832      	ldr	r2, [r6, #0]
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	42ab      	cmp	r3, r5
 8004b26:	dc2b      	bgt.n	8004b80 <_printf_common+0xa0>
 8004b28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	3b00      	subs	r3, #0
 8004b30:	bf18      	it	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	0692      	lsls	r2, r2, #26
 8004b36:	d430      	bmi.n	8004b9a <_printf_common+0xba>
 8004b38:	4641      	mov	r1, r8
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b40:	47c8      	blx	r9
 8004b42:	3001      	adds	r0, #1
 8004b44:	d023      	beq.n	8004b8e <_printf_common+0xae>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	6922      	ldr	r2, [r4, #16]
 8004b4a:	f003 0306 	and.w	r3, r3, #6
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	bf14      	ite	ne
 8004b52:	2500      	movne	r5, #0
 8004b54:	6833      	ldreq	r3, [r6, #0]
 8004b56:	f04f 0600 	mov.w	r6, #0
 8004b5a:	bf08      	it	eq
 8004b5c:	68e5      	ldreq	r5, [r4, #12]
 8004b5e:	f104 041a 	add.w	r4, r4, #26
 8004b62:	bf08      	it	eq
 8004b64:	1aed      	subeq	r5, r5, r3
 8004b66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b6a:	bf08      	it	eq
 8004b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b70:	4293      	cmp	r3, r2
 8004b72:	bfc4      	itt	gt
 8004b74:	1a9b      	subgt	r3, r3, r2
 8004b76:	18ed      	addgt	r5, r5, r3
 8004b78:	42b5      	cmp	r5, r6
 8004b7a:	d11a      	bne.n	8004bb2 <_printf_common+0xd2>
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e008      	b.n	8004b92 <_printf_common+0xb2>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4652      	mov	r2, sl
 8004b84:	4641      	mov	r1, r8
 8004b86:	4638      	mov	r0, r7
 8004b88:	47c8      	blx	r9
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d103      	bne.n	8004b96 <_printf_common+0xb6>
 8004b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b96:	3501      	adds	r5, #1
 8004b98:	e7c1      	b.n	8004b1e <_printf_common+0x3e>
 8004b9a:	2030      	movs	r0, #48	@ 0x30
 8004b9c:	18e1      	adds	r1, r4, r3
 8004b9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ba8:	4422      	add	r2, r4
 8004baa:	3302      	adds	r3, #2
 8004bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bb0:	e7c2      	b.n	8004b38 <_printf_common+0x58>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	4638      	mov	r0, r7
 8004bba:	47c8      	blx	r9
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d0e6      	beq.n	8004b8e <_printf_common+0xae>
 8004bc0:	3601      	adds	r6, #1
 8004bc2:	e7d9      	b.n	8004b78 <_printf_common+0x98>

08004bc4 <_printf_i>:
 8004bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc8:	7e0f      	ldrb	r7, [r1, #24]
 8004bca:	4691      	mov	r9, r2
 8004bcc:	2f78      	cmp	r7, #120	@ 0x78
 8004bce:	4680      	mov	r8, r0
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	469a      	mov	sl, r3
 8004bd4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bda:	d807      	bhi.n	8004bec <_printf_i+0x28>
 8004bdc:	2f62      	cmp	r7, #98	@ 0x62
 8004bde:	d80a      	bhi.n	8004bf6 <_printf_i+0x32>
 8004be0:	2f00      	cmp	r7, #0
 8004be2:	f000 80d1 	beq.w	8004d88 <_printf_i+0x1c4>
 8004be6:	2f58      	cmp	r7, #88	@ 0x58
 8004be8:	f000 80b8 	beq.w	8004d5c <_printf_i+0x198>
 8004bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bf4:	e03a      	b.n	8004c6c <_printf_i+0xa8>
 8004bf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bfa:	2b15      	cmp	r3, #21
 8004bfc:	d8f6      	bhi.n	8004bec <_printf_i+0x28>
 8004bfe:	a101      	add	r1, pc, #4	@ (adr r1, 8004c04 <_printf_i+0x40>)
 8004c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c04:	08004c5d 	.word	0x08004c5d
 8004c08:	08004c71 	.word	0x08004c71
 8004c0c:	08004bed 	.word	0x08004bed
 8004c10:	08004bed 	.word	0x08004bed
 8004c14:	08004bed 	.word	0x08004bed
 8004c18:	08004bed 	.word	0x08004bed
 8004c1c:	08004c71 	.word	0x08004c71
 8004c20:	08004bed 	.word	0x08004bed
 8004c24:	08004bed 	.word	0x08004bed
 8004c28:	08004bed 	.word	0x08004bed
 8004c2c:	08004bed 	.word	0x08004bed
 8004c30:	08004d6f 	.word	0x08004d6f
 8004c34:	08004c9b 	.word	0x08004c9b
 8004c38:	08004d29 	.word	0x08004d29
 8004c3c:	08004bed 	.word	0x08004bed
 8004c40:	08004bed 	.word	0x08004bed
 8004c44:	08004d91 	.word	0x08004d91
 8004c48:	08004bed 	.word	0x08004bed
 8004c4c:	08004c9b 	.word	0x08004c9b
 8004c50:	08004bed 	.word	0x08004bed
 8004c54:	08004bed 	.word	0x08004bed
 8004c58:	08004d31 	.word	0x08004d31
 8004c5c:	6833      	ldr	r3, [r6, #0]
 8004c5e:	1d1a      	adds	r2, r3, #4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6032      	str	r2, [r6, #0]
 8004c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e09c      	b.n	8004daa <_printf_i+0x1e6>
 8004c70:	6833      	ldr	r3, [r6, #0]
 8004c72:	6820      	ldr	r0, [r4, #0]
 8004c74:	1d19      	adds	r1, r3, #4
 8004c76:	6031      	str	r1, [r6, #0]
 8004c78:	0606      	lsls	r6, r0, #24
 8004c7a:	d501      	bpl.n	8004c80 <_printf_i+0xbc>
 8004c7c:	681d      	ldr	r5, [r3, #0]
 8004c7e:	e003      	b.n	8004c88 <_printf_i+0xc4>
 8004c80:	0645      	lsls	r5, r0, #25
 8004c82:	d5fb      	bpl.n	8004c7c <_printf_i+0xb8>
 8004c84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	da03      	bge.n	8004c94 <_printf_i+0xd0>
 8004c8c:	232d      	movs	r3, #45	@ 0x2d
 8004c8e:	426d      	negs	r5, r5
 8004c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c94:	230a      	movs	r3, #10
 8004c96:	4858      	ldr	r0, [pc, #352]	@ (8004df8 <_printf_i+0x234>)
 8004c98:	e011      	b.n	8004cbe <_printf_i+0xfa>
 8004c9a:	6821      	ldr	r1, [r4, #0]
 8004c9c:	6833      	ldr	r3, [r6, #0]
 8004c9e:	0608      	lsls	r0, r1, #24
 8004ca0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ca4:	d402      	bmi.n	8004cac <_printf_i+0xe8>
 8004ca6:	0649      	lsls	r1, r1, #25
 8004ca8:	bf48      	it	mi
 8004caa:	b2ad      	uxthmi	r5, r5
 8004cac:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cae:	6033      	str	r3, [r6, #0]
 8004cb0:	bf14      	ite	ne
 8004cb2:	230a      	movne	r3, #10
 8004cb4:	2308      	moveq	r3, #8
 8004cb6:	4850      	ldr	r0, [pc, #320]	@ (8004df8 <_printf_i+0x234>)
 8004cb8:	2100      	movs	r1, #0
 8004cba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cbe:	6866      	ldr	r6, [r4, #4]
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	60a6      	str	r6, [r4, #8]
 8004cc4:	db05      	blt.n	8004cd2 <_printf_i+0x10e>
 8004cc6:	6821      	ldr	r1, [r4, #0]
 8004cc8:	432e      	orrs	r6, r5
 8004cca:	f021 0104 	bic.w	r1, r1, #4
 8004cce:	6021      	str	r1, [r4, #0]
 8004cd0:	d04b      	beq.n	8004d6a <_printf_i+0x1a6>
 8004cd2:	4616      	mov	r6, r2
 8004cd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cd8:	fb03 5711 	mls	r7, r3, r1, r5
 8004cdc:	5dc7      	ldrb	r7, [r0, r7]
 8004cde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ce2:	462f      	mov	r7, r5
 8004ce4:	42bb      	cmp	r3, r7
 8004ce6:	460d      	mov	r5, r1
 8004ce8:	d9f4      	bls.n	8004cd4 <_printf_i+0x110>
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d10b      	bne.n	8004d06 <_printf_i+0x142>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	07df      	lsls	r7, r3, #31
 8004cf2:	d508      	bpl.n	8004d06 <_printf_i+0x142>
 8004cf4:	6923      	ldr	r3, [r4, #16]
 8004cf6:	6861      	ldr	r1, [r4, #4]
 8004cf8:	4299      	cmp	r1, r3
 8004cfa:	bfde      	ittt	le
 8004cfc:	2330      	movle	r3, #48	@ 0x30
 8004cfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d06:	1b92      	subs	r2, r2, r6
 8004d08:	6122      	str	r2, [r4, #16]
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4640      	mov	r0, r8
 8004d10:	f8cd a000 	str.w	sl, [sp]
 8004d14:	aa03      	add	r2, sp, #12
 8004d16:	f7ff fee3 	bl	8004ae0 <_printf_common>
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d14a      	bne.n	8004db4 <_printf_i+0x1f0>
 8004d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d22:	b004      	add	sp, #16
 8004d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	f043 0320 	orr.w	r3, r3, #32
 8004d2e:	6023      	str	r3, [r4, #0]
 8004d30:	2778      	movs	r7, #120	@ 0x78
 8004d32:	4832      	ldr	r0, [pc, #200]	@ (8004dfc <_printf_i+0x238>)
 8004d34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	6831      	ldr	r1, [r6, #0]
 8004d3c:	061f      	lsls	r7, r3, #24
 8004d3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d42:	d402      	bmi.n	8004d4a <_printf_i+0x186>
 8004d44:	065f      	lsls	r7, r3, #25
 8004d46:	bf48      	it	mi
 8004d48:	b2ad      	uxthmi	r5, r5
 8004d4a:	6031      	str	r1, [r6, #0]
 8004d4c:	07d9      	lsls	r1, r3, #31
 8004d4e:	bf44      	itt	mi
 8004d50:	f043 0320 	orrmi.w	r3, r3, #32
 8004d54:	6023      	strmi	r3, [r4, #0]
 8004d56:	b11d      	cbz	r5, 8004d60 <_printf_i+0x19c>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	e7ad      	b.n	8004cb8 <_printf_i+0xf4>
 8004d5c:	4826      	ldr	r0, [pc, #152]	@ (8004df8 <_printf_i+0x234>)
 8004d5e:	e7e9      	b.n	8004d34 <_printf_i+0x170>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	f023 0320 	bic.w	r3, r3, #32
 8004d66:	6023      	str	r3, [r4, #0]
 8004d68:	e7f6      	b.n	8004d58 <_printf_i+0x194>
 8004d6a:	4616      	mov	r6, r2
 8004d6c:	e7bd      	b.n	8004cea <_printf_i+0x126>
 8004d6e:	6833      	ldr	r3, [r6, #0]
 8004d70:	6825      	ldr	r5, [r4, #0]
 8004d72:	1d18      	adds	r0, r3, #4
 8004d74:	6961      	ldr	r1, [r4, #20]
 8004d76:	6030      	str	r0, [r6, #0]
 8004d78:	062e      	lsls	r6, r5, #24
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	d501      	bpl.n	8004d82 <_printf_i+0x1be>
 8004d7e:	6019      	str	r1, [r3, #0]
 8004d80:	e002      	b.n	8004d88 <_printf_i+0x1c4>
 8004d82:	0668      	lsls	r0, r5, #25
 8004d84:	d5fb      	bpl.n	8004d7e <_printf_i+0x1ba>
 8004d86:	8019      	strh	r1, [r3, #0]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4616      	mov	r6, r2
 8004d8c:	6123      	str	r3, [r4, #16]
 8004d8e:	e7bc      	b.n	8004d0a <_printf_i+0x146>
 8004d90:	6833      	ldr	r3, [r6, #0]
 8004d92:	2100      	movs	r1, #0
 8004d94:	1d1a      	adds	r2, r3, #4
 8004d96:	6032      	str	r2, [r6, #0]
 8004d98:	681e      	ldr	r6, [r3, #0]
 8004d9a:	6862      	ldr	r2, [r4, #4]
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	f000 fbe0 	bl	8005562 <memchr>
 8004da2:	b108      	cbz	r0, 8004da8 <_printf_i+0x1e4>
 8004da4:	1b80      	subs	r0, r0, r6
 8004da6:	6060      	str	r0, [r4, #4]
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	6123      	str	r3, [r4, #16]
 8004dac:	2300      	movs	r3, #0
 8004dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004db2:	e7aa      	b.n	8004d0a <_printf_i+0x146>
 8004db4:	4632      	mov	r2, r6
 8004db6:	4649      	mov	r1, r9
 8004db8:	4640      	mov	r0, r8
 8004dba:	6923      	ldr	r3, [r4, #16]
 8004dbc:	47d0      	blx	sl
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d0ad      	beq.n	8004d1e <_printf_i+0x15a>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	079b      	lsls	r3, r3, #30
 8004dc6:	d413      	bmi.n	8004df0 <_printf_i+0x22c>
 8004dc8:	68e0      	ldr	r0, [r4, #12]
 8004dca:	9b03      	ldr	r3, [sp, #12]
 8004dcc:	4298      	cmp	r0, r3
 8004dce:	bfb8      	it	lt
 8004dd0:	4618      	movlt	r0, r3
 8004dd2:	e7a6      	b.n	8004d22 <_printf_i+0x15e>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4640      	mov	r0, r8
 8004ddc:	47d0      	blx	sl
 8004dde:	3001      	adds	r0, #1
 8004de0:	d09d      	beq.n	8004d1e <_printf_i+0x15a>
 8004de2:	3501      	adds	r5, #1
 8004de4:	68e3      	ldr	r3, [r4, #12]
 8004de6:	9903      	ldr	r1, [sp, #12]
 8004de8:	1a5b      	subs	r3, r3, r1
 8004dea:	42ab      	cmp	r3, r5
 8004dec:	dcf2      	bgt.n	8004dd4 <_printf_i+0x210>
 8004dee:	e7eb      	b.n	8004dc8 <_printf_i+0x204>
 8004df0:	2500      	movs	r5, #0
 8004df2:	f104 0619 	add.w	r6, r4, #25
 8004df6:	e7f5      	b.n	8004de4 <_printf_i+0x220>
 8004df8:	08008cee 	.word	0x08008cee
 8004dfc:	08008cff 	.word	0x08008cff

08004e00 <_scanf_float>:
 8004e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e04:	b087      	sub	sp, #28
 8004e06:	9303      	str	r3, [sp, #12]
 8004e08:	688b      	ldr	r3, [r1, #8]
 8004e0a:	4691      	mov	r9, r2
 8004e0c:	1e5a      	subs	r2, r3, #1
 8004e0e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004e12:	bf82      	ittt	hi
 8004e14:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004e18:	eb03 0b05 	addhi.w	fp, r3, r5
 8004e1c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004e20:	460a      	mov	r2, r1
 8004e22:	f04f 0500 	mov.w	r5, #0
 8004e26:	bf88      	it	hi
 8004e28:	608b      	strhi	r3, [r1, #8]
 8004e2a:	680b      	ldr	r3, [r1, #0]
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004e32:	f842 3b1c 	str.w	r3, [r2], #28
 8004e36:	460c      	mov	r4, r1
 8004e38:	bf98      	it	ls
 8004e3a:	f04f 0b00 	movls.w	fp, #0
 8004e3e:	4616      	mov	r6, r2
 8004e40:	46aa      	mov	sl, r5
 8004e42:	462f      	mov	r7, r5
 8004e44:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004e48:	9201      	str	r2, [sp, #4]
 8004e4a:	9502      	str	r5, [sp, #8]
 8004e4c:	68a2      	ldr	r2, [r4, #8]
 8004e4e:	b15a      	cbz	r2, 8004e68 <_scanf_float+0x68>
 8004e50:	f8d9 3000 	ldr.w	r3, [r9]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b4e      	cmp	r3, #78	@ 0x4e
 8004e58:	d862      	bhi.n	8004f20 <_scanf_float+0x120>
 8004e5a:	2b40      	cmp	r3, #64	@ 0x40
 8004e5c:	d83a      	bhi.n	8004ed4 <_scanf_float+0xd4>
 8004e5e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004e62:	b2c8      	uxtb	r0, r1
 8004e64:	280e      	cmp	r0, #14
 8004e66:	d938      	bls.n	8004eda <_scanf_float+0xda>
 8004e68:	b11f      	cbz	r7, 8004e72 <_scanf_float+0x72>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e76:	f1ba 0f01 	cmp.w	sl, #1
 8004e7a:	f200 8114 	bhi.w	80050a6 <_scanf_float+0x2a6>
 8004e7e:	9b01      	ldr	r3, [sp, #4]
 8004e80:	429e      	cmp	r6, r3
 8004e82:	f200 8105 	bhi.w	8005090 <_scanf_float+0x290>
 8004e86:	2001      	movs	r0, #1
 8004e88:	b007      	add	sp, #28
 8004e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004e92:	2a0d      	cmp	r2, #13
 8004e94:	d8e8      	bhi.n	8004e68 <_scanf_float+0x68>
 8004e96:	a101      	add	r1, pc, #4	@ (adr r1, 8004e9c <_scanf_float+0x9c>)
 8004e98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e9c:	08004fe5 	.word	0x08004fe5
 8004ea0:	08004e69 	.word	0x08004e69
 8004ea4:	08004e69 	.word	0x08004e69
 8004ea8:	08004e69 	.word	0x08004e69
 8004eac:	08005041 	.word	0x08005041
 8004eb0:	0800501b 	.word	0x0800501b
 8004eb4:	08004e69 	.word	0x08004e69
 8004eb8:	08004e69 	.word	0x08004e69
 8004ebc:	08004ff3 	.word	0x08004ff3
 8004ec0:	08004e69 	.word	0x08004e69
 8004ec4:	08004e69 	.word	0x08004e69
 8004ec8:	08004e69 	.word	0x08004e69
 8004ecc:	08004e69 	.word	0x08004e69
 8004ed0:	08004faf 	.word	0x08004faf
 8004ed4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004ed8:	e7db      	b.n	8004e92 <_scanf_float+0x92>
 8004eda:	290e      	cmp	r1, #14
 8004edc:	d8c4      	bhi.n	8004e68 <_scanf_float+0x68>
 8004ede:	a001      	add	r0, pc, #4	@ (adr r0, 8004ee4 <_scanf_float+0xe4>)
 8004ee0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004ee4:	08004f9f 	.word	0x08004f9f
 8004ee8:	08004e69 	.word	0x08004e69
 8004eec:	08004f9f 	.word	0x08004f9f
 8004ef0:	0800502f 	.word	0x0800502f
 8004ef4:	08004e69 	.word	0x08004e69
 8004ef8:	08004f41 	.word	0x08004f41
 8004efc:	08004f85 	.word	0x08004f85
 8004f00:	08004f85 	.word	0x08004f85
 8004f04:	08004f85 	.word	0x08004f85
 8004f08:	08004f85 	.word	0x08004f85
 8004f0c:	08004f85 	.word	0x08004f85
 8004f10:	08004f85 	.word	0x08004f85
 8004f14:	08004f85 	.word	0x08004f85
 8004f18:	08004f85 	.word	0x08004f85
 8004f1c:	08004f85 	.word	0x08004f85
 8004f20:	2b6e      	cmp	r3, #110	@ 0x6e
 8004f22:	d809      	bhi.n	8004f38 <_scanf_float+0x138>
 8004f24:	2b60      	cmp	r3, #96	@ 0x60
 8004f26:	d8b2      	bhi.n	8004e8e <_scanf_float+0x8e>
 8004f28:	2b54      	cmp	r3, #84	@ 0x54
 8004f2a:	d07b      	beq.n	8005024 <_scanf_float+0x224>
 8004f2c:	2b59      	cmp	r3, #89	@ 0x59
 8004f2e:	d19b      	bne.n	8004e68 <_scanf_float+0x68>
 8004f30:	2d07      	cmp	r5, #7
 8004f32:	d199      	bne.n	8004e68 <_scanf_float+0x68>
 8004f34:	2508      	movs	r5, #8
 8004f36:	e02f      	b.n	8004f98 <_scanf_float+0x198>
 8004f38:	2b74      	cmp	r3, #116	@ 0x74
 8004f3a:	d073      	beq.n	8005024 <_scanf_float+0x224>
 8004f3c:	2b79      	cmp	r3, #121	@ 0x79
 8004f3e:	e7f6      	b.n	8004f2e <_scanf_float+0x12e>
 8004f40:	6821      	ldr	r1, [r4, #0]
 8004f42:	05c8      	lsls	r0, r1, #23
 8004f44:	d51e      	bpl.n	8004f84 <_scanf_float+0x184>
 8004f46:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004f4a:	6021      	str	r1, [r4, #0]
 8004f4c:	3701      	adds	r7, #1
 8004f4e:	f1bb 0f00 	cmp.w	fp, #0
 8004f52:	d003      	beq.n	8004f5c <_scanf_float+0x15c>
 8004f54:	3201      	adds	r2, #1
 8004f56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f5a:	60a2      	str	r2, [r4, #8]
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	60a3      	str	r3, [r4, #8]
 8004f62:	6923      	ldr	r3, [r4, #16]
 8004f64:	3301      	adds	r3, #1
 8004f66:	6123      	str	r3, [r4, #16]
 8004f68:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f8c9 3004 	str.w	r3, [r9, #4]
 8004f74:	f340 8083 	ble.w	800507e <_scanf_float+0x27e>
 8004f78:	f8d9 3000 	ldr.w	r3, [r9]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f8c9 3000 	str.w	r3, [r9]
 8004f82:	e763      	b.n	8004e4c <_scanf_float+0x4c>
 8004f84:	eb1a 0105 	adds.w	r1, sl, r5
 8004f88:	f47f af6e 	bne.w	8004e68 <_scanf_float+0x68>
 8004f8c:	460d      	mov	r5, r1
 8004f8e:	468a      	mov	sl, r1
 8004f90:	6822      	ldr	r2, [r4, #0]
 8004f92:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004f96:	6022      	str	r2, [r4, #0]
 8004f98:	f806 3b01 	strb.w	r3, [r6], #1
 8004f9c:	e7de      	b.n	8004f5c <_scanf_float+0x15c>
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	0610      	lsls	r0, r2, #24
 8004fa2:	f57f af61 	bpl.w	8004e68 <_scanf_float+0x68>
 8004fa6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004faa:	6022      	str	r2, [r4, #0]
 8004fac:	e7f4      	b.n	8004f98 <_scanf_float+0x198>
 8004fae:	f1ba 0f00 	cmp.w	sl, #0
 8004fb2:	d10c      	bne.n	8004fce <_scanf_float+0x1ce>
 8004fb4:	b977      	cbnz	r7, 8004fd4 <_scanf_float+0x1d4>
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004fbc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004fc0:	d108      	bne.n	8004fd4 <_scanf_float+0x1d4>
 8004fc2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004fc6:	f04f 0a01 	mov.w	sl, #1
 8004fca:	6022      	str	r2, [r4, #0]
 8004fcc:	e7e4      	b.n	8004f98 <_scanf_float+0x198>
 8004fce:	f1ba 0f02 	cmp.w	sl, #2
 8004fd2:	d051      	beq.n	8005078 <_scanf_float+0x278>
 8004fd4:	2d01      	cmp	r5, #1
 8004fd6:	d002      	beq.n	8004fde <_scanf_float+0x1de>
 8004fd8:	2d04      	cmp	r5, #4
 8004fda:	f47f af45 	bne.w	8004e68 <_scanf_float+0x68>
 8004fde:	3501      	adds	r5, #1
 8004fe0:	b2ed      	uxtb	r5, r5
 8004fe2:	e7d9      	b.n	8004f98 <_scanf_float+0x198>
 8004fe4:	f1ba 0f01 	cmp.w	sl, #1
 8004fe8:	f47f af3e 	bne.w	8004e68 <_scanf_float+0x68>
 8004fec:	f04f 0a02 	mov.w	sl, #2
 8004ff0:	e7d2      	b.n	8004f98 <_scanf_float+0x198>
 8004ff2:	b975      	cbnz	r5, 8005012 <_scanf_float+0x212>
 8004ff4:	2f00      	cmp	r7, #0
 8004ff6:	f47f af38 	bne.w	8004e6a <_scanf_float+0x6a>
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005000:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005004:	f040 80ff 	bne.w	8005206 <_scanf_float+0x406>
 8005008:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800500c:	2501      	movs	r5, #1
 800500e:	6022      	str	r2, [r4, #0]
 8005010:	e7c2      	b.n	8004f98 <_scanf_float+0x198>
 8005012:	2d03      	cmp	r5, #3
 8005014:	d0e3      	beq.n	8004fde <_scanf_float+0x1de>
 8005016:	2d05      	cmp	r5, #5
 8005018:	e7df      	b.n	8004fda <_scanf_float+0x1da>
 800501a:	2d02      	cmp	r5, #2
 800501c:	f47f af24 	bne.w	8004e68 <_scanf_float+0x68>
 8005020:	2503      	movs	r5, #3
 8005022:	e7b9      	b.n	8004f98 <_scanf_float+0x198>
 8005024:	2d06      	cmp	r5, #6
 8005026:	f47f af1f 	bne.w	8004e68 <_scanf_float+0x68>
 800502a:	2507      	movs	r5, #7
 800502c:	e7b4      	b.n	8004f98 <_scanf_float+0x198>
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	0591      	lsls	r1, r2, #22
 8005032:	f57f af19 	bpl.w	8004e68 <_scanf_float+0x68>
 8005036:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800503a:	6022      	str	r2, [r4, #0]
 800503c:	9702      	str	r7, [sp, #8]
 800503e:	e7ab      	b.n	8004f98 <_scanf_float+0x198>
 8005040:	6822      	ldr	r2, [r4, #0]
 8005042:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005046:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800504a:	d005      	beq.n	8005058 <_scanf_float+0x258>
 800504c:	0550      	lsls	r0, r2, #21
 800504e:	f57f af0b 	bpl.w	8004e68 <_scanf_float+0x68>
 8005052:	2f00      	cmp	r7, #0
 8005054:	f000 80d7 	beq.w	8005206 <_scanf_float+0x406>
 8005058:	0591      	lsls	r1, r2, #22
 800505a:	bf58      	it	pl
 800505c:	9902      	ldrpl	r1, [sp, #8]
 800505e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005062:	bf58      	it	pl
 8005064:	1a79      	subpl	r1, r7, r1
 8005066:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800506a:	f04f 0700 	mov.w	r7, #0
 800506e:	bf58      	it	pl
 8005070:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005074:	6022      	str	r2, [r4, #0]
 8005076:	e78f      	b.n	8004f98 <_scanf_float+0x198>
 8005078:	f04f 0a03 	mov.w	sl, #3
 800507c:	e78c      	b.n	8004f98 <_scanf_float+0x198>
 800507e:	4649      	mov	r1, r9
 8005080:	4640      	mov	r0, r8
 8005082:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005086:	4798      	blx	r3
 8005088:	2800      	cmp	r0, #0
 800508a:	f43f aedf 	beq.w	8004e4c <_scanf_float+0x4c>
 800508e:	e6eb      	b.n	8004e68 <_scanf_float+0x68>
 8005090:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005094:	464a      	mov	r2, r9
 8005096:	4640      	mov	r0, r8
 8005098:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800509c:	4798      	blx	r3
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	e6eb      	b.n	8004e7e <_scanf_float+0x7e>
 80050a6:	1e6b      	subs	r3, r5, #1
 80050a8:	2b06      	cmp	r3, #6
 80050aa:	d824      	bhi.n	80050f6 <_scanf_float+0x2f6>
 80050ac:	2d02      	cmp	r5, #2
 80050ae:	d836      	bhi.n	800511e <_scanf_float+0x31e>
 80050b0:	9b01      	ldr	r3, [sp, #4]
 80050b2:	429e      	cmp	r6, r3
 80050b4:	f67f aee7 	bls.w	8004e86 <_scanf_float+0x86>
 80050b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050bc:	464a      	mov	r2, r9
 80050be:	4640      	mov	r0, r8
 80050c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80050c4:	4798      	blx	r3
 80050c6:	6923      	ldr	r3, [r4, #16]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	6123      	str	r3, [r4, #16]
 80050cc:	e7f0      	b.n	80050b0 <_scanf_float+0x2b0>
 80050ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050d2:	464a      	mov	r2, r9
 80050d4:	4640      	mov	r0, r8
 80050d6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80050da:	4798      	blx	r3
 80050dc:	6923      	ldr	r3, [r4, #16]
 80050de:	3b01      	subs	r3, #1
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050e6:	fa5f fa8a 	uxtb.w	sl, sl
 80050ea:	f1ba 0f02 	cmp.w	sl, #2
 80050ee:	d1ee      	bne.n	80050ce <_scanf_float+0x2ce>
 80050f0:	3d03      	subs	r5, #3
 80050f2:	b2ed      	uxtb	r5, r5
 80050f4:	1b76      	subs	r6, r6, r5
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	05da      	lsls	r2, r3, #23
 80050fa:	d530      	bpl.n	800515e <_scanf_float+0x35e>
 80050fc:	055b      	lsls	r3, r3, #21
 80050fe:	d511      	bpl.n	8005124 <_scanf_float+0x324>
 8005100:	9b01      	ldr	r3, [sp, #4]
 8005102:	429e      	cmp	r6, r3
 8005104:	f67f aebf 	bls.w	8004e86 <_scanf_float+0x86>
 8005108:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800510c:	464a      	mov	r2, r9
 800510e:	4640      	mov	r0, r8
 8005110:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005114:	4798      	blx	r3
 8005116:	6923      	ldr	r3, [r4, #16]
 8005118:	3b01      	subs	r3, #1
 800511a:	6123      	str	r3, [r4, #16]
 800511c:	e7f0      	b.n	8005100 <_scanf_float+0x300>
 800511e:	46aa      	mov	sl, r5
 8005120:	46b3      	mov	fp, r6
 8005122:	e7de      	b.n	80050e2 <_scanf_float+0x2e2>
 8005124:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	2965      	cmp	r1, #101	@ 0x65
 800512c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005130:	f106 35ff 	add.w	r5, r6, #4294967295
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	d00c      	beq.n	8005152 <_scanf_float+0x352>
 8005138:	2945      	cmp	r1, #69	@ 0x45
 800513a:	d00a      	beq.n	8005152 <_scanf_float+0x352>
 800513c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005140:	464a      	mov	r2, r9
 8005142:	4640      	mov	r0, r8
 8005144:	4798      	blx	r3
 8005146:	6923      	ldr	r3, [r4, #16]
 8005148:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800514c:	3b01      	subs	r3, #1
 800514e:	1eb5      	subs	r5, r6, #2
 8005150:	6123      	str	r3, [r4, #16]
 8005152:	464a      	mov	r2, r9
 8005154:	4640      	mov	r0, r8
 8005156:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800515a:	4798      	blx	r3
 800515c:	462e      	mov	r6, r5
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	f012 0210 	ands.w	r2, r2, #16
 8005164:	d001      	beq.n	800516a <_scanf_float+0x36a>
 8005166:	2000      	movs	r0, #0
 8005168:	e68e      	b.n	8004e88 <_scanf_float+0x88>
 800516a:	7032      	strb	r2, [r6, #0]
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005176:	d125      	bne.n	80051c4 <_scanf_float+0x3c4>
 8005178:	9b02      	ldr	r3, [sp, #8]
 800517a:	429f      	cmp	r7, r3
 800517c:	d00a      	beq.n	8005194 <_scanf_float+0x394>
 800517e:	1bda      	subs	r2, r3, r7
 8005180:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005184:	429e      	cmp	r6, r3
 8005186:	bf28      	it	cs
 8005188:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800518c:	4630      	mov	r0, r6
 800518e:	491f      	ldr	r1, [pc, #124]	@ (800520c <_scanf_float+0x40c>)
 8005190:	f000 f902 	bl	8005398 <siprintf>
 8005194:	2200      	movs	r2, #0
 8005196:	4640      	mov	r0, r8
 8005198:	9901      	ldr	r1, [sp, #4]
 800519a:	f002 fbe9 	bl	8007970 <_strtod_r>
 800519e:	9b03      	ldr	r3, [sp, #12]
 80051a0:	6825      	ldr	r5, [r4, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f015 0f02 	tst.w	r5, #2
 80051a8:	4606      	mov	r6, r0
 80051aa:	460f      	mov	r7, r1
 80051ac:	f103 0204 	add.w	r2, r3, #4
 80051b0:	d015      	beq.n	80051de <_scanf_float+0x3de>
 80051b2:	9903      	ldr	r1, [sp, #12]
 80051b4:	600a      	str	r2, [r1, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	e9c3 6700 	strd	r6, r7, [r3]
 80051bc:	68e3      	ldr	r3, [r4, #12]
 80051be:	3301      	adds	r3, #1
 80051c0:	60e3      	str	r3, [r4, #12]
 80051c2:	e7d0      	b.n	8005166 <_scanf_float+0x366>
 80051c4:	9b04      	ldr	r3, [sp, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0e4      	beq.n	8005194 <_scanf_float+0x394>
 80051ca:	9905      	ldr	r1, [sp, #20]
 80051cc:	230a      	movs	r3, #10
 80051ce:	4640      	mov	r0, r8
 80051d0:	3101      	adds	r1, #1
 80051d2:	f002 fc4d 	bl	8007a70 <_strtol_r>
 80051d6:	9b04      	ldr	r3, [sp, #16]
 80051d8:	9e05      	ldr	r6, [sp, #20]
 80051da:	1ac2      	subs	r2, r0, r3
 80051dc:	e7d0      	b.n	8005180 <_scanf_float+0x380>
 80051de:	076d      	lsls	r5, r5, #29
 80051e0:	d4e7      	bmi.n	80051b2 <_scanf_float+0x3b2>
 80051e2:	9d03      	ldr	r5, [sp, #12]
 80051e4:	602a      	str	r2, [r5, #0]
 80051e6:	681d      	ldr	r5, [r3, #0]
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	f7fb fc0e 	bl	8000a0c <__aeabi_dcmpun>
 80051f0:	b120      	cbz	r0, 80051fc <_scanf_float+0x3fc>
 80051f2:	4807      	ldr	r0, [pc, #28]	@ (8005210 <_scanf_float+0x410>)
 80051f4:	f000 f9c4 	bl	8005580 <nanf>
 80051f8:	6028      	str	r0, [r5, #0]
 80051fa:	e7df      	b.n	80051bc <_scanf_float+0x3bc>
 80051fc:	4630      	mov	r0, r6
 80051fe:	4639      	mov	r1, r7
 8005200:	f7fb fc62 	bl	8000ac8 <__aeabi_d2f>
 8005204:	e7f8      	b.n	80051f8 <_scanf_float+0x3f8>
 8005206:	2700      	movs	r7, #0
 8005208:	e633      	b.n	8004e72 <_scanf_float+0x72>
 800520a:	bf00      	nop
 800520c:	08008d10 	.word	0x08008d10
 8005210:	08008e51 	.word	0x08008e51

08005214 <std>:
 8005214:	2300      	movs	r3, #0
 8005216:	b510      	push	{r4, lr}
 8005218:	4604      	mov	r4, r0
 800521a:	e9c0 3300 	strd	r3, r3, [r0]
 800521e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005222:	6083      	str	r3, [r0, #8]
 8005224:	8181      	strh	r1, [r0, #12]
 8005226:	6643      	str	r3, [r0, #100]	@ 0x64
 8005228:	81c2      	strh	r2, [r0, #14]
 800522a:	6183      	str	r3, [r0, #24]
 800522c:	4619      	mov	r1, r3
 800522e:	2208      	movs	r2, #8
 8005230:	305c      	adds	r0, #92	@ 0x5c
 8005232:	f000 f916 	bl	8005462 <memset>
 8005236:	4b0d      	ldr	r3, [pc, #52]	@ (800526c <std+0x58>)
 8005238:	6224      	str	r4, [r4, #32]
 800523a:	6263      	str	r3, [r4, #36]	@ 0x24
 800523c:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <std+0x5c>)
 800523e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005240:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <std+0x60>)
 8005242:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <std+0x64>)
 8005246:	6323      	str	r3, [r4, #48]	@ 0x30
 8005248:	4b0c      	ldr	r3, [pc, #48]	@ (800527c <std+0x68>)
 800524a:	429c      	cmp	r4, r3
 800524c:	d006      	beq.n	800525c <std+0x48>
 800524e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005252:	4294      	cmp	r4, r2
 8005254:	d002      	beq.n	800525c <std+0x48>
 8005256:	33d0      	adds	r3, #208	@ 0xd0
 8005258:	429c      	cmp	r4, r3
 800525a:	d105      	bne.n	8005268 <std+0x54>
 800525c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005264:	f000 b97a 	b.w	800555c <__retarget_lock_init_recursive>
 8005268:	bd10      	pop	{r4, pc}
 800526a:	bf00      	nop
 800526c:	080053dd 	.word	0x080053dd
 8005270:	080053ff 	.word	0x080053ff
 8005274:	08005437 	.word	0x08005437
 8005278:	0800545b 	.word	0x0800545b
 800527c:	20000274 	.word	0x20000274

08005280 <stdio_exit_handler>:
 8005280:	4a02      	ldr	r2, [pc, #8]	@ (800528c <stdio_exit_handler+0xc>)
 8005282:	4903      	ldr	r1, [pc, #12]	@ (8005290 <stdio_exit_handler+0x10>)
 8005284:	4803      	ldr	r0, [pc, #12]	@ (8005294 <stdio_exit_handler+0x14>)
 8005286:	f000 b869 	b.w	800535c <_fwalk_sglue>
 800528a:	bf00      	nop
 800528c:	2000000c 	.word	0x2000000c
 8005290:	08007e25 	.word	0x08007e25
 8005294:	2000001c 	.word	0x2000001c

08005298 <cleanup_stdio>:
 8005298:	6841      	ldr	r1, [r0, #4]
 800529a:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <cleanup_stdio+0x34>)
 800529c:	b510      	push	{r4, lr}
 800529e:	4299      	cmp	r1, r3
 80052a0:	4604      	mov	r4, r0
 80052a2:	d001      	beq.n	80052a8 <cleanup_stdio+0x10>
 80052a4:	f002 fdbe 	bl	8007e24 <_fflush_r>
 80052a8:	68a1      	ldr	r1, [r4, #8]
 80052aa:	4b09      	ldr	r3, [pc, #36]	@ (80052d0 <cleanup_stdio+0x38>)
 80052ac:	4299      	cmp	r1, r3
 80052ae:	d002      	beq.n	80052b6 <cleanup_stdio+0x1e>
 80052b0:	4620      	mov	r0, r4
 80052b2:	f002 fdb7 	bl	8007e24 <_fflush_r>
 80052b6:	68e1      	ldr	r1, [r4, #12]
 80052b8:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <cleanup_stdio+0x3c>)
 80052ba:	4299      	cmp	r1, r3
 80052bc:	d004      	beq.n	80052c8 <cleanup_stdio+0x30>
 80052be:	4620      	mov	r0, r4
 80052c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c4:	f002 bdae 	b.w	8007e24 <_fflush_r>
 80052c8:	bd10      	pop	{r4, pc}
 80052ca:	bf00      	nop
 80052cc:	20000274 	.word	0x20000274
 80052d0:	200002dc 	.word	0x200002dc
 80052d4:	20000344 	.word	0x20000344

080052d8 <global_stdio_init.part.0>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <global_stdio_init.part.0+0x30>)
 80052dc:	4c0b      	ldr	r4, [pc, #44]	@ (800530c <global_stdio_init.part.0+0x34>)
 80052de:	4a0c      	ldr	r2, [pc, #48]	@ (8005310 <global_stdio_init.part.0+0x38>)
 80052e0:	4620      	mov	r0, r4
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	2104      	movs	r1, #4
 80052e6:	2200      	movs	r2, #0
 80052e8:	f7ff ff94 	bl	8005214 <std>
 80052ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052f0:	2201      	movs	r2, #1
 80052f2:	2109      	movs	r1, #9
 80052f4:	f7ff ff8e 	bl	8005214 <std>
 80052f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052fc:	2202      	movs	r2, #2
 80052fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005302:	2112      	movs	r1, #18
 8005304:	f7ff bf86 	b.w	8005214 <std>
 8005308:	200003ac 	.word	0x200003ac
 800530c:	20000274 	.word	0x20000274
 8005310:	08005281 	.word	0x08005281

08005314 <__sfp_lock_acquire>:
 8005314:	4801      	ldr	r0, [pc, #4]	@ (800531c <__sfp_lock_acquire+0x8>)
 8005316:	f000 b922 	b.w	800555e <__retarget_lock_acquire_recursive>
 800531a:	bf00      	nop
 800531c:	200003b5 	.word	0x200003b5

08005320 <__sfp_lock_release>:
 8005320:	4801      	ldr	r0, [pc, #4]	@ (8005328 <__sfp_lock_release+0x8>)
 8005322:	f000 b91d 	b.w	8005560 <__retarget_lock_release_recursive>
 8005326:	bf00      	nop
 8005328:	200003b5 	.word	0x200003b5

0800532c <__sinit>:
 800532c:	b510      	push	{r4, lr}
 800532e:	4604      	mov	r4, r0
 8005330:	f7ff fff0 	bl	8005314 <__sfp_lock_acquire>
 8005334:	6a23      	ldr	r3, [r4, #32]
 8005336:	b11b      	cbz	r3, 8005340 <__sinit+0x14>
 8005338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533c:	f7ff bff0 	b.w	8005320 <__sfp_lock_release>
 8005340:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <__sinit+0x28>)
 8005342:	6223      	str	r3, [r4, #32]
 8005344:	4b04      	ldr	r3, [pc, #16]	@ (8005358 <__sinit+0x2c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f5      	bne.n	8005338 <__sinit+0xc>
 800534c:	f7ff ffc4 	bl	80052d8 <global_stdio_init.part.0>
 8005350:	e7f2      	b.n	8005338 <__sinit+0xc>
 8005352:	bf00      	nop
 8005354:	08005299 	.word	0x08005299
 8005358:	200003ac 	.word	0x200003ac

0800535c <_fwalk_sglue>:
 800535c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005360:	4607      	mov	r7, r0
 8005362:	4688      	mov	r8, r1
 8005364:	4614      	mov	r4, r2
 8005366:	2600      	movs	r6, #0
 8005368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800536c:	f1b9 0901 	subs.w	r9, r9, #1
 8005370:	d505      	bpl.n	800537e <_fwalk_sglue+0x22>
 8005372:	6824      	ldr	r4, [r4, #0]
 8005374:	2c00      	cmp	r4, #0
 8005376:	d1f7      	bne.n	8005368 <_fwalk_sglue+0xc>
 8005378:	4630      	mov	r0, r6
 800537a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800537e:	89ab      	ldrh	r3, [r5, #12]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d907      	bls.n	8005394 <_fwalk_sglue+0x38>
 8005384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005388:	3301      	adds	r3, #1
 800538a:	d003      	beq.n	8005394 <_fwalk_sglue+0x38>
 800538c:	4629      	mov	r1, r5
 800538e:	4638      	mov	r0, r7
 8005390:	47c0      	blx	r8
 8005392:	4306      	orrs	r6, r0
 8005394:	3568      	adds	r5, #104	@ 0x68
 8005396:	e7e9      	b.n	800536c <_fwalk_sglue+0x10>

08005398 <siprintf>:
 8005398:	b40e      	push	{r1, r2, r3}
 800539a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800539e:	b510      	push	{r4, lr}
 80053a0:	2400      	movs	r4, #0
 80053a2:	b09d      	sub	sp, #116	@ 0x74
 80053a4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80053a6:	9002      	str	r0, [sp, #8]
 80053a8:	9006      	str	r0, [sp, #24]
 80053aa:	9107      	str	r1, [sp, #28]
 80053ac:	9104      	str	r1, [sp, #16]
 80053ae:	4809      	ldr	r0, [pc, #36]	@ (80053d4 <siprintf+0x3c>)
 80053b0:	4909      	ldr	r1, [pc, #36]	@ (80053d8 <siprintf+0x40>)
 80053b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80053b6:	9105      	str	r1, [sp, #20]
 80053b8:	6800      	ldr	r0, [r0, #0]
 80053ba:	a902      	add	r1, sp, #8
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80053c0:	f002 fbb4 	bl	8007b2c <_svfiprintf_r>
 80053c4:	9b02      	ldr	r3, [sp, #8]
 80053c6:	701c      	strb	r4, [r3, #0]
 80053c8:	b01d      	add	sp, #116	@ 0x74
 80053ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ce:	b003      	add	sp, #12
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000018 	.word	0x20000018
 80053d8:	ffff0208 	.word	0xffff0208

080053dc <__sread>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	460c      	mov	r4, r1
 80053e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e4:	f000 f86c 	bl	80054c0 <_read_r>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	bfab      	itete	ge
 80053ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053ee:	89a3      	ldrhlt	r3, [r4, #12]
 80053f0:	181b      	addge	r3, r3, r0
 80053f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053f6:	bfac      	ite	ge
 80053f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053fa:	81a3      	strhlt	r3, [r4, #12]
 80053fc:	bd10      	pop	{r4, pc}

080053fe <__swrite>:
 80053fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005402:	461f      	mov	r7, r3
 8005404:	898b      	ldrh	r3, [r1, #12]
 8005406:	4605      	mov	r5, r0
 8005408:	05db      	lsls	r3, r3, #23
 800540a:	460c      	mov	r4, r1
 800540c:	4616      	mov	r6, r2
 800540e:	d505      	bpl.n	800541c <__swrite+0x1e>
 8005410:	2302      	movs	r3, #2
 8005412:	2200      	movs	r2, #0
 8005414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005418:	f000 f840 	bl	800549c <_lseek_r>
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	4632      	mov	r2, r6
 8005420:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005424:	81a3      	strh	r3, [r4, #12]
 8005426:	4628      	mov	r0, r5
 8005428:	463b      	mov	r3, r7
 800542a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005432:	f000 b857 	b.w	80054e4 <_write_r>

08005436 <__sseek>:
 8005436:	b510      	push	{r4, lr}
 8005438:	460c      	mov	r4, r1
 800543a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543e:	f000 f82d 	bl	800549c <_lseek_r>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	bf15      	itete	ne
 8005448:	6560      	strne	r0, [r4, #84]	@ 0x54
 800544a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800544e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005452:	81a3      	strheq	r3, [r4, #12]
 8005454:	bf18      	it	ne
 8005456:	81a3      	strhne	r3, [r4, #12]
 8005458:	bd10      	pop	{r4, pc}

0800545a <__sclose>:
 800545a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545e:	f000 b80d 	b.w	800547c <_close_r>

08005462 <memset>:
 8005462:	4603      	mov	r3, r0
 8005464:	4402      	add	r2, r0
 8005466:	4293      	cmp	r3, r2
 8005468:	d100      	bne.n	800546c <memset+0xa>
 800546a:	4770      	bx	lr
 800546c:	f803 1b01 	strb.w	r1, [r3], #1
 8005470:	e7f9      	b.n	8005466 <memset+0x4>
	...

08005474 <_localeconv_r>:
 8005474:	4800      	ldr	r0, [pc, #0]	@ (8005478 <_localeconv_r+0x4>)
 8005476:	4770      	bx	lr
 8005478:	20000158 	.word	0x20000158

0800547c <_close_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	2300      	movs	r3, #0
 8005480:	4d05      	ldr	r5, [pc, #20]	@ (8005498 <_close_r+0x1c>)
 8005482:	4604      	mov	r4, r0
 8005484:	4608      	mov	r0, r1
 8005486:	602b      	str	r3, [r5, #0]
 8005488:	f7fc f81b 	bl	80014c2 <_close>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_close_r+0x1a>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_close_r+0x1a>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	200003b0 	.word	0x200003b0

0800549c <_lseek_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4604      	mov	r4, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	2200      	movs	r2, #0
 80054a6:	4d05      	ldr	r5, [pc, #20]	@ (80054bc <_lseek_r+0x20>)
 80054a8:	602a      	str	r2, [r5, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f7fc f82d 	bl	800150a <_lseek>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_lseek_r+0x1e>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_lseek_r+0x1e>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	200003b0 	.word	0x200003b0

080054c0 <_read_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4604      	mov	r4, r0
 80054c4:	4608      	mov	r0, r1
 80054c6:	4611      	mov	r1, r2
 80054c8:	2200      	movs	r2, #0
 80054ca:	4d05      	ldr	r5, [pc, #20]	@ (80054e0 <_read_r+0x20>)
 80054cc:	602a      	str	r2, [r5, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	f7fb ffbe 	bl	8001450 <_read>
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	d102      	bne.n	80054de <_read_r+0x1e>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	b103      	cbz	r3, 80054de <_read_r+0x1e>
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	bd38      	pop	{r3, r4, r5, pc}
 80054e0:	200003b0 	.word	0x200003b0

080054e4 <_write_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	2200      	movs	r2, #0
 80054ee:	4d05      	ldr	r5, [pc, #20]	@ (8005504 <_write_r+0x20>)
 80054f0:	602a      	str	r2, [r5, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	f7fb ffc9 	bl	800148a <_write>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d102      	bne.n	8005502 <_write_r+0x1e>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	b103      	cbz	r3, 8005502 <_write_r+0x1e>
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	200003b0 	.word	0x200003b0

08005508 <__errno>:
 8005508:	4b01      	ldr	r3, [pc, #4]	@ (8005510 <__errno+0x8>)
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000018 	.word	0x20000018

08005514 <__libc_init_array>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	2600      	movs	r6, #0
 8005518:	4d0c      	ldr	r5, [pc, #48]	@ (800554c <__libc_init_array+0x38>)
 800551a:	4c0d      	ldr	r4, [pc, #52]	@ (8005550 <__libc_init_array+0x3c>)
 800551c:	1b64      	subs	r4, r4, r5
 800551e:	10a4      	asrs	r4, r4, #2
 8005520:	42a6      	cmp	r6, r4
 8005522:	d109      	bne.n	8005538 <__libc_init_array+0x24>
 8005524:	f003 fb6a 	bl	8008bfc <_init>
 8005528:	2600      	movs	r6, #0
 800552a:	4d0a      	ldr	r5, [pc, #40]	@ (8005554 <__libc_init_array+0x40>)
 800552c:	4c0a      	ldr	r4, [pc, #40]	@ (8005558 <__libc_init_array+0x44>)
 800552e:	1b64      	subs	r4, r4, r5
 8005530:	10a4      	asrs	r4, r4, #2
 8005532:	42a6      	cmp	r6, r4
 8005534:	d105      	bne.n	8005542 <__libc_init_array+0x2e>
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	f855 3b04 	ldr.w	r3, [r5], #4
 800553c:	4798      	blx	r3
 800553e:	3601      	adds	r6, #1
 8005540:	e7ee      	b.n	8005520 <__libc_init_array+0xc>
 8005542:	f855 3b04 	ldr.w	r3, [r5], #4
 8005546:	4798      	blx	r3
 8005548:	3601      	adds	r6, #1
 800554a:	e7f2      	b.n	8005532 <__libc_init_array+0x1e>
 800554c:	0800910c 	.word	0x0800910c
 8005550:	0800910c 	.word	0x0800910c
 8005554:	0800910c 	.word	0x0800910c
 8005558:	08009110 	.word	0x08009110

0800555c <__retarget_lock_init_recursive>:
 800555c:	4770      	bx	lr

0800555e <__retarget_lock_acquire_recursive>:
 800555e:	4770      	bx	lr

08005560 <__retarget_lock_release_recursive>:
 8005560:	4770      	bx	lr

08005562 <memchr>:
 8005562:	4603      	mov	r3, r0
 8005564:	b510      	push	{r4, lr}
 8005566:	b2c9      	uxtb	r1, r1
 8005568:	4402      	add	r2, r0
 800556a:	4293      	cmp	r3, r2
 800556c:	4618      	mov	r0, r3
 800556e:	d101      	bne.n	8005574 <memchr+0x12>
 8005570:	2000      	movs	r0, #0
 8005572:	e003      	b.n	800557c <memchr+0x1a>
 8005574:	7804      	ldrb	r4, [r0, #0]
 8005576:	3301      	adds	r3, #1
 8005578:	428c      	cmp	r4, r1
 800557a:	d1f6      	bne.n	800556a <memchr+0x8>
 800557c:	bd10      	pop	{r4, pc}
	...

08005580 <nanf>:
 8005580:	4800      	ldr	r0, [pc, #0]	@ (8005584 <nanf+0x4>)
 8005582:	4770      	bx	lr
 8005584:	7fc00000 	.word	0x7fc00000

08005588 <quorem>:
 8005588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	6903      	ldr	r3, [r0, #16]
 800558e:	690c      	ldr	r4, [r1, #16]
 8005590:	4607      	mov	r7, r0
 8005592:	42a3      	cmp	r3, r4
 8005594:	db7e      	blt.n	8005694 <quorem+0x10c>
 8005596:	3c01      	subs	r4, #1
 8005598:	00a3      	lsls	r3, r4, #2
 800559a:	f100 0514 	add.w	r5, r0, #20
 800559e:	f101 0814 	add.w	r8, r1, #20
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055b2:	3301      	adds	r3, #1
 80055b4:	429a      	cmp	r2, r3
 80055b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80055ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055be:	d32e      	bcc.n	800561e <quorem+0x96>
 80055c0:	f04f 0a00 	mov.w	sl, #0
 80055c4:	46c4      	mov	ip, r8
 80055c6:	46ae      	mov	lr, r5
 80055c8:	46d3      	mov	fp, sl
 80055ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055ce:	b298      	uxth	r0, r3
 80055d0:	fb06 a000 	mla	r0, r6, r0, sl
 80055d4:	0c1b      	lsrs	r3, r3, #16
 80055d6:	0c02      	lsrs	r2, r0, #16
 80055d8:	fb06 2303 	mla	r3, r6, r3, r2
 80055dc:	f8de 2000 	ldr.w	r2, [lr]
 80055e0:	b280      	uxth	r0, r0
 80055e2:	b292      	uxth	r2, r2
 80055e4:	1a12      	subs	r2, r2, r0
 80055e6:	445a      	add	r2, fp
 80055e8:	f8de 0000 	ldr.w	r0, [lr]
 80055ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055fa:	b292      	uxth	r2, r2
 80055fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005600:	45e1      	cmp	r9, ip
 8005602:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005606:	f84e 2b04 	str.w	r2, [lr], #4
 800560a:	d2de      	bcs.n	80055ca <quorem+0x42>
 800560c:	9b00      	ldr	r3, [sp, #0]
 800560e:	58eb      	ldr	r3, [r5, r3]
 8005610:	b92b      	cbnz	r3, 800561e <quorem+0x96>
 8005612:	9b01      	ldr	r3, [sp, #4]
 8005614:	3b04      	subs	r3, #4
 8005616:	429d      	cmp	r5, r3
 8005618:	461a      	mov	r2, r3
 800561a:	d32f      	bcc.n	800567c <quorem+0xf4>
 800561c:	613c      	str	r4, [r7, #16]
 800561e:	4638      	mov	r0, r7
 8005620:	f001 f9c8 	bl	80069b4 <__mcmp>
 8005624:	2800      	cmp	r0, #0
 8005626:	db25      	blt.n	8005674 <quorem+0xec>
 8005628:	4629      	mov	r1, r5
 800562a:	2000      	movs	r0, #0
 800562c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005630:	f8d1 c000 	ldr.w	ip, [r1]
 8005634:	fa1f fe82 	uxth.w	lr, r2
 8005638:	fa1f f38c 	uxth.w	r3, ip
 800563c:	eba3 030e 	sub.w	r3, r3, lr
 8005640:	4403      	add	r3, r0
 8005642:	0c12      	lsrs	r2, r2, #16
 8005644:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005648:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800564c:	b29b      	uxth	r3, r3
 800564e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005652:	45c1      	cmp	r9, r8
 8005654:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005658:	f841 3b04 	str.w	r3, [r1], #4
 800565c:	d2e6      	bcs.n	800562c <quorem+0xa4>
 800565e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005662:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005666:	b922      	cbnz	r2, 8005672 <quorem+0xea>
 8005668:	3b04      	subs	r3, #4
 800566a:	429d      	cmp	r5, r3
 800566c:	461a      	mov	r2, r3
 800566e:	d30b      	bcc.n	8005688 <quorem+0x100>
 8005670:	613c      	str	r4, [r7, #16]
 8005672:	3601      	adds	r6, #1
 8005674:	4630      	mov	r0, r6
 8005676:	b003      	add	sp, #12
 8005678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	3b04      	subs	r3, #4
 8005680:	2a00      	cmp	r2, #0
 8005682:	d1cb      	bne.n	800561c <quorem+0x94>
 8005684:	3c01      	subs	r4, #1
 8005686:	e7c6      	b.n	8005616 <quorem+0x8e>
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	3b04      	subs	r3, #4
 800568c:	2a00      	cmp	r2, #0
 800568e:	d1ef      	bne.n	8005670 <quorem+0xe8>
 8005690:	3c01      	subs	r4, #1
 8005692:	e7ea      	b.n	800566a <quorem+0xe2>
 8005694:	2000      	movs	r0, #0
 8005696:	e7ee      	b.n	8005676 <quorem+0xee>

08005698 <_dtoa_r>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	4614      	mov	r4, r2
 800569e:	461d      	mov	r5, r3
 80056a0:	69c7      	ldr	r7, [r0, #28]
 80056a2:	b097      	sub	sp, #92	@ 0x5c
 80056a4:	4681      	mov	r9, r0
 80056a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80056aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80056ac:	b97f      	cbnz	r7, 80056ce <_dtoa_r+0x36>
 80056ae:	2010      	movs	r0, #16
 80056b0:	f000 fe0e 	bl	80062d0 <malloc>
 80056b4:	4602      	mov	r2, r0
 80056b6:	f8c9 001c 	str.w	r0, [r9, #28]
 80056ba:	b920      	cbnz	r0, 80056c6 <_dtoa_r+0x2e>
 80056bc:	21ef      	movs	r1, #239	@ 0xef
 80056be:	4bac      	ldr	r3, [pc, #688]	@ (8005970 <_dtoa_r+0x2d8>)
 80056c0:	48ac      	ldr	r0, [pc, #688]	@ (8005974 <_dtoa_r+0x2dc>)
 80056c2:	f002 fc27 	bl	8007f14 <__assert_func>
 80056c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056ca:	6007      	str	r7, [r0, #0]
 80056cc:	60c7      	str	r7, [r0, #12]
 80056ce:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	b159      	cbz	r1, 80056ee <_dtoa_r+0x56>
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	2301      	movs	r3, #1
 80056da:	4093      	lsls	r3, r2
 80056dc:	604a      	str	r2, [r1, #4]
 80056de:	608b      	str	r3, [r1, #8]
 80056e0:	4648      	mov	r0, r9
 80056e2:	f000 feeb 	bl	80064bc <_Bfree>
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	1e2b      	subs	r3, r5, #0
 80056f0:	bfaf      	iteee	ge
 80056f2:	2300      	movge	r3, #0
 80056f4:	2201      	movlt	r2, #1
 80056f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056fa:	9307      	strlt	r3, [sp, #28]
 80056fc:	bfa8      	it	ge
 80056fe:	6033      	strge	r3, [r6, #0]
 8005700:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005704:	4b9c      	ldr	r3, [pc, #624]	@ (8005978 <_dtoa_r+0x2e0>)
 8005706:	bfb8      	it	lt
 8005708:	6032      	strlt	r2, [r6, #0]
 800570a:	ea33 0308 	bics.w	r3, r3, r8
 800570e:	d112      	bne.n	8005736 <_dtoa_r+0x9e>
 8005710:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005714:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800571c:	4323      	orrs	r3, r4
 800571e:	f000 855e 	beq.w	80061de <_dtoa_r+0xb46>
 8005722:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005724:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800597c <_dtoa_r+0x2e4>
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8560 	beq.w	80061ee <_dtoa_r+0xb56>
 800572e:	f10a 0303 	add.w	r3, sl, #3
 8005732:	f000 bd5a 	b.w	80061ea <_dtoa_r+0xb52>
 8005736:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800573a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800573e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005742:	2200      	movs	r2, #0
 8005744:	2300      	movs	r3, #0
 8005746:	f7fb f92f 	bl	80009a8 <__aeabi_dcmpeq>
 800574a:	4607      	mov	r7, r0
 800574c:	b158      	cbz	r0, 8005766 <_dtoa_r+0xce>
 800574e:	2301      	movs	r3, #1
 8005750:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005756:	b113      	cbz	r3, 800575e <_dtoa_r+0xc6>
 8005758:	4b89      	ldr	r3, [pc, #548]	@ (8005980 <_dtoa_r+0x2e8>)
 800575a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005984 <_dtoa_r+0x2ec>
 8005762:	f000 bd44 	b.w	80061ee <_dtoa_r+0xb56>
 8005766:	ab14      	add	r3, sp, #80	@ 0x50
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	ab15      	add	r3, sp, #84	@ 0x54
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	4648      	mov	r0, r9
 8005770:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005774:	f001 fa36 	bl	8006be4 <__d2b>
 8005778:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800577c:	9003      	str	r0, [sp, #12]
 800577e:	2e00      	cmp	r6, #0
 8005780:	d078      	beq.n	8005874 <_dtoa_r+0x1dc>
 8005782:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005788:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800578c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005790:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005794:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005798:	9712      	str	r7, [sp, #72]	@ 0x48
 800579a:	4619      	mov	r1, r3
 800579c:	2200      	movs	r2, #0
 800579e:	4b7a      	ldr	r3, [pc, #488]	@ (8005988 <_dtoa_r+0x2f0>)
 80057a0:	f7fa fce2 	bl	8000168 <__aeabi_dsub>
 80057a4:	a36c      	add	r3, pc, #432	@ (adr r3, 8005958 <_dtoa_r+0x2c0>)
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f7fa fe95 	bl	80004d8 <__aeabi_dmul>
 80057ae:	a36c      	add	r3, pc, #432	@ (adr r3, 8005960 <_dtoa_r+0x2c8>)
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f7fa fcda 	bl	800016c <__adddf3>
 80057b8:	4604      	mov	r4, r0
 80057ba:	4630      	mov	r0, r6
 80057bc:	460d      	mov	r5, r1
 80057be:	f7fa fe21 	bl	8000404 <__aeabi_i2d>
 80057c2:	a369      	add	r3, pc, #420	@ (adr r3, 8005968 <_dtoa_r+0x2d0>)
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f7fa fe86 	bl	80004d8 <__aeabi_dmul>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4620      	mov	r0, r4
 80057d2:	4629      	mov	r1, r5
 80057d4:	f7fa fcca 	bl	800016c <__adddf3>
 80057d8:	4604      	mov	r4, r0
 80057da:	460d      	mov	r5, r1
 80057dc:	f7fb f92c 	bl	8000a38 <__aeabi_d2iz>
 80057e0:	2200      	movs	r2, #0
 80057e2:	4607      	mov	r7, r0
 80057e4:	2300      	movs	r3, #0
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fb f8e7 	bl	80009bc <__aeabi_dcmplt>
 80057ee:	b140      	cbz	r0, 8005802 <_dtoa_r+0x16a>
 80057f0:	4638      	mov	r0, r7
 80057f2:	f7fa fe07 	bl	8000404 <__aeabi_i2d>
 80057f6:	4622      	mov	r2, r4
 80057f8:	462b      	mov	r3, r5
 80057fa:	f7fb f8d5 	bl	80009a8 <__aeabi_dcmpeq>
 80057fe:	b900      	cbnz	r0, 8005802 <_dtoa_r+0x16a>
 8005800:	3f01      	subs	r7, #1
 8005802:	2f16      	cmp	r7, #22
 8005804:	d854      	bhi.n	80058b0 <_dtoa_r+0x218>
 8005806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800580a:	4b60      	ldr	r3, [pc, #384]	@ (800598c <_dtoa_r+0x2f4>)
 800580c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	f7fb f8d2 	bl	80009bc <__aeabi_dcmplt>
 8005818:	2800      	cmp	r0, #0
 800581a:	d04b      	beq.n	80058b4 <_dtoa_r+0x21c>
 800581c:	2300      	movs	r3, #0
 800581e:	3f01      	subs	r7, #1
 8005820:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005822:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005824:	1b9b      	subs	r3, r3, r6
 8005826:	1e5a      	subs	r2, r3, #1
 8005828:	bf49      	itett	mi
 800582a:	f1c3 0301 	rsbmi	r3, r3, #1
 800582e:	2300      	movpl	r3, #0
 8005830:	9304      	strmi	r3, [sp, #16]
 8005832:	2300      	movmi	r3, #0
 8005834:	9209      	str	r2, [sp, #36]	@ 0x24
 8005836:	bf54      	ite	pl
 8005838:	9304      	strpl	r3, [sp, #16]
 800583a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800583c:	2f00      	cmp	r7, #0
 800583e:	db3b      	blt.n	80058b8 <_dtoa_r+0x220>
 8005840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005842:	970e      	str	r7, [sp, #56]	@ 0x38
 8005844:	443b      	add	r3, r7
 8005846:	9309      	str	r3, [sp, #36]	@ 0x24
 8005848:	2300      	movs	r3, #0
 800584a:	930a      	str	r3, [sp, #40]	@ 0x28
 800584c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800584e:	2b09      	cmp	r3, #9
 8005850:	d865      	bhi.n	800591e <_dtoa_r+0x286>
 8005852:	2b05      	cmp	r3, #5
 8005854:	bfc4      	itt	gt
 8005856:	3b04      	subgt	r3, #4
 8005858:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800585a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800585c:	bfc8      	it	gt
 800585e:	2400      	movgt	r4, #0
 8005860:	f1a3 0302 	sub.w	r3, r3, #2
 8005864:	bfd8      	it	le
 8005866:	2401      	movle	r4, #1
 8005868:	2b03      	cmp	r3, #3
 800586a:	d864      	bhi.n	8005936 <_dtoa_r+0x29e>
 800586c:	e8df f003 	tbb	[pc, r3]
 8005870:	2c385553 	.word	0x2c385553
 8005874:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005878:	441e      	add	r6, r3
 800587a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800587e:	2b20      	cmp	r3, #32
 8005880:	bfc1      	itttt	gt
 8005882:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005886:	fa08 f803 	lslgt.w	r8, r8, r3
 800588a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800588e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005892:	bfd6      	itet	le
 8005894:	f1c3 0320 	rsble	r3, r3, #32
 8005898:	ea48 0003 	orrgt.w	r0, r8, r3
 800589c:	fa04 f003 	lslle.w	r0, r4, r3
 80058a0:	f7fa fda0 	bl	80003e4 <__aeabi_ui2d>
 80058a4:	2201      	movs	r2, #1
 80058a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058aa:	3e01      	subs	r6, #1
 80058ac:	9212      	str	r2, [sp, #72]	@ 0x48
 80058ae:	e774      	b.n	800579a <_dtoa_r+0x102>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e7b5      	b.n	8005820 <_dtoa_r+0x188>
 80058b4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80058b6:	e7b4      	b.n	8005822 <_dtoa_r+0x18a>
 80058b8:	9b04      	ldr	r3, [sp, #16]
 80058ba:	1bdb      	subs	r3, r3, r7
 80058bc:	9304      	str	r3, [sp, #16]
 80058be:	427b      	negs	r3, r7
 80058c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058c2:	2300      	movs	r3, #0
 80058c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80058c6:	e7c1      	b.n	800584c <_dtoa_r+0x1b4>
 80058c8:	2301      	movs	r3, #1
 80058ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058ce:	eb07 0b03 	add.w	fp, r7, r3
 80058d2:	f10b 0301 	add.w	r3, fp, #1
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	9308      	str	r3, [sp, #32]
 80058da:	bfb8      	it	lt
 80058dc:	2301      	movlt	r3, #1
 80058de:	e006      	b.n	80058ee <_dtoa_r+0x256>
 80058e0:	2301      	movs	r3, #1
 80058e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	dd28      	ble.n	800593c <_dtoa_r+0x2a4>
 80058ea:	469b      	mov	fp, r3
 80058ec:	9308      	str	r3, [sp, #32]
 80058ee:	2100      	movs	r1, #0
 80058f0:	2204      	movs	r2, #4
 80058f2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80058f6:	f102 0514 	add.w	r5, r2, #20
 80058fa:	429d      	cmp	r5, r3
 80058fc:	d926      	bls.n	800594c <_dtoa_r+0x2b4>
 80058fe:	6041      	str	r1, [r0, #4]
 8005900:	4648      	mov	r0, r9
 8005902:	f000 fd9b 	bl	800643c <_Balloc>
 8005906:	4682      	mov	sl, r0
 8005908:	2800      	cmp	r0, #0
 800590a:	d143      	bne.n	8005994 <_dtoa_r+0x2fc>
 800590c:	4602      	mov	r2, r0
 800590e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005912:	4b1f      	ldr	r3, [pc, #124]	@ (8005990 <_dtoa_r+0x2f8>)
 8005914:	e6d4      	b.n	80056c0 <_dtoa_r+0x28>
 8005916:	2300      	movs	r3, #0
 8005918:	e7e3      	b.n	80058e2 <_dtoa_r+0x24a>
 800591a:	2300      	movs	r3, #0
 800591c:	e7d5      	b.n	80058ca <_dtoa_r+0x232>
 800591e:	2401      	movs	r4, #1
 8005920:	2300      	movs	r3, #0
 8005922:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005924:	9320      	str	r3, [sp, #128]	@ 0x80
 8005926:	f04f 3bff 	mov.w	fp, #4294967295
 800592a:	2200      	movs	r2, #0
 800592c:	2312      	movs	r3, #18
 800592e:	f8cd b020 	str.w	fp, [sp, #32]
 8005932:	9221      	str	r2, [sp, #132]	@ 0x84
 8005934:	e7db      	b.n	80058ee <_dtoa_r+0x256>
 8005936:	2301      	movs	r3, #1
 8005938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800593a:	e7f4      	b.n	8005926 <_dtoa_r+0x28e>
 800593c:	f04f 0b01 	mov.w	fp, #1
 8005940:	465b      	mov	r3, fp
 8005942:	f8cd b020 	str.w	fp, [sp, #32]
 8005946:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800594a:	e7d0      	b.n	80058ee <_dtoa_r+0x256>
 800594c:	3101      	adds	r1, #1
 800594e:	0052      	lsls	r2, r2, #1
 8005950:	e7d1      	b.n	80058f6 <_dtoa_r+0x25e>
 8005952:	bf00      	nop
 8005954:	f3af 8000 	nop.w
 8005958:	636f4361 	.word	0x636f4361
 800595c:	3fd287a7 	.word	0x3fd287a7
 8005960:	8b60c8b3 	.word	0x8b60c8b3
 8005964:	3fc68a28 	.word	0x3fc68a28
 8005968:	509f79fb 	.word	0x509f79fb
 800596c:	3fd34413 	.word	0x3fd34413
 8005970:	08008d22 	.word	0x08008d22
 8005974:	08008d39 	.word	0x08008d39
 8005978:	7ff00000 	.word	0x7ff00000
 800597c:	08008d1e 	.word	0x08008d1e
 8005980:	08008ced 	.word	0x08008ced
 8005984:	08008cec 	.word	0x08008cec
 8005988:	3ff80000 	.word	0x3ff80000
 800598c:	08008ee8 	.word	0x08008ee8
 8005990:	08008d91 	.word	0x08008d91
 8005994:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005998:	6018      	str	r0, [r3, #0]
 800599a:	9b08      	ldr	r3, [sp, #32]
 800599c:	2b0e      	cmp	r3, #14
 800599e:	f200 80a1 	bhi.w	8005ae4 <_dtoa_r+0x44c>
 80059a2:	2c00      	cmp	r4, #0
 80059a4:	f000 809e 	beq.w	8005ae4 <_dtoa_r+0x44c>
 80059a8:	2f00      	cmp	r7, #0
 80059aa:	dd33      	ble.n	8005a14 <_dtoa_r+0x37c>
 80059ac:	4b9c      	ldr	r3, [pc, #624]	@ (8005c20 <_dtoa_r+0x588>)
 80059ae:	f007 020f 	and.w	r2, r7, #15
 80059b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059b6:	05f8      	lsls	r0, r7, #23
 80059b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80059c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059c4:	d516      	bpl.n	80059f4 <_dtoa_r+0x35c>
 80059c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059ca:	4b96      	ldr	r3, [pc, #600]	@ (8005c24 <_dtoa_r+0x58c>)
 80059cc:	2603      	movs	r6, #3
 80059ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059d2:	f7fa feab 	bl	800072c <__aeabi_ddiv>
 80059d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059da:	f004 040f 	and.w	r4, r4, #15
 80059de:	4d91      	ldr	r5, [pc, #580]	@ (8005c24 <_dtoa_r+0x58c>)
 80059e0:	b954      	cbnz	r4, 80059f8 <_dtoa_r+0x360>
 80059e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059ea:	f7fa fe9f 	bl	800072c <__aeabi_ddiv>
 80059ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059f2:	e028      	b.n	8005a46 <_dtoa_r+0x3ae>
 80059f4:	2602      	movs	r6, #2
 80059f6:	e7f2      	b.n	80059de <_dtoa_r+0x346>
 80059f8:	07e1      	lsls	r1, r4, #31
 80059fa:	d508      	bpl.n	8005a0e <_dtoa_r+0x376>
 80059fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a04:	f7fa fd68 	bl	80004d8 <__aeabi_dmul>
 8005a08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a0c:	3601      	adds	r6, #1
 8005a0e:	1064      	asrs	r4, r4, #1
 8005a10:	3508      	adds	r5, #8
 8005a12:	e7e5      	b.n	80059e0 <_dtoa_r+0x348>
 8005a14:	f000 80af 	beq.w	8005b76 <_dtoa_r+0x4de>
 8005a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a1c:	427c      	negs	r4, r7
 8005a1e:	4b80      	ldr	r3, [pc, #512]	@ (8005c20 <_dtoa_r+0x588>)
 8005a20:	f004 020f 	and.w	r2, r4, #15
 8005a24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f7fa fd54 	bl	80004d8 <__aeabi_dmul>
 8005a30:	2602      	movs	r6, #2
 8005a32:	2300      	movs	r3, #0
 8005a34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a38:	4d7a      	ldr	r5, [pc, #488]	@ (8005c24 <_dtoa_r+0x58c>)
 8005a3a:	1124      	asrs	r4, r4, #4
 8005a3c:	2c00      	cmp	r4, #0
 8005a3e:	f040 808f 	bne.w	8005b60 <_dtoa_r+0x4c8>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1d3      	bne.n	80059ee <_dtoa_r+0x356>
 8005a46:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005a4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8094 	beq.w	8005b7a <_dtoa_r+0x4e2>
 8005a52:	2200      	movs	r2, #0
 8005a54:	4620      	mov	r0, r4
 8005a56:	4629      	mov	r1, r5
 8005a58:	4b73      	ldr	r3, [pc, #460]	@ (8005c28 <_dtoa_r+0x590>)
 8005a5a:	f7fa ffaf 	bl	80009bc <__aeabi_dcmplt>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	f000 808b 	beq.w	8005b7a <_dtoa_r+0x4e2>
 8005a64:	9b08      	ldr	r3, [sp, #32]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 8087 	beq.w	8005b7a <_dtoa_r+0x4e2>
 8005a6c:	f1bb 0f00 	cmp.w	fp, #0
 8005a70:	dd34      	ble.n	8005adc <_dtoa_r+0x444>
 8005a72:	4620      	mov	r0, r4
 8005a74:	2200      	movs	r2, #0
 8005a76:	4629      	mov	r1, r5
 8005a78:	4b6c      	ldr	r3, [pc, #432]	@ (8005c2c <_dtoa_r+0x594>)
 8005a7a:	f7fa fd2d 	bl	80004d8 <__aeabi_dmul>
 8005a7e:	465c      	mov	r4, fp
 8005a80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a84:	f107 38ff 	add.w	r8, r7, #4294967295
 8005a88:	3601      	adds	r6, #1
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7fa fcba 	bl	8000404 <__aeabi_i2d>
 8005a90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a94:	f7fa fd20 	bl	80004d8 <__aeabi_dmul>
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4b65      	ldr	r3, [pc, #404]	@ (8005c30 <_dtoa_r+0x598>)
 8005a9c:	f7fa fb66 	bl	800016c <__adddf3>
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005aa6:	2c00      	cmp	r4, #0
 8005aa8:	d16a      	bne.n	8005b80 <_dtoa_r+0x4e8>
 8005aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4b60      	ldr	r3, [pc, #384]	@ (8005c34 <_dtoa_r+0x59c>)
 8005ab2:	f7fa fb59 	bl	8000168 <__aeabi_dsub>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005abe:	462a      	mov	r2, r5
 8005ac0:	4633      	mov	r3, r6
 8005ac2:	f7fa ff99 	bl	80009f8 <__aeabi_dcmpgt>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	f040 8298 	bne.w	8005ffc <_dtoa_r+0x964>
 8005acc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ad6:	f7fa ff71 	bl	80009bc <__aeabi_dcmplt>
 8005ada:	bb38      	cbnz	r0, 8005b2c <_dtoa_r+0x494>
 8005adc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ae0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005ae4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f2c0 8157 	blt.w	8005d9a <_dtoa_r+0x702>
 8005aec:	2f0e      	cmp	r7, #14
 8005aee:	f300 8154 	bgt.w	8005d9a <_dtoa_r+0x702>
 8005af2:	4b4b      	ldr	r3, [pc, #300]	@ (8005c20 <_dtoa_r+0x588>)
 8005af4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005af8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005afc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f280 80e5 	bge.w	8005cd2 <_dtoa_r+0x63a>
 8005b08:	9b08      	ldr	r3, [sp, #32]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f300 80e1 	bgt.w	8005cd2 <_dtoa_r+0x63a>
 8005b10:	d10c      	bne.n	8005b2c <_dtoa_r+0x494>
 8005b12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b16:	2200      	movs	r2, #0
 8005b18:	4b46      	ldr	r3, [pc, #280]	@ (8005c34 <_dtoa_r+0x59c>)
 8005b1a:	f7fa fcdd 	bl	80004d8 <__aeabi_dmul>
 8005b1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b22:	f7fa ff5f 	bl	80009e4 <__aeabi_dcmpge>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f000 8266 	beq.w	8005ff8 <_dtoa_r+0x960>
 8005b2c:	2400      	movs	r4, #0
 8005b2e:	4625      	mov	r5, r4
 8005b30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b32:	4656      	mov	r6, sl
 8005b34:	ea6f 0803 	mvn.w	r8, r3
 8005b38:	2700      	movs	r7, #0
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	4648      	mov	r0, r9
 8005b3e:	f000 fcbd 	bl	80064bc <_Bfree>
 8005b42:	2d00      	cmp	r5, #0
 8005b44:	f000 80bd 	beq.w	8005cc2 <_dtoa_r+0x62a>
 8005b48:	b12f      	cbz	r7, 8005b56 <_dtoa_r+0x4be>
 8005b4a:	42af      	cmp	r7, r5
 8005b4c:	d003      	beq.n	8005b56 <_dtoa_r+0x4be>
 8005b4e:	4639      	mov	r1, r7
 8005b50:	4648      	mov	r0, r9
 8005b52:	f000 fcb3 	bl	80064bc <_Bfree>
 8005b56:	4629      	mov	r1, r5
 8005b58:	4648      	mov	r0, r9
 8005b5a:	f000 fcaf 	bl	80064bc <_Bfree>
 8005b5e:	e0b0      	b.n	8005cc2 <_dtoa_r+0x62a>
 8005b60:	07e2      	lsls	r2, r4, #31
 8005b62:	d505      	bpl.n	8005b70 <_dtoa_r+0x4d8>
 8005b64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b68:	f7fa fcb6 	bl	80004d8 <__aeabi_dmul>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	3601      	adds	r6, #1
 8005b70:	1064      	asrs	r4, r4, #1
 8005b72:	3508      	adds	r5, #8
 8005b74:	e762      	b.n	8005a3c <_dtoa_r+0x3a4>
 8005b76:	2602      	movs	r6, #2
 8005b78:	e765      	b.n	8005a46 <_dtoa_r+0x3ae>
 8005b7a:	46b8      	mov	r8, r7
 8005b7c:	9c08      	ldr	r4, [sp, #32]
 8005b7e:	e784      	b.n	8005a8a <_dtoa_r+0x3f2>
 8005b80:	4b27      	ldr	r3, [pc, #156]	@ (8005c20 <_dtoa_r+0x588>)
 8005b82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b8c:	4454      	add	r4, sl
 8005b8e:	2900      	cmp	r1, #0
 8005b90:	d054      	beq.n	8005c3c <_dtoa_r+0x5a4>
 8005b92:	2000      	movs	r0, #0
 8005b94:	4928      	ldr	r1, [pc, #160]	@ (8005c38 <_dtoa_r+0x5a0>)
 8005b96:	f7fa fdc9 	bl	800072c <__aeabi_ddiv>
 8005b9a:	4633      	mov	r3, r6
 8005b9c:	462a      	mov	r2, r5
 8005b9e:	f7fa fae3 	bl	8000168 <__aeabi_dsub>
 8005ba2:	4656      	mov	r6, sl
 8005ba4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ba8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bac:	f7fa ff44 	bl	8000a38 <__aeabi_d2iz>
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	f7fa fc27 	bl	8000404 <__aeabi_i2d>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bbe:	f7fa fad3 	bl	8000168 <__aeabi_dsub>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	3530      	adds	r5, #48	@ 0x30
 8005bc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005bcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bd0:	f806 5b01 	strb.w	r5, [r6], #1
 8005bd4:	f7fa fef2 	bl	80009bc <__aeabi_dcmplt>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d172      	bne.n	8005cc2 <_dtoa_r+0x62a>
 8005bdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005be0:	2000      	movs	r0, #0
 8005be2:	4911      	ldr	r1, [pc, #68]	@ (8005c28 <_dtoa_r+0x590>)
 8005be4:	f7fa fac0 	bl	8000168 <__aeabi_dsub>
 8005be8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bec:	f7fa fee6 	bl	80009bc <__aeabi_dcmplt>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	f040 80b4 	bne.w	8005d5e <_dtoa_r+0x6c6>
 8005bf6:	42a6      	cmp	r6, r4
 8005bf8:	f43f af70 	beq.w	8005adc <_dtoa_r+0x444>
 8005bfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c00:	2200      	movs	r2, #0
 8005c02:	4b0a      	ldr	r3, [pc, #40]	@ (8005c2c <_dtoa_r+0x594>)
 8005c04:	f7fa fc68 	bl	80004d8 <__aeabi_dmul>
 8005c08:	2200      	movs	r2, #0
 8005c0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c12:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <_dtoa_r+0x594>)
 8005c14:	f7fa fc60 	bl	80004d8 <__aeabi_dmul>
 8005c18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c1c:	e7c4      	b.n	8005ba8 <_dtoa_r+0x510>
 8005c1e:	bf00      	nop
 8005c20:	08008ee8 	.word	0x08008ee8
 8005c24:	08008ec0 	.word	0x08008ec0
 8005c28:	3ff00000 	.word	0x3ff00000
 8005c2c:	40240000 	.word	0x40240000
 8005c30:	401c0000 	.word	0x401c0000
 8005c34:	40140000 	.word	0x40140000
 8005c38:	3fe00000 	.word	0x3fe00000
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f7fa fc4a 	bl	80004d8 <__aeabi_dmul>
 8005c44:	4656      	mov	r6, sl
 8005c46:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c4a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c50:	f7fa fef2 	bl	8000a38 <__aeabi_d2iz>
 8005c54:	4605      	mov	r5, r0
 8005c56:	f7fa fbd5 	bl	8000404 <__aeabi_i2d>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c62:	f7fa fa81 	bl	8000168 <__aeabi_dsub>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	3530      	adds	r5, #48	@ 0x30
 8005c6c:	f806 5b01 	strb.w	r5, [r6], #1
 8005c70:	42a6      	cmp	r6, r4
 8005c72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	d124      	bne.n	8005cc6 <_dtoa_r+0x62e>
 8005c7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c80:	4bae      	ldr	r3, [pc, #696]	@ (8005f3c <_dtoa_r+0x8a4>)
 8005c82:	f7fa fa73 	bl	800016c <__adddf3>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c8e:	f7fa feb3 	bl	80009f8 <__aeabi_dcmpgt>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d163      	bne.n	8005d5e <_dtoa_r+0x6c6>
 8005c96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	49a7      	ldr	r1, [pc, #668]	@ (8005f3c <_dtoa_r+0x8a4>)
 8005c9e:	f7fa fa63 	bl	8000168 <__aeabi_dsub>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005caa:	f7fa fe87 	bl	80009bc <__aeabi_dcmplt>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f43f af14 	beq.w	8005adc <_dtoa_r+0x444>
 8005cb4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005cb6:	1e73      	subs	r3, r6, #1
 8005cb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005cba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cbe:	2b30      	cmp	r3, #48	@ 0x30
 8005cc0:	d0f8      	beq.n	8005cb4 <_dtoa_r+0x61c>
 8005cc2:	4647      	mov	r7, r8
 8005cc4:	e03b      	b.n	8005d3e <_dtoa_r+0x6a6>
 8005cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8005f40 <_dtoa_r+0x8a8>)
 8005cc8:	f7fa fc06 	bl	80004d8 <__aeabi_dmul>
 8005ccc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005cd0:	e7bc      	b.n	8005c4c <_dtoa_r+0x5b4>
 8005cd2:	4656      	mov	r6, sl
 8005cd4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cdc:	4620      	mov	r0, r4
 8005cde:	4629      	mov	r1, r5
 8005ce0:	f7fa fd24 	bl	800072c <__aeabi_ddiv>
 8005ce4:	f7fa fea8 	bl	8000a38 <__aeabi_d2iz>
 8005ce8:	4680      	mov	r8, r0
 8005cea:	f7fa fb8b 	bl	8000404 <__aeabi_i2d>
 8005cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cf2:	f7fa fbf1 	bl	80004d8 <__aeabi_dmul>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	f7fa fa33 	bl	8000168 <__aeabi_dsub>
 8005d02:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d06:	9d08      	ldr	r5, [sp, #32]
 8005d08:	f806 4b01 	strb.w	r4, [r6], #1
 8005d0c:	eba6 040a 	sub.w	r4, r6, sl
 8005d10:	42a5      	cmp	r5, r4
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	d133      	bne.n	8005d80 <_dtoa_r+0x6e8>
 8005d18:	f7fa fa28 	bl	800016c <__adddf3>
 8005d1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d20:	4604      	mov	r4, r0
 8005d22:	460d      	mov	r5, r1
 8005d24:	f7fa fe68 	bl	80009f8 <__aeabi_dcmpgt>
 8005d28:	b9c0      	cbnz	r0, 8005d5c <_dtoa_r+0x6c4>
 8005d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fe39 	bl	80009a8 <__aeabi_dcmpeq>
 8005d36:	b110      	cbz	r0, 8005d3e <_dtoa_r+0x6a6>
 8005d38:	f018 0f01 	tst.w	r8, #1
 8005d3c:	d10e      	bne.n	8005d5c <_dtoa_r+0x6c4>
 8005d3e:	4648      	mov	r0, r9
 8005d40:	9903      	ldr	r1, [sp, #12]
 8005d42:	f000 fbbb 	bl	80064bc <_Bfree>
 8005d46:	2300      	movs	r3, #0
 8005d48:	7033      	strb	r3, [r6, #0]
 8005d4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005d4c:	3701      	adds	r7, #1
 8005d4e:	601f      	str	r7, [r3, #0]
 8005d50:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 824b 	beq.w	80061ee <_dtoa_r+0xb56>
 8005d58:	601e      	str	r6, [r3, #0]
 8005d5a:	e248      	b.n	80061ee <_dtoa_r+0xb56>
 8005d5c:	46b8      	mov	r8, r7
 8005d5e:	4633      	mov	r3, r6
 8005d60:	461e      	mov	r6, r3
 8005d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d66:	2a39      	cmp	r2, #57	@ 0x39
 8005d68:	d106      	bne.n	8005d78 <_dtoa_r+0x6e0>
 8005d6a:	459a      	cmp	sl, r3
 8005d6c:	d1f8      	bne.n	8005d60 <_dtoa_r+0x6c8>
 8005d6e:	2230      	movs	r2, #48	@ 0x30
 8005d70:	f108 0801 	add.w	r8, r8, #1
 8005d74:	f88a 2000 	strb.w	r2, [sl]
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	3201      	adds	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e7a0      	b.n	8005cc2 <_dtoa_r+0x62a>
 8005d80:	2200      	movs	r2, #0
 8005d82:	4b6f      	ldr	r3, [pc, #444]	@ (8005f40 <_dtoa_r+0x8a8>)
 8005d84:	f7fa fba8 	bl	80004d8 <__aeabi_dmul>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	460d      	mov	r5, r1
 8005d90:	f7fa fe0a 	bl	80009a8 <__aeabi_dcmpeq>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d09f      	beq.n	8005cd8 <_dtoa_r+0x640>
 8005d98:	e7d1      	b.n	8005d3e <_dtoa_r+0x6a6>
 8005d9a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	f000 80ea 	beq.w	8005f76 <_dtoa_r+0x8de>
 8005da2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005da4:	2a01      	cmp	r2, #1
 8005da6:	f300 80cd 	bgt.w	8005f44 <_dtoa_r+0x8ac>
 8005daa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005dac:	2a00      	cmp	r2, #0
 8005dae:	f000 80c1 	beq.w	8005f34 <_dtoa_r+0x89c>
 8005db2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005db6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005db8:	9e04      	ldr	r6, [sp, #16]
 8005dba:	9a04      	ldr	r2, [sp, #16]
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	441a      	add	r2, r3
 8005dc0:	9204      	str	r2, [sp, #16]
 8005dc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dc4:	4648      	mov	r0, r9
 8005dc6:	441a      	add	r2, r3
 8005dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dca:	f000 fc75 	bl	80066b8 <__i2b>
 8005dce:	4605      	mov	r5, r0
 8005dd0:	b166      	cbz	r6, 8005dec <_dtoa_r+0x754>
 8005dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dd09      	ble.n	8005dec <_dtoa_r+0x754>
 8005dd8:	42b3      	cmp	r3, r6
 8005dda:	bfa8      	it	ge
 8005ddc:	4633      	movge	r3, r6
 8005dde:	9a04      	ldr	r2, [sp, #16]
 8005de0:	1af6      	subs	r6, r6, r3
 8005de2:	1ad2      	subs	r2, r2, r3
 8005de4:	9204      	str	r2, [sp, #16]
 8005de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dee:	b30b      	cbz	r3, 8005e34 <_dtoa_r+0x79c>
 8005df0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80c6 	beq.w	8005f84 <_dtoa_r+0x8ec>
 8005df8:	2c00      	cmp	r4, #0
 8005dfa:	f000 80c0 	beq.w	8005f7e <_dtoa_r+0x8e6>
 8005dfe:	4629      	mov	r1, r5
 8005e00:	4622      	mov	r2, r4
 8005e02:	4648      	mov	r0, r9
 8005e04:	f000 fd10 	bl	8006828 <__pow5mult>
 8005e08:	9a03      	ldr	r2, [sp, #12]
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	4648      	mov	r0, r9
 8005e10:	f000 fc68 	bl	80066e4 <__multiply>
 8005e14:	9903      	ldr	r1, [sp, #12]
 8005e16:	4680      	mov	r8, r0
 8005e18:	4648      	mov	r0, r9
 8005e1a:	f000 fb4f 	bl	80064bc <_Bfree>
 8005e1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e20:	1b1b      	subs	r3, r3, r4
 8005e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e24:	f000 80b1 	beq.w	8005f8a <_dtoa_r+0x8f2>
 8005e28:	4641      	mov	r1, r8
 8005e2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e2c:	4648      	mov	r0, r9
 8005e2e:	f000 fcfb 	bl	8006828 <__pow5mult>
 8005e32:	9003      	str	r0, [sp, #12]
 8005e34:	2101      	movs	r1, #1
 8005e36:	4648      	mov	r0, r9
 8005e38:	f000 fc3e 	bl	80066b8 <__i2b>
 8005e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e3e:	4604      	mov	r4, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 81d8 	beq.w	80061f6 <_dtoa_r+0xb5e>
 8005e46:	461a      	mov	r2, r3
 8005e48:	4601      	mov	r1, r0
 8005e4a:	4648      	mov	r0, r9
 8005e4c:	f000 fcec 	bl	8006828 <__pow5mult>
 8005e50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e52:	4604      	mov	r4, r0
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	f300 809f 	bgt.w	8005f98 <_dtoa_r+0x900>
 8005e5a:	9b06      	ldr	r3, [sp, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f040 8097 	bne.w	8005f90 <_dtoa_r+0x8f8>
 8005e62:	9b07      	ldr	r3, [sp, #28]
 8005e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f040 8093 	bne.w	8005f94 <_dtoa_r+0x8fc>
 8005e6e:	9b07      	ldr	r3, [sp, #28]
 8005e70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e74:	0d1b      	lsrs	r3, r3, #20
 8005e76:	051b      	lsls	r3, r3, #20
 8005e78:	b133      	cbz	r3, 8005e88 <_dtoa_r+0x7f0>
 8005e7a:	9b04      	ldr	r3, [sp, #16]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	9304      	str	r3, [sp, #16]
 8005e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e82:	3301      	adds	r3, #1
 8005e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e86:	2301      	movs	r3, #1
 8005e88:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 81b8 	beq.w	8006202 <_dtoa_r+0xb6a>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e98:	6918      	ldr	r0, [r3, #16]
 8005e9a:	f000 fbc1 	bl	8006620 <__hi0bits>
 8005e9e:	f1c0 0020 	rsb	r0, r0, #32
 8005ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea4:	4418      	add	r0, r3
 8005ea6:	f010 001f 	ands.w	r0, r0, #31
 8005eaa:	f000 8082 	beq.w	8005fb2 <_dtoa_r+0x91a>
 8005eae:	f1c0 0320 	rsb	r3, r0, #32
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	dd73      	ble.n	8005f9e <_dtoa_r+0x906>
 8005eb6:	9b04      	ldr	r3, [sp, #16]
 8005eb8:	f1c0 001c 	rsb	r0, r0, #28
 8005ebc:	4403      	add	r3, r0
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec2:	4406      	add	r6, r0
 8005ec4:	4403      	add	r3, r0
 8005ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ec8:	9b04      	ldr	r3, [sp, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dd05      	ble.n	8005eda <_dtoa_r+0x842>
 8005ece:	461a      	mov	r2, r3
 8005ed0:	4648      	mov	r0, r9
 8005ed2:	9903      	ldr	r1, [sp, #12]
 8005ed4:	f000 fd02 	bl	80068dc <__lshift>
 8005ed8:	9003      	str	r0, [sp, #12]
 8005eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	dd05      	ble.n	8005eec <_dtoa_r+0x854>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4648      	mov	r0, r9
 8005ee6:	f000 fcf9 	bl	80068dc <__lshift>
 8005eea:	4604      	mov	r4, r0
 8005eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d061      	beq.n	8005fb6 <_dtoa_r+0x91e>
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	9803      	ldr	r0, [sp, #12]
 8005ef6:	f000 fd5d 	bl	80069b4 <__mcmp>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	da5b      	bge.n	8005fb6 <_dtoa_r+0x91e>
 8005efe:	2300      	movs	r3, #0
 8005f00:	220a      	movs	r2, #10
 8005f02:	4648      	mov	r0, r9
 8005f04:	9903      	ldr	r1, [sp, #12]
 8005f06:	f000 fafb 	bl	8006500 <__multadd>
 8005f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f0c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005f10:	9003      	str	r0, [sp, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8177 	beq.w	8006206 <_dtoa_r+0xb6e>
 8005f18:	4629      	mov	r1, r5
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	220a      	movs	r2, #10
 8005f1e:	4648      	mov	r0, r9
 8005f20:	f000 faee 	bl	8006500 <__multadd>
 8005f24:	f1bb 0f00 	cmp.w	fp, #0
 8005f28:	4605      	mov	r5, r0
 8005f2a:	dc6f      	bgt.n	800600c <_dtoa_r+0x974>
 8005f2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	dc49      	bgt.n	8005fc6 <_dtoa_r+0x92e>
 8005f32:	e06b      	b.n	800600c <_dtoa_r+0x974>
 8005f34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f3a:	e73c      	b.n	8005db6 <_dtoa_r+0x71e>
 8005f3c:	3fe00000 	.word	0x3fe00000
 8005f40:	40240000 	.word	0x40240000
 8005f44:	9b08      	ldr	r3, [sp, #32]
 8005f46:	1e5c      	subs	r4, r3, #1
 8005f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f4a:	42a3      	cmp	r3, r4
 8005f4c:	db09      	blt.n	8005f62 <_dtoa_r+0x8ca>
 8005f4e:	1b1c      	subs	r4, r3, r4
 8005f50:	9b08      	ldr	r3, [sp, #32]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f6bf af30 	bge.w	8005db8 <_dtoa_r+0x720>
 8005f58:	9b04      	ldr	r3, [sp, #16]
 8005f5a:	9a08      	ldr	r2, [sp, #32]
 8005f5c:	1a9e      	subs	r6, r3, r2
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e72b      	b.n	8005dba <_dtoa_r+0x722>
 8005f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f66:	1ae3      	subs	r3, r4, r3
 8005f68:	441a      	add	r2, r3
 8005f6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8005f6c:	9e04      	ldr	r6, [sp, #16]
 8005f6e:	2400      	movs	r4, #0
 8005f70:	9b08      	ldr	r3, [sp, #32]
 8005f72:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f74:	e721      	b.n	8005dba <_dtoa_r+0x722>
 8005f76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f78:	9e04      	ldr	r6, [sp, #16]
 8005f7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f7c:	e728      	b.n	8005dd0 <_dtoa_r+0x738>
 8005f7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f82:	e751      	b.n	8005e28 <_dtoa_r+0x790>
 8005f84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f86:	9903      	ldr	r1, [sp, #12]
 8005f88:	e750      	b.n	8005e2c <_dtoa_r+0x794>
 8005f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f8e:	e751      	b.n	8005e34 <_dtoa_r+0x79c>
 8005f90:	2300      	movs	r3, #0
 8005f92:	e779      	b.n	8005e88 <_dtoa_r+0x7f0>
 8005f94:	9b06      	ldr	r3, [sp, #24]
 8005f96:	e777      	b.n	8005e88 <_dtoa_r+0x7f0>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f9c:	e779      	b.n	8005e92 <_dtoa_r+0x7fa>
 8005f9e:	d093      	beq.n	8005ec8 <_dtoa_r+0x830>
 8005fa0:	9a04      	ldr	r2, [sp, #16]
 8005fa2:	331c      	adds	r3, #28
 8005fa4:	441a      	add	r2, r3
 8005fa6:	9204      	str	r2, [sp, #16]
 8005fa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005faa:	441e      	add	r6, r3
 8005fac:	441a      	add	r2, r3
 8005fae:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fb0:	e78a      	b.n	8005ec8 <_dtoa_r+0x830>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	e7f4      	b.n	8005fa0 <_dtoa_r+0x908>
 8005fb6:	9b08      	ldr	r3, [sp, #32]
 8005fb8:	46b8      	mov	r8, r7
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dc20      	bgt.n	8006000 <_dtoa_r+0x968>
 8005fbe:	469b      	mov	fp, r3
 8005fc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	dd1e      	ble.n	8006004 <_dtoa_r+0x96c>
 8005fc6:	f1bb 0f00 	cmp.w	fp, #0
 8005fca:	f47f adb1 	bne.w	8005b30 <_dtoa_r+0x498>
 8005fce:	4621      	mov	r1, r4
 8005fd0:	465b      	mov	r3, fp
 8005fd2:	2205      	movs	r2, #5
 8005fd4:	4648      	mov	r0, r9
 8005fd6:	f000 fa93 	bl	8006500 <__multadd>
 8005fda:	4601      	mov	r1, r0
 8005fdc:	4604      	mov	r4, r0
 8005fde:	9803      	ldr	r0, [sp, #12]
 8005fe0:	f000 fce8 	bl	80069b4 <__mcmp>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	f77f ada3 	ble.w	8005b30 <_dtoa_r+0x498>
 8005fea:	4656      	mov	r6, sl
 8005fec:	2331      	movs	r3, #49	@ 0x31
 8005fee:	f108 0801 	add.w	r8, r8, #1
 8005ff2:	f806 3b01 	strb.w	r3, [r6], #1
 8005ff6:	e59f      	b.n	8005b38 <_dtoa_r+0x4a0>
 8005ff8:	46b8      	mov	r8, r7
 8005ffa:	9c08      	ldr	r4, [sp, #32]
 8005ffc:	4625      	mov	r5, r4
 8005ffe:	e7f4      	b.n	8005fea <_dtoa_r+0x952>
 8006000:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006004:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8101 	beq.w	800620e <_dtoa_r+0xb76>
 800600c:	2e00      	cmp	r6, #0
 800600e:	dd05      	ble.n	800601c <_dtoa_r+0x984>
 8006010:	4629      	mov	r1, r5
 8006012:	4632      	mov	r2, r6
 8006014:	4648      	mov	r0, r9
 8006016:	f000 fc61 	bl	80068dc <__lshift>
 800601a:	4605      	mov	r5, r0
 800601c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	d05c      	beq.n	80060dc <_dtoa_r+0xa44>
 8006022:	4648      	mov	r0, r9
 8006024:	6869      	ldr	r1, [r5, #4]
 8006026:	f000 fa09 	bl	800643c <_Balloc>
 800602a:	4606      	mov	r6, r0
 800602c:	b928      	cbnz	r0, 800603a <_dtoa_r+0x9a2>
 800602e:	4602      	mov	r2, r0
 8006030:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006034:	4b80      	ldr	r3, [pc, #512]	@ (8006238 <_dtoa_r+0xba0>)
 8006036:	f7ff bb43 	b.w	80056c0 <_dtoa_r+0x28>
 800603a:	692a      	ldr	r2, [r5, #16]
 800603c:	f105 010c 	add.w	r1, r5, #12
 8006040:	3202      	adds	r2, #2
 8006042:	0092      	lsls	r2, r2, #2
 8006044:	300c      	adds	r0, #12
 8006046:	f001 ff51 	bl	8007eec <memcpy>
 800604a:	2201      	movs	r2, #1
 800604c:	4631      	mov	r1, r6
 800604e:	4648      	mov	r0, r9
 8006050:	f000 fc44 	bl	80068dc <__lshift>
 8006054:	462f      	mov	r7, r5
 8006056:	4605      	mov	r5, r0
 8006058:	f10a 0301 	add.w	r3, sl, #1
 800605c:	9304      	str	r3, [sp, #16]
 800605e:	eb0a 030b 	add.w	r3, sl, fp
 8006062:	930a      	str	r3, [sp, #40]	@ 0x28
 8006064:	9b06      	ldr	r3, [sp, #24]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	9309      	str	r3, [sp, #36]	@ 0x24
 800606c:	9b04      	ldr	r3, [sp, #16]
 800606e:	4621      	mov	r1, r4
 8006070:	9803      	ldr	r0, [sp, #12]
 8006072:	f103 3bff 	add.w	fp, r3, #4294967295
 8006076:	f7ff fa87 	bl	8005588 <quorem>
 800607a:	4603      	mov	r3, r0
 800607c:	4639      	mov	r1, r7
 800607e:	3330      	adds	r3, #48	@ 0x30
 8006080:	9006      	str	r0, [sp, #24]
 8006082:	9803      	ldr	r0, [sp, #12]
 8006084:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006086:	f000 fc95 	bl	80069b4 <__mcmp>
 800608a:	462a      	mov	r2, r5
 800608c:	9008      	str	r0, [sp, #32]
 800608e:	4621      	mov	r1, r4
 8006090:	4648      	mov	r0, r9
 8006092:	f000 fcab 	bl	80069ec <__mdiff>
 8006096:	68c2      	ldr	r2, [r0, #12]
 8006098:	4606      	mov	r6, r0
 800609a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800609c:	bb02      	cbnz	r2, 80060e0 <_dtoa_r+0xa48>
 800609e:	4601      	mov	r1, r0
 80060a0:	9803      	ldr	r0, [sp, #12]
 80060a2:	f000 fc87 	bl	80069b4 <__mcmp>
 80060a6:	4602      	mov	r2, r0
 80060a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060aa:	4631      	mov	r1, r6
 80060ac:	4648      	mov	r0, r9
 80060ae:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80060b2:	f000 fa03 	bl	80064bc <_Bfree>
 80060b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060ba:	9e04      	ldr	r6, [sp, #16]
 80060bc:	ea42 0103 	orr.w	r1, r2, r3
 80060c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c2:	4319      	orrs	r1, r3
 80060c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060c6:	d10d      	bne.n	80060e4 <_dtoa_r+0xa4c>
 80060c8:	2b39      	cmp	r3, #57	@ 0x39
 80060ca:	d027      	beq.n	800611c <_dtoa_r+0xa84>
 80060cc:	9a08      	ldr	r2, [sp, #32]
 80060ce:	2a00      	cmp	r2, #0
 80060d0:	dd01      	ble.n	80060d6 <_dtoa_r+0xa3e>
 80060d2:	9b06      	ldr	r3, [sp, #24]
 80060d4:	3331      	adds	r3, #49	@ 0x31
 80060d6:	f88b 3000 	strb.w	r3, [fp]
 80060da:	e52e      	b.n	8005b3a <_dtoa_r+0x4a2>
 80060dc:	4628      	mov	r0, r5
 80060de:	e7b9      	b.n	8006054 <_dtoa_r+0x9bc>
 80060e0:	2201      	movs	r2, #1
 80060e2:	e7e2      	b.n	80060aa <_dtoa_r+0xa12>
 80060e4:	9908      	ldr	r1, [sp, #32]
 80060e6:	2900      	cmp	r1, #0
 80060e8:	db04      	blt.n	80060f4 <_dtoa_r+0xa5c>
 80060ea:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80060ec:	4301      	orrs	r1, r0
 80060ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060f0:	4301      	orrs	r1, r0
 80060f2:	d120      	bne.n	8006136 <_dtoa_r+0xa9e>
 80060f4:	2a00      	cmp	r2, #0
 80060f6:	ddee      	ble.n	80060d6 <_dtoa_r+0xa3e>
 80060f8:	2201      	movs	r2, #1
 80060fa:	9903      	ldr	r1, [sp, #12]
 80060fc:	4648      	mov	r0, r9
 80060fe:	9304      	str	r3, [sp, #16]
 8006100:	f000 fbec 	bl	80068dc <__lshift>
 8006104:	4621      	mov	r1, r4
 8006106:	9003      	str	r0, [sp, #12]
 8006108:	f000 fc54 	bl	80069b4 <__mcmp>
 800610c:	2800      	cmp	r0, #0
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	dc02      	bgt.n	8006118 <_dtoa_r+0xa80>
 8006112:	d1e0      	bne.n	80060d6 <_dtoa_r+0xa3e>
 8006114:	07da      	lsls	r2, r3, #31
 8006116:	d5de      	bpl.n	80060d6 <_dtoa_r+0xa3e>
 8006118:	2b39      	cmp	r3, #57	@ 0x39
 800611a:	d1da      	bne.n	80060d2 <_dtoa_r+0xa3a>
 800611c:	2339      	movs	r3, #57	@ 0x39
 800611e:	f88b 3000 	strb.w	r3, [fp]
 8006122:	4633      	mov	r3, r6
 8006124:	461e      	mov	r6, r3
 8006126:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800612a:	3b01      	subs	r3, #1
 800612c:	2a39      	cmp	r2, #57	@ 0x39
 800612e:	d04e      	beq.n	80061ce <_dtoa_r+0xb36>
 8006130:	3201      	adds	r2, #1
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	e501      	b.n	8005b3a <_dtoa_r+0x4a2>
 8006136:	2a00      	cmp	r2, #0
 8006138:	dd03      	ble.n	8006142 <_dtoa_r+0xaaa>
 800613a:	2b39      	cmp	r3, #57	@ 0x39
 800613c:	d0ee      	beq.n	800611c <_dtoa_r+0xa84>
 800613e:	3301      	adds	r3, #1
 8006140:	e7c9      	b.n	80060d6 <_dtoa_r+0xa3e>
 8006142:	9a04      	ldr	r2, [sp, #16]
 8006144:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006146:	f802 3c01 	strb.w	r3, [r2, #-1]
 800614a:	428a      	cmp	r2, r1
 800614c:	d028      	beq.n	80061a0 <_dtoa_r+0xb08>
 800614e:	2300      	movs	r3, #0
 8006150:	220a      	movs	r2, #10
 8006152:	9903      	ldr	r1, [sp, #12]
 8006154:	4648      	mov	r0, r9
 8006156:	f000 f9d3 	bl	8006500 <__multadd>
 800615a:	42af      	cmp	r7, r5
 800615c:	9003      	str	r0, [sp, #12]
 800615e:	f04f 0300 	mov.w	r3, #0
 8006162:	f04f 020a 	mov.w	r2, #10
 8006166:	4639      	mov	r1, r7
 8006168:	4648      	mov	r0, r9
 800616a:	d107      	bne.n	800617c <_dtoa_r+0xae4>
 800616c:	f000 f9c8 	bl	8006500 <__multadd>
 8006170:	4607      	mov	r7, r0
 8006172:	4605      	mov	r5, r0
 8006174:	9b04      	ldr	r3, [sp, #16]
 8006176:	3301      	adds	r3, #1
 8006178:	9304      	str	r3, [sp, #16]
 800617a:	e777      	b.n	800606c <_dtoa_r+0x9d4>
 800617c:	f000 f9c0 	bl	8006500 <__multadd>
 8006180:	4629      	mov	r1, r5
 8006182:	4607      	mov	r7, r0
 8006184:	2300      	movs	r3, #0
 8006186:	220a      	movs	r2, #10
 8006188:	4648      	mov	r0, r9
 800618a:	f000 f9b9 	bl	8006500 <__multadd>
 800618e:	4605      	mov	r5, r0
 8006190:	e7f0      	b.n	8006174 <_dtoa_r+0xadc>
 8006192:	f1bb 0f00 	cmp.w	fp, #0
 8006196:	bfcc      	ite	gt
 8006198:	465e      	movgt	r6, fp
 800619a:	2601      	movle	r6, #1
 800619c:	2700      	movs	r7, #0
 800619e:	4456      	add	r6, sl
 80061a0:	2201      	movs	r2, #1
 80061a2:	9903      	ldr	r1, [sp, #12]
 80061a4:	4648      	mov	r0, r9
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	f000 fb98 	bl	80068dc <__lshift>
 80061ac:	4621      	mov	r1, r4
 80061ae:	9003      	str	r0, [sp, #12]
 80061b0:	f000 fc00 	bl	80069b4 <__mcmp>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	dcb4      	bgt.n	8006122 <_dtoa_r+0xa8a>
 80061b8:	d102      	bne.n	80061c0 <_dtoa_r+0xb28>
 80061ba:	9b04      	ldr	r3, [sp, #16]
 80061bc:	07db      	lsls	r3, r3, #31
 80061be:	d4b0      	bmi.n	8006122 <_dtoa_r+0xa8a>
 80061c0:	4633      	mov	r3, r6
 80061c2:	461e      	mov	r6, r3
 80061c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061c8:	2a30      	cmp	r2, #48	@ 0x30
 80061ca:	d0fa      	beq.n	80061c2 <_dtoa_r+0xb2a>
 80061cc:	e4b5      	b.n	8005b3a <_dtoa_r+0x4a2>
 80061ce:	459a      	cmp	sl, r3
 80061d0:	d1a8      	bne.n	8006124 <_dtoa_r+0xa8c>
 80061d2:	2331      	movs	r3, #49	@ 0x31
 80061d4:	f108 0801 	add.w	r8, r8, #1
 80061d8:	f88a 3000 	strb.w	r3, [sl]
 80061dc:	e4ad      	b.n	8005b3a <_dtoa_r+0x4a2>
 80061de:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800623c <_dtoa_r+0xba4>
 80061e4:	b11b      	cbz	r3, 80061ee <_dtoa_r+0xb56>
 80061e6:	f10a 0308 	add.w	r3, sl, #8
 80061ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	4650      	mov	r0, sl
 80061f0:	b017      	add	sp, #92	@ 0x5c
 80061f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	f77f ae2e 	ble.w	8005e5a <_dtoa_r+0x7c2>
 80061fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006200:	930a      	str	r3, [sp, #40]	@ 0x28
 8006202:	2001      	movs	r0, #1
 8006204:	e64d      	b.n	8005ea2 <_dtoa_r+0x80a>
 8006206:	f1bb 0f00 	cmp.w	fp, #0
 800620a:	f77f aed9 	ble.w	8005fc0 <_dtoa_r+0x928>
 800620e:	4656      	mov	r6, sl
 8006210:	4621      	mov	r1, r4
 8006212:	9803      	ldr	r0, [sp, #12]
 8006214:	f7ff f9b8 	bl	8005588 <quorem>
 8006218:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800621c:	f806 3b01 	strb.w	r3, [r6], #1
 8006220:	eba6 020a 	sub.w	r2, r6, sl
 8006224:	4593      	cmp	fp, r2
 8006226:	ddb4      	ble.n	8006192 <_dtoa_r+0xafa>
 8006228:	2300      	movs	r3, #0
 800622a:	220a      	movs	r2, #10
 800622c:	4648      	mov	r0, r9
 800622e:	9903      	ldr	r1, [sp, #12]
 8006230:	f000 f966 	bl	8006500 <__multadd>
 8006234:	9003      	str	r0, [sp, #12]
 8006236:	e7eb      	b.n	8006210 <_dtoa_r+0xb78>
 8006238:	08008d91 	.word	0x08008d91
 800623c:	08008d15 	.word	0x08008d15

08006240 <_free_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4605      	mov	r5, r0
 8006244:	2900      	cmp	r1, #0
 8006246:	d040      	beq.n	80062ca <_free_r+0x8a>
 8006248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800624c:	1f0c      	subs	r4, r1, #4
 800624e:	2b00      	cmp	r3, #0
 8006250:	bfb8      	it	lt
 8006252:	18e4      	addlt	r4, r4, r3
 8006254:	f000 f8e6 	bl	8006424 <__malloc_lock>
 8006258:	4a1c      	ldr	r2, [pc, #112]	@ (80062cc <_free_r+0x8c>)
 800625a:	6813      	ldr	r3, [r2, #0]
 800625c:	b933      	cbnz	r3, 800626c <_free_r+0x2c>
 800625e:	6063      	str	r3, [r4, #4]
 8006260:	6014      	str	r4, [r2, #0]
 8006262:	4628      	mov	r0, r5
 8006264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006268:	f000 b8e2 	b.w	8006430 <__malloc_unlock>
 800626c:	42a3      	cmp	r3, r4
 800626e:	d908      	bls.n	8006282 <_free_r+0x42>
 8006270:	6820      	ldr	r0, [r4, #0]
 8006272:	1821      	adds	r1, r4, r0
 8006274:	428b      	cmp	r3, r1
 8006276:	bf01      	itttt	eq
 8006278:	6819      	ldreq	r1, [r3, #0]
 800627a:	685b      	ldreq	r3, [r3, #4]
 800627c:	1809      	addeq	r1, r1, r0
 800627e:	6021      	streq	r1, [r4, #0]
 8006280:	e7ed      	b.n	800625e <_free_r+0x1e>
 8006282:	461a      	mov	r2, r3
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	b10b      	cbz	r3, 800628c <_free_r+0x4c>
 8006288:	42a3      	cmp	r3, r4
 800628a:	d9fa      	bls.n	8006282 <_free_r+0x42>
 800628c:	6811      	ldr	r1, [r2, #0]
 800628e:	1850      	adds	r0, r2, r1
 8006290:	42a0      	cmp	r0, r4
 8006292:	d10b      	bne.n	80062ac <_free_r+0x6c>
 8006294:	6820      	ldr	r0, [r4, #0]
 8006296:	4401      	add	r1, r0
 8006298:	1850      	adds	r0, r2, r1
 800629a:	4283      	cmp	r3, r0
 800629c:	6011      	str	r1, [r2, #0]
 800629e:	d1e0      	bne.n	8006262 <_free_r+0x22>
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	4408      	add	r0, r1
 80062a6:	6010      	str	r0, [r2, #0]
 80062a8:	6053      	str	r3, [r2, #4]
 80062aa:	e7da      	b.n	8006262 <_free_r+0x22>
 80062ac:	d902      	bls.n	80062b4 <_free_r+0x74>
 80062ae:	230c      	movs	r3, #12
 80062b0:	602b      	str	r3, [r5, #0]
 80062b2:	e7d6      	b.n	8006262 <_free_r+0x22>
 80062b4:	6820      	ldr	r0, [r4, #0]
 80062b6:	1821      	adds	r1, r4, r0
 80062b8:	428b      	cmp	r3, r1
 80062ba:	bf01      	itttt	eq
 80062bc:	6819      	ldreq	r1, [r3, #0]
 80062be:	685b      	ldreq	r3, [r3, #4]
 80062c0:	1809      	addeq	r1, r1, r0
 80062c2:	6021      	streq	r1, [r4, #0]
 80062c4:	6063      	str	r3, [r4, #4]
 80062c6:	6054      	str	r4, [r2, #4]
 80062c8:	e7cb      	b.n	8006262 <_free_r+0x22>
 80062ca:	bd38      	pop	{r3, r4, r5, pc}
 80062cc:	200003bc 	.word	0x200003bc

080062d0 <malloc>:
 80062d0:	4b02      	ldr	r3, [pc, #8]	@ (80062dc <malloc+0xc>)
 80062d2:	4601      	mov	r1, r0
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f000 b825 	b.w	8006324 <_malloc_r>
 80062da:	bf00      	nop
 80062dc:	20000018 	.word	0x20000018

080062e0 <sbrk_aligned>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	4e0f      	ldr	r6, [pc, #60]	@ (8006320 <sbrk_aligned+0x40>)
 80062e4:	460c      	mov	r4, r1
 80062e6:	6831      	ldr	r1, [r6, #0]
 80062e8:	4605      	mov	r5, r0
 80062ea:	b911      	cbnz	r1, 80062f2 <sbrk_aligned+0x12>
 80062ec:	f001 fdee 	bl	8007ecc <_sbrk_r>
 80062f0:	6030      	str	r0, [r6, #0]
 80062f2:	4621      	mov	r1, r4
 80062f4:	4628      	mov	r0, r5
 80062f6:	f001 fde9 	bl	8007ecc <_sbrk_r>
 80062fa:	1c43      	adds	r3, r0, #1
 80062fc:	d103      	bne.n	8006306 <sbrk_aligned+0x26>
 80062fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006302:	4620      	mov	r0, r4
 8006304:	bd70      	pop	{r4, r5, r6, pc}
 8006306:	1cc4      	adds	r4, r0, #3
 8006308:	f024 0403 	bic.w	r4, r4, #3
 800630c:	42a0      	cmp	r0, r4
 800630e:	d0f8      	beq.n	8006302 <sbrk_aligned+0x22>
 8006310:	1a21      	subs	r1, r4, r0
 8006312:	4628      	mov	r0, r5
 8006314:	f001 fdda 	bl	8007ecc <_sbrk_r>
 8006318:	3001      	adds	r0, #1
 800631a:	d1f2      	bne.n	8006302 <sbrk_aligned+0x22>
 800631c:	e7ef      	b.n	80062fe <sbrk_aligned+0x1e>
 800631e:	bf00      	nop
 8006320:	200003b8 	.word	0x200003b8

08006324 <_malloc_r>:
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006328:	1ccd      	adds	r5, r1, #3
 800632a:	f025 0503 	bic.w	r5, r5, #3
 800632e:	3508      	adds	r5, #8
 8006330:	2d0c      	cmp	r5, #12
 8006332:	bf38      	it	cc
 8006334:	250c      	movcc	r5, #12
 8006336:	2d00      	cmp	r5, #0
 8006338:	4606      	mov	r6, r0
 800633a:	db01      	blt.n	8006340 <_malloc_r+0x1c>
 800633c:	42a9      	cmp	r1, r5
 800633e:	d904      	bls.n	800634a <_malloc_r+0x26>
 8006340:	230c      	movs	r3, #12
 8006342:	6033      	str	r3, [r6, #0]
 8006344:	2000      	movs	r0, #0
 8006346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006420 <_malloc_r+0xfc>
 800634e:	f000 f869 	bl	8006424 <__malloc_lock>
 8006352:	f8d8 3000 	ldr.w	r3, [r8]
 8006356:	461c      	mov	r4, r3
 8006358:	bb44      	cbnz	r4, 80063ac <_malloc_r+0x88>
 800635a:	4629      	mov	r1, r5
 800635c:	4630      	mov	r0, r6
 800635e:	f7ff ffbf 	bl	80062e0 <sbrk_aligned>
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	4604      	mov	r4, r0
 8006366:	d158      	bne.n	800641a <_malloc_r+0xf6>
 8006368:	f8d8 4000 	ldr.w	r4, [r8]
 800636c:	4627      	mov	r7, r4
 800636e:	2f00      	cmp	r7, #0
 8006370:	d143      	bne.n	80063fa <_malloc_r+0xd6>
 8006372:	2c00      	cmp	r4, #0
 8006374:	d04b      	beq.n	800640e <_malloc_r+0xea>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	4639      	mov	r1, r7
 800637a:	4630      	mov	r0, r6
 800637c:	eb04 0903 	add.w	r9, r4, r3
 8006380:	f001 fda4 	bl	8007ecc <_sbrk_r>
 8006384:	4581      	cmp	r9, r0
 8006386:	d142      	bne.n	800640e <_malloc_r+0xea>
 8006388:	6821      	ldr	r1, [r4, #0]
 800638a:	4630      	mov	r0, r6
 800638c:	1a6d      	subs	r5, r5, r1
 800638e:	4629      	mov	r1, r5
 8006390:	f7ff ffa6 	bl	80062e0 <sbrk_aligned>
 8006394:	3001      	adds	r0, #1
 8006396:	d03a      	beq.n	800640e <_malloc_r+0xea>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	442b      	add	r3, r5
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	f8d8 3000 	ldr.w	r3, [r8]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	bb62      	cbnz	r2, 8006400 <_malloc_r+0xdc>
 80063a6:	f8c8 7000 	str.w	r7, [r8]
 80063aa:	e00f      	b.n	80063cc <_malloc_r+0xa8>
 80063ac:	6822      	ldr	r2, [r4, #0]
 80063ae:	1b52      	subs	r2, r2, r5
 80063b0:	d420      	bmi.n	80063f4 <_malloc_r+0xd0>
 80063b2:	2a0b      	cmp	r2, #11
 80063b4:	d917      	bls.n	80063e6 <_malloc_r+0xc2>
 80063b6:	1961      	adds	r1, r4, r5
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	6025      	str	r5, [r4, #0]
 80063bc:	bf18      	it	ne
 80063be:	6059      	strne	r1, [r3, #4]
 80063c0:	6863      	ldr	r3, [r4, #4]
 80063c2:	bf08      	it	eq
 80063c4:	f8c8 1000 	streq.w	r1, [r8]
 80063c8:	5162      	str	r2, [r4, r5]
 80063ca:	604b      	str	r3, [r1, #4]
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 f82f 	bl	8006430 <__malloc_unlock>
 80063d2:	f104 000b 	add.w	r0, r4, #11
 80063d6:	1d23      	adds	r3, r4, #4
 80063d8:	f020 0007 	bic.w	r0, r0, #7
 80063dc:	1ac2      	subs	r2, r0, r3
 80063de:	bf1c      	itt	ne
 80063e0:	1a1b      	subne	r3, r3, r0
 80063e2:	50a3      	strne	r3, [r4, r2]
 80063e4:	e7af      	b.n	8006346 <_malloc_r+0x22>
 80063e6:	6862      	ldr	r2, [r4, #4]
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	bf0c      	ite	eq
 80063ec:	f8c8 2000 	streq.w	r2, [r8]
 80063f0:	605a      	strne	r2, [r3, #4]
 80063f2:	e7eb      	b.n	80063cc <_malloc_r+0xa8>
 80063f4:	4623      	mov	r3, r4
 80063f6:	6864      	ldr	r4, [r4, #4]
 80063f8:	e7ae      	b.n	8006358 <_malloc_r+0x34>
 80063fa:	463c      	mov	r4, r7
 80063fc:	687f      	ldr	r7, [r7, #4]
 80063fe:	e7b6      	b.n	800636e <_malloc_r+0x4a>
 8006400:	461a      	mov	r2, r3
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	42a3      	cmp	r3, r4
 8006406:	d1fb      	bne.n	8006400 <_malloc_r+0xdc>
 8006408:	2300      	movs	r3, #0
 800640a:	6053      	str	r3, [r2, #4]
 800640c:	e7de      	b.n	80063cc <_malloc_r+0xa8>
 800640e:	230c      	movs	r3, #12
 8006410:	4630      	mov	r0, r6
 8006412:	6033      	str	r3, [r6, #0]
 8006414:	f000 f80c 	bl	8006430 <__malloc_unlock>
 8006418:	e794      	b.n	8006344 <_malloc_r+0x20>
 800641a:	6005      	str	r5, [r0, #0]
 800641c:	e7d6      	b.n	80063cc <_malloc_r+0xa8>
 800641e:	bf00      	nop
 8006420:	200003bc 	.word	0x200003bc

08006424 <__malloc_lock>:
 8006424:	4801      	ldr	r0, [pc, #4]	@ (800642c <__malloc_lock+0x8>)
 8006426:	f7ff b89a 	b.w	800555e <__retarget_lock_acquire_recursive>
 800642a:	bf00      	nop
 800642c:	200003b4 	.word	0x200003b4

08006430 <__malloc_unlock>:
 8006430:	4801      	ldr	r0, [pc, #4]	@ (8006438 <__malloc_unlock+0x8>)
 8006432:	f7ff b895 	b.w	8005560 <__retarget_lock_release_recursive>
 8006436:	bf00      	nop
 8006438:	200003b4 	.word	0x200003b4

0800643c <_Balloc>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	69c6      	ldr	r6, [r0, #28]
 8006440:	4604      	mov	r4, r0
 8006442:	460d      	mov	r5, r1
 8006444:	b976      	cbnz	r6, 8006464 <_Balloc+0x28>
 8006446:	2010      	movs	r0, #16
 8006448:	f7ff ff42 	bl	80062d0 <malloc>
 800644c:	4602      	mov	r2, r0
 800644e:	61e0      	str	r0, [r4, #28]
 8006450:	b920      	cbnz	r0, 800645c <_Balloc+0x20>
 8006452:	216b      	movs	r1, #107	@ 0x6b
 8006454:	4b17      	ldr	r3, [pc, #92]	@ (80064b4 <_Balloc+0x78>)
 8006456:	4818      	ldr	r0, [pc, #96]	@ (80064b8 <_Balloc+0x7c>)
 8006458:	f001 fd5c 	bl	8007f14 <__assert_func>
 800645c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006460:	6006      	str	r6, [r0, #0]
 8006462:	60c6      	str	r6, [r0, #12]
 8006464:	69e6      	ldr	r6, [r4, #28]
 8006466:	68f3      	ldr	r3, [r6, #12]
 8006468:	b183      	cbz	r3, 800648c <_Balloc+0x50>
 800646a:	69e3      	ldr	r3, [r4, #28]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006472:	b9b8      	cbnz	r0, 80064a4 <_Balloc+0x68>
 8006474:	2101      	movs	r1, #1
 8006476:	fa01 f605 	lsl.w	r6, r1, r5
 800647a:	1d72      	adds	r2, r6, #5
 800647c:	4620      	mov	r0, r4
 800647e:	0092      	lsls	r2, r2, #2
 8006480:	f001 fd66 	bl	8007f50 <_calloc_r>
 8006484:	b160      	cbz	r0, 80064a0 <_Balloc+0x64>
 8006486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800648a:	e00e      	b.n	80064aa <_Balloc+0x6e>
 800648c:	2221      	movs	r2, #33	@ 0x21
 800648e:	2104      	movs	r1, #4
 8006490:	4620      	mov	r0, r4
 8006492:	f001 fd5d 	bl	8007f50 <_calloc_r>
 8006496:	69e3      	ldr	r3, [r4, #28]
 8006498:	60f0      	str	r0, [r6, #12]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e4      	bne.n	800646a <_Balloc+0x2e>
 80064a0:	2000      	movs	r0, #0
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	6802      	ldr	r2, [r0, #0]
 80064a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064aa:	2300      	movs	r3, #0
 80064ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064b0:	e7f7      	b.n	80064a2 <_Balloc+0x66>
 80064b2:	bf00      	nop
 80064b4:	08008d22 	.word	0x08008d22
 80064b8:	08008da2 	.word	0x08008da2

080064bc <_Bfree>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	69c6      	ldr	r6, [r0, #28]
 80064c0:	4605      	mov	r5, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	b976      	cbnz	r6, 80064e4 <_Bfree+0x28>
 80064c6:	2010      	movs	r0, #16
 80064c8:	f7ff ff02 	bl	80062d0 <malloc>
 80064cc:	4602      	mov	r2, r0
 80064ce:	61e8      	str	r0, [r5, #28]
 80064d0:	b920      	cbnz	r0, 80064dc <_Bfree+0x20>
 80064d2:	218f      	movs	r1, #143	@ 0x8f
 80064d4:	4b08      	ldr	r3, [pc, #32]	@ (80064f8 <_Bfree+0x3c>)
 80064d6:	4809      	ldr	r0, [pc, #36]	@ (80064fc <_Bfree+0x40>)
 80064d8:	f001 fd1c 	bl	8007f14 <__assert_func>
 80064dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064e0:	6006      	str	r6, [r0, #0]
 80064e2:	60c6      	str	r6, [r0, #12]
 80064e4:	b13c      	cbz	r4, 80064f6 <_Bfree+0x3a>
 80064e6:	69eb      	ldr	r3, [r5, #28]
 80064e8:	6862      	ldr	r2, [r4, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064f0:	6021      	str	r1, [r4, #0]
 80064f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	08008d22 	.word	0x08008d22
 80064fc:	08008da2 	.word	0x08008da2

08006500 <__multadd>:
 8006500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006504:	4607      	mov	r7, r0
 8006506:	460c      	mov	r4, r1
 8006508:	461e      	mov	r6, r3
 800650a:	2000      	movs	r0, #0
 800650c:	690d      	ldr	r5, [r1, #16]
 800650e:	f101 0c14 	add.w	ip, r1, #20
 8006512:	f8dc 3000 	ldr.w	r3, [ip]
 8006516:	3001      	adds	r0, #1
 8006518:	b299      	uxth	r1, r3
 800651a:	fb02 6101 	mla	r1, r2, r1, r6
 800651e:	0c1e      	lsrs	r6, r3, #16
 8006520:	0c0b      	lsrs	r3, r1, #16
 8006522:	fb02 3306 	mla	r3, r2, r6, r3
 8006526:	b289      	uxth	r1, r1
 8006528:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800652c:	4285      	cmp	r5, r0
 800652e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006532:	f84c 1b04 	str.w	r1, [ip], #4
 8006536:	dcec      	bgt.n	8006512 <__multadd+0x12>
 8006538:	b30e      	cbz	r6, 800657e <__multadd+0x7e>
 800653a:	68a3      	ldr	r3, [r4, #8]
 800653c:	42ab      	cmp	r3, r5
 800653e:	dc19      	bgt.n	8006574 <__multadd+0x74>
 8006540:	6861      	ldr	r1, [r4, #4]
 8006542:	4638      	mov	r0, r7
 8006544:	3101      	adds	r1, #1
 8006546:	f7ff ff79 	bl	800643c <_Balloc>
 800654a:	4680      	mov	r8, r0
 800654c:	b928      	cbnz	r0, 800655a <__multadd+0x5a>
 800654e:	4602      	mov	r2, r0
 8006550:	21ba      	movs	r1, #186	@ 0xba
 8006552:	4b0c      	ldr	r3, [pc, #48]	@ (8006584 <__multadd+0x84>)
 8006554:	480c      	ldr	r0, [pc, #48]	@ (8006588 <__multadd+0x88>)
 8006556:	f001 fcdd 	bl	8007f14 <__assert_func>
 800655a:	6922      	ldr	r2, [r4, #16]
 800655c:	f104 010c 	add.w	r1, r4, #12
 8006560:	3202      	adds	r2, #2
 8006562:	0092      	lsls	r2, r2, #2
 8006564:	300c      	adds	r0, #12
 8006566:	f001 fcc1 	bl	8007eec <memcpy>
 800656a:	4621      	mov	r1, r4
 800656c:	4638      	mov	r0, r7
 800656e:	f7ff ffa5 	bl	80064bc <_Bfree>
 8006572:	4644      	mov	r4, r8
 8006574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006578:	3501      	adds	r5, #1
 800657a:	615e      	str	r6, [r3, #20]
 800657c:	6125      	str	r5, [r4, #16]
 800657e:	4620      	mov	r0, r4
 8006580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006584:	08008d91 	.word	0x08008d91
 8006588:	08008da2 	.word	0x08008da2

0800658c <__s2b>:
 800658c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006590:	4615      	mov	r5, r2
 8006592:	2209      	movs	r2, #9
 8006594:	461f      	mov	r7, r3
 8006596:	3308      	adds	r3, #8
 8006598:	460c      	mov	r4, r1
 800659a:	fb93 f3f2 	sdiv	r3, r3, r2
 800659e:	4606      	mov	r6, r0
 80065a0:	2201      	movs	r2, #1
 80065a2:	2100      	movs	r1, #0
 80065a4:	429a      	cmp	r2, r3
 80065a6:	db09      	blt.n	80065bc <__s2b+0x30>
 80065a8:	4630      	mov	r0, r6
 80065aa:	f7ff ff47 	bl	800643c <_Balloc>
 80065ae:	b940      	cbnz	r0, 80065c2 <__s2b+0x36>
 80065b0:	4602      	mov	r2, r0
 80065b2:	21d3      	movs	r1, #211	@ 0xd3
 80065b4:	4b18      	ldr	r3, [pc, #96]	@ (8006618 <__s2b+0x8c>)
 80065b6:	4819      	ldr	r0, [pc, #100]	@ (800661c <__s2b+0x90>)
 80065b8:	f001 fcac 	bl	8007f14 <__assert_func>
 80065bc:	0052      	lsls	r2, r2, #1
 80065be:	3101      	adds	r1, #1
 80065c0:	e7f0      	b.n	80065a4 <__s2b+0x18>
 80065c2:	9b08      	ldr	r3, [sp, #32]
 80065c4:	2d09      	cmp	r5, #9
 80065c6:	6143      	str	r3, [r0, #20]
 80065c8:	f04f 0301 	mov.w	r3, #1
 80065cc:	6103      	str	r3, [r0, #16]
 80065ce:	dd16      	ble.n	80065fe <__s2b+0x72>
 80065d0:	f104 0909 	add.w	r9, r4, #9
 80065d4:	46c8      	mov	r8, r9
 80065d6:	442c      	add	r4, r5
 80065d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80065dc:	4601      	mov	r1, r0
 80065de:	220a      	movs	r2, #10
 80065e0:	4630      	mov	r0, r6
 80065e2:	3b30      	subs	r3, #48	@ 0x30
 80065e4:	f7ff ff8c 	bl	8006500 <__multadd>
 80065e8:	45a0      	cmp	r8, r4
 80065ea:	d1f5      	bne.n	80065d8 <__s2b+0x4c>
 80065ec:	f1a5 0408 	sub.w	r4, r5, #8
 80065f0:	444c      	add	r4, r9
 80065f2:	1b2d      	subs	r5, r5, r4
 80065f4:	1963      	adds	r3, r4, r5
 80065f6:	42bb      	cmp	r3, r7
 80065f8:	db04      	blt.n	8006604 <__s2b+0x78>
 80065fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065fe:	2509      	movs	r5, #9
 8006600:	340a      	adds	r4, #10
 8006602:	e7f6      	b.n	80065f2 <__s2b+0x66>
 8006604:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006608:	4601      	mov	r1, r0
 800660a:	220a      	movs	r2, #10
 800660c:	4630      	mov	r0, r6
 800660e:	3b30      	subs	r3, #48	@ 0x30
 8006610:	f7ff ff76 	bl	8006500 <__multadd>
 8006614:	e7ee      	b.n	80065f4 <__s2b+0x68>
 8006616:	bf00      	nop
 8006618:	08008d91 	.word	0x08008d91
 800661c:	08008da2 	.word	0x08008da2

08006620 <__hi0bits>:
 8006620:	4603      	mov	r3, r0
 8006622:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006626:	bf3a      	itte	cc
 8006628:	0403      	lslcc	r3, r0, #16
 800662a:	2010      	movcc	r0, #16
 800662c:	2000      	movcs	r0, #0
 800662e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006632:	bf3c      	itt	cc
 8006634:	021b      	lslcc	r3, r3, #8
 8006636:	3008      	addcc	r0, #8
 8006638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800663c:	bf3c      	itt	cc
 800663e:	011b      	lslcc	r3, r3, #4
 8006640:	3004      	addcc	r0, #4
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006646:	bf3c      	itt	cc
 8006648:	009b      	lslcc	r3, r3, #2
 800664a:	3002      	addcc	r0, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	db05      	blt.n	800665c <__hi0bits+0x3c>
 8006650:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006654:	f100 0001 	add.w	r0, r0, #1
 8006658:	bf08      	it	eq
 800665a:	2020      	moveq	r0, #32
 800665c:	4770      	bx	lr

0800665e <__lo0bits>:
 800665e:	6803      	ldr	r3, [r0, #0]
 8006660:	4602      	mov	r2, r0
 8006662:	f013 0007 	ands.w	r0, r3, #7
 8006666:	d00b      	beq.n	8006680 <__lo0bits+0x22>
 8006668:	07d9      	lsls	r1, r3, #31
 800666a:	d421      	bmi.n	80066b0 <__lo0bits+0x52>
 800666c:	0798      	lsls	r0, r3, #30
 800666e:	bf49      	itett	mi
 8006670:	085b      	lsrmi	r3, r3, #1
 8006672:	089b      	lsrpl	r3, r3, #2
 8006674:	2001      	movmi	r0, #1
 8006676:	6013      	strmi	r3, [r2, #0]
 8006678:	bf5c      	itt	pl
 800667a:	2002      	movpl	r0, #2
 800667c:	6013      	strpl	r3, [r2, #0]
 800667e:	4770      	bx	lr
 8006680:	b299      	uxth	r1, r3
 8006682:	b909      	cbnz	r1, 8006688 <__lo0bits+0x2a>
 8006684:	2010      	movs	r0, #16
 8006686:	0c1b      	lsrs	r3, r3, #16
 8006688:	b2d9      	uxtb	r1, r3
 800668a:	b909      	cbnz	r1, 8006690 <__lo0bits+0x32>
 800668c:	3008      	adds	r0, #8
 800668e:	0a1b      	lsrs	r3, r3, #8
 8006690:	0719      	lsls	r1, r3, #28
 8006692:	bf04      	itt	eq
 8006694:	091b      	lsreq	r3, r3, #4
 8006696:	3004      	addeq	r0, #4
 8006698:	0799      	lsls	r1, r3, #30
 800669a:	bf04      	itt	eq
 800669c:	089b      	lsreq	r3, r3, #2
 800669e:	3002      	addeq	r0, #2
 80066a0:	07d9      	lsls	r1, r3, #31
 80066a2:	d403      	bmi.n	80066ac <__lo0bits+0x4e>
 80066a4:	085b      	lsrs	r3, r3, #1
 80066a6:	f100 0001 	add.w	r0, r0, #1
 80066aa:	d003      	beq.n	80066b4 <__lo0bits+0x56>
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	4770      	bx	lr
 80066b0:	2000      	movs	r0, #0
 80066b2:	4770      	bx	lr
 80066b4:	2020      	movs	r0, #32
 80066b6:	4770      	bx	lr

080066b8 <__i2b>:
 80066b8:	b510      	push	{r4, lr}
 80066ba:	460c      	mov	r4, r1
 80066bc:	2101      	movs	r1, #1
 80066be:	f7ff febd 	bl	800643c <_Balloc>
 80066c2:	4602      	mov	r2, r0
 80066c4:	b928      	cbnz	r0, 80066d2 <__i2b+0x1a>
 80066c6:	f240 1145 	movw	r1, #325	@ 0x145
 80066ca:	4b04      	ldr	r3, [pc, #16]	@ (80066dc <__i2b+0x24>)
 80066cc:	4804      	ldr	r0, [pc, #16]	@ (80066e0 <__i2b+0x28>)
 80066ce:	f001 fc21 	bl	8007f14 <__assert_func>
 80066d2:	2301      	movs	r3, #1
 80066d4:	6144      	str	r4, [r0, #20]
 80066d6:	6103      	str	r3, [r0, #16]
 80066d8:	bd10      	pop	{r4, pc}
 80066da:	bf00      	nop
 80066dc:	08008d91 	.word	0x08008d91
 80066e0:	08008da2 	.word	0x08008da2

080066e4 <__multiply>:
 80066e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e8:	4617      	mov	r7, r2
 80066ea:	690a      	ldr	r2, [r1, #16]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	4689      	mov	r9, r1
 80066f0:	429a      	cmp	r2, r3
 80066f2:	bfa2      	ittt	ge
 80066f4:	463b      	movge	r3, r7
 80066f6:	460f      	movge	r7, r1
 80066f8:	4699      	movge	r9, r3
 80066fa:	693d      	ldr	r5, [r7, #16]
 80066fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	eb05 060a 	add.w	r6, r5, sl
 8006708:	42b3      	cmp	r3, r6
 800670a:	b085      	sub	sp, #20
 800670c:	bfb8      	it	lt
 800670e:	3101      	addlt	r1, #1
 8006710:	f7ff fe94 	bl	800643c <_Balloc>
 8006714:	b930      	cbnz	r0, 8006724 <__multiply+0x40>
 8006716:	4602      	mov	r2, r0
 8006718:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800671c:	4b40      	ldr	r3, [pc, #256]	@ (8006820 <__multiply+0x13c>)
 800671e:	4841      	ldr	r0, [pc, #260]	@ (8006824 <__multiply+0x140>)
 8006720:	f001 fbf8 	bl	8007f14 <__assert_func>
 8006724:	f100 0414 	add.w	r4, r0, #20
 8006728:	4623      	mov	r3, r4
 800672a:	2200      	movs	r2, #0
 800672c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006730:	4573      	cmp	r3, lr
 8006732:	d320      	bcc.n	8006776 <__multiply+0x92>
 8006734:	f107 0814 	add.w	r8, r7, #20
 8006738:	f109 0114 	add.w	r1, r9, #20
 800673c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006740:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006744:	9302      	str	r3, [sp, #8]
 8006746:	1beb      	subs	r3, r5, r7
 8006748:	3b15      	subs	r3, #21
 800674a:	f023 0303 	bic.w	r3, r3, #3
 800674e:	3304      	adds	r3, #4
 8006750:	3715      	adds	r7, #21
 8006752:	42bd      	cmp	r5, r7
 8006754:	bf38      	it	cc
 8006756:	2304      	movcc	r3, #4
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	9b02      	ldr	r3, [sp, #8]
 800675c:	9103      	str	r1, [sp, #12]
 800675e:	428b      	cmp	r3, r1
 8006760:	d80c      	bhi.n	800677c <__multiply+0x98>
 8006762:	2e00      	cmp	r6, #0
 8006764:	dd03      	ble.n	800676e <__multiply+0x8a>
 8006766:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800676a:	2b00      	cmp	r3, #0
 800676c:	d055      	beq.n	800681a <__multiply+0x136>
 800676e:	6106      	str	r6, [r0, #16]
 8006770:	b005      	add	sp, #20
 8006772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006776:	f843 2b04 	str.w	r2, [r3], #4
 800677a:	e7d9      	b.n	8006730 <__multiply+0x4c>
 800677c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006780:	f1ba 0f00 	cmp.w	sl, #0
 8006784:	d01f      	beq.n	80067c6 <__multiply+0xe2>
 8006786:	46c4      	mov	ip, r8
 8006788:	46a1      	mov	r9, r4
 800678a:	2700      	movs	r7, #0
 800678c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006790:	f8d9 3000 	ldr.w	r3, [r9]
 8006794:	fa1f fb82 	uxth.w	fp, r2
 8006798:	b29b      	uxth	r3, r3
 800679a:	fb0a 330b 	mla	r3, sl, fp, r3
 800679e:	443b      	add	r3, r7
 80067a0:	f8d9 7000 	ldr.w	r7, [r9]
 80067a4:	0c12      	lsrs	r2, r2, #16
 80067a6:	0c3f      	lsrs	r7, r7, #16
 80067a8:	fb0a 7202 	mla	r2, sl, r2, r7
 80067ac:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067b6:	4565      	cmp	r5, ip
 80067b8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80067bc:	f849 3b04 	str.w	r3, [r9], #4
 80067c0:	d8e4      	bhi.n	800678c <__multiply+0xa8>
 80067c2:	9b01      	ldr	r3, [sp, #4]
 80067c4:	50e7      	str	r7, [r4, r3]
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	3104      	adds	r1, #4
 80067ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067ce:	f1b9 0f00 	cmp.w	r9, #0
 80067d2:	d020      	beq.n	8006816 <__multiply+0x132>
 80067d4:	4647      	mov	r7, r8
 80067d6:	46a4      	mov	ip, r4
 80067d8:	f04f 0a00 	mov.w	sl, #0
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	f8b7 b000 	ldrh.w	fp, [r7]
 80067e2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	fb09 220b 	mla	r2, r9, fp, r2
 80067ec:	4452      	add	r2, sl
 80067ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067f2:	f84c 3b04 	str.w	r3, [ip], #4
 80067f6:	f857 3b04 	ldr.w	r3, [r7], #4
 80067fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067fe:	f8bc 3000 	ldrh.w	r3, [ip]
 8006802:	42bd      	cmp	r5, r7
 8006804:	fb09 330a 	mla	r3, r9, sl, r3
 8006808:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800680c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006810:	d8e5      	bhi.n	80067de <__multiply+0xfa>
 8006812:	9a01      	ldr	r2, [sp, #4]
 8006814:	50a3      	str	r3, [r4, r2]
 8006816:	3404      	adds	r4, #4
 8006818:	e79f      	b.n	800675a <__multiply+0x76>
 800681a:	3e01      	subs	r6, #1
 800681c:	e7a1      	b.n	8006762 <__multiply+0x7e>
 800681e:	bf00      	nop
 8006820:	08008d91 	.word	0x08008d91
 8006824:	08008da2 	.word	0x08008da2

08006828 <__pow5mult>:
 8006828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800682c:	4615      	mov	r5, r2
 800682e:	f012 0203 	ands.w	r2, r2, #3
 8006832:	4607      	mov	r7, r0
 8006834:	460e      	mov	r6, r1
 8006836:	d007      	beq.n	8006848 <__pow5mult+0x20>
 8006838:	4c25      	ldr	r4, [pc, #148]	@ (80068d0 <__pow5mult+0xa8>)
 800683a:	3a01      	subs	r2, #1
 800683c:	2300      	movs	r3, #0
 800683e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006842:	f7ff fe5d 	bl	8006500 <__multadd>
 8006846:	4606      	mov	r6, r0
 8006848:	10ad      	asrs	r5, r5, #2
 800684a:	d03d      	beq.n	80068c8 <__pow5mult+0xa0>
 800684c:	69fc      	ldr	r4, [r7, #28]
 800684e:	b97c      	cbnz	r4, 8006870 <__pow5mult+0x48>
 8006850:	2010      	movs	r0, #16
 8006852:	f7ff fd3d 	bl	80062d0 <malloc>
 8006856:	4602      	mov	r2, r0
 8006858:	61f8      	str	r0, [r7, #28]
 800685a:	b928      	cbnz	r0, 8006868 <__pow5mult+0x40>
 800685c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006860:	4b1c      	ldr	r3, [pc, #112]	@ (80068d4 <__pow5mult+0xac>)
 8006862:	481d      	ldr	r0, [pc, #116]	@ (80068d8 <__pow5mult+0xb0>)
 8006864:	f001 fb56 	bl	8007f14 <__assert_func>
 8006868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800686c:	6004      	str	r4, [r0, #0]
 800686e:	60c4      	str	r4, [r0, #12]
 8006870:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006878:	b94c      	cbnz	r4, 800688e <__pow5mult+0x66>
 800687a:	f240 2171 	movw	r1, #625	@ 0x271
 800687e:	4638      	mov	r0, r7
 8006880:	f7ff ff1a 	bl	80066b8 <__i2b>
 8006884:	2300      	movs	r3, #0
 8006886:	4604      	mov	r4, r0
 8006888:	f8c8 0008 	str.w	r0, [r8, #8]
 800688c:	6003      	str	r3, [r0, #0]
 800688e:	f04f 0900 	mov.w	r9, #0
 8006892:	07eb      	lsls	r3, r5, #31
 8006894:	d50a      	bpl.n	80068ac <__pow5mult+0x84>
 8006896:	4631      	mov	r1, r6
 8006898:	4622      	mov	r2, r4
 800689a:	4638      	mov	r0, r7
 800689c:	f7ff ff22 	bl	80066e4 <__multiply>
 80068a0:	4680      	mov	r8, r0
 80068a2:	4631      	mov	r1, r6
 80068a4:	4638      	mov	r0, r7
 80068a6:	f7ff fe09 	bl	80064bc <_Bfree>
 80068aa:	4646      	mov	r6, r8
 80068ac:	106d      	asrs	r5, r5, #1
 80068ae:	d00b      	beq.n	80068c8 <__pow5mult+0xa0>
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	b938      	cbnz	r0, 80068c4 <__pow5mult+0x9c>
 80068b4:	4622      	mov	r2, r4
 80068b6:	4621      	mov	r1, r4
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff ff13 	bl	80066e4 <__multiply>
 80068be:	6020      	str	r0, [r4, #0]
 80068c0:	f8c0 9000 	str.w	r9, [r0]
 80068c4:	4604      	mov	r4, r0
 80068c6:	e7e4      	b.n	8006892 <__pow5mult+0x6a>
 80068c8:	4630      	mov	r0, r6
 80068ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ce:	bf00      	nop
 80068d0:	08008eb4 	.word	0x08008eb4
 80068d4:	08008d22 	.word	0x08008d22
 80068d8:	08008da2 	.word	0x08008da2

080068dc <__lshift>:
 80068dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	460c      	mov	r4, r1
 80068e2:	4607      	mov	r7, r0
 80068e4:	4691      	mov	r9, r2
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	6849      	ldr	r1, [r1, #4]
 80068ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068ee:	68a3      	ldr	r3, [r4, #8]
 80068f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068f4:	f108 0601 	add.w	r6, r8, #1
 80068f8:	42b3      	cmp	r3, r6
 80068fa:	db0b      	blt.n	8006914 <__lshift+0x38>
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7ff fd9d 	bl	800643c <_Balloc>
 8006902:	4605      	mov	r5, r0
 8006904:	b948      	cbnz	r0, 800691a <__lshift+0x3e>
 8006906:	4602      	mov	r2, r0
 8006908:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800690c:	4b27      	ldr	r3, [pc, #156]	@ (80069ac <__lshift+0xd0>)
 800690e:	4828      	ldr	r0, [pc, #160]	@ (80069b0 <__lshift+0xd4>)
 8006910:	f001 fb00 	bl	8007f14 <__assert_func>
 8006914:	3101      	adds	r1, #1
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	e7ee      	b.n	80068f8 <__lshift+0x1c>
 800691a:	2300      	movs	r3, #0
 800691c:	f100 0114 	add.w	r1, r0, #20
 8006920:	f100 0210 	add.w	r2, r0, #16
 8006924:	4618      	mov	r0, r3
 8006926:	4553      	cmp	r3, sl
 8006928:	db33      	blt.n	8006992 <__lshift+0xb6>
 800692a:	6920      	ldr	r0, [r4, #16]
 800692c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006930:	f104 0314 	add.w	r3, r4, #20
 8006934:	f019 091f 	ands.w	r9, r9, #31
 8006938:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800693c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006940:	d02b      	beq.n	800699a <__lshift+0xbe>
 8006942:	468a      	mov	sl, r1
 8006944:	2200      	movs	r2, #0
 8006946:	f1c9 0e20 	rsb	lr, r9, #32
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	fa00 f009 	lsl.w	r0, r0, r9
 8006950:	4310      	orrs	r0, r2
 8006952:	f84a 0b04 	str.w	r0, [sl], #4
 8006956:	f853 2b04 	ldr.w	r2, [r3], #4
 800695a:	459c      	cmp	ip, r3
 800695c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006960:	d8f3      	bhi.n	800694a <__lshift+0x6e>
 8006962:	ebac 0304 	sub.w	r3, ip, r4
 8006966:	3b15      	subs	r3, #21
 8006968:	f023 0303 	bic.w	r3, r3, #3
 800696c:	3304      	adds	r3, #4
 800696e:	f104 0015 	add.w	r0, r4, #21
 8006972:	4560      	cmp	r0, ip
 8006974:	bf88      	it	hi
 8006976:	2304      	movhi	r3, #4
 8006978:	50ca      	str	r2, [r1, r3]
 800697a:	b10a      	cbz	r2, 8006980 <__lshift+0xa4>
 800697c:	f108 0602 	add.w	r6, r8, #2
 8006980:	3e01      	subs	r6, #1
 8006982:	4638      	mov	r0, r7
 8006984:	4621      	mov	r1, r4
 8006986:	612e      	str	r6, [r5, #16]
 8006988:	f7ff fd98 	bl	80064bc <_Bfree>
 800698c:	4628      	mov	r0, r5
 800698e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006992:	f842 0f04 	str.w	r0, [r2, #4]!
 8006996:	3301      	adds	r3, #1
 8006998:	e7c5      	b.n	8006926 <__lshift+0x4a>
 800699a:	3904      	subs	r1, #4
 800699c:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a0:	459c      	cmp	ip, r3
 80069a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80069a6:	d8f9      	bhi.n	800699c <__lshift+0xc0>
 80069a8:	e7ea      	b.n	8006980 <__lshift+0xa4>
 80069aa:	bf00      	nop
 80069ac:	08008d91 	.word	0x08008d91
 80069b0:	08008da2 	.word	0x08008da2

080069b4 <__mcmp>:
 80069b4:	4603      	mov	r3, r0
 80069b6:	690a      	ldr	r2, [r1, #16]
 80069b8:	6900      	ldr	r0, [r0, #16]
 80069ba:	b530      	push	{r4, r5, lr}
 80069bc:	1a80      	subs	r0, r0, r2
 80069be:	d10e      	bne.n	80069de <__mcmp+0x2a>
 80069c0:	3314      	adds	r3, #20
 80069c2:	3114      	adds	r1, #20
 80069c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069d4:	4295      	cmp	r5, r2
 80069d6:	d003      	beq.n	80069e0 <__mcmp+0x2c>
 80069d8:	d205      	bcs.n	80069e6 <__mcmp+0x32>
 80069da:	f04f 30ff 	mov.w	r0, #4294967295
 80069de:	bd30      	pop	{r4, r5, pc}
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	d3f3      	bcc.n	80069cc <__mcmp+0x18>
 80069e4:	e7fb      	b.n	80069de <__mcmp+0x2a>
 80069e6:	2001      	movs	r0, #1
 80069e8:	e7f9      	b.n	80069de <__mcmp+0x2a>
	...

080069ec <__mdiff>:
 80069ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	4689      	mov	r9, r1
 80069f2:	4606      	mov	r6, r0
 80069f4:	4611      	mov	r1, r2
 80069f6:	4648      	mov	r0, r9
 80069f8:	4614      	mov	r4, r2
 80069fa:	f7ff ffdb 	bl	80069b4 <__mcmp>
 80069fe:	1e05      	subs	r5, r0, #0
 8006a00:	d112      	bne.n	8006a28 <__mdiff+0x3c>
 8006a02:	4629      	mov	r1, r5
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7ff fd19 	bl	800643c <_Balloc>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	b928      	cbnz	r0, 8006a1a <__mdiff+0x2e>
 8006a0e:	f240 2137 	movw	r1, #567	@ 0x237
 8006a12:	4b3e      	ldr	r3, [pc, #248]	@ (8006b0c <__mdiff+0x120>)
 8006a14:	483e      	ldr	r0, [pc, #248]	@ (8006b10 <__mdiff+0x124>)
 8006a16:	f001 fa7d 	bl	8007f14 <__assert_func>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a20:	4610      	mov	r0, r2
 8006a22:	b003      	add	sp, #12
 8006a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a28:	bfbc      	itt	lt
 8006a2a:	464b      	movlt	r3, r9
 8006a2c:	46a1      	movlt	r9, r4
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a34:	bfba      	itte	lt
 8006a36:	461c      	movlt	r4, r3
 8006a38:	2501      	movlt	r5, #1
 8006a3a:	2500      	movge	r5, #0
 8006a3c:	f7ff fcfe 	bl	800643c <_Balloc>
 8006a40:	4602      	mov	r2, r0
 8006a42:	b918      	cbnz	r0, 8006a4c <__mdiff+0x60>
 8006a44:	f240 2145 	movw	r1, #581	@ 0x245
 8006a48:	4b30      	ldr	r3, [pc, #192]	@ (8006b0c <__mdiff+0x120>)
 8006a4a:	e7e3      	b.n	8006a14 <__mdiff+0x28>
 8006a4c:	f100 0b14 	add.w	fp, r0, #20
 8006a50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a54:	f109 0310 	add.w	r3, r9, #16
 8006a58:	60c5      	str	r5, [r0, #12]
 8006a5a:	f04f 0c00 	mov.w	ip, #0
 8006a5e:	f109 0514 	add.w	r5, r9, #20
 8006a62:	46d9      	mov	r9, fp
 8006a64:	6926      	ldr	r6, [r4, #16]
 8006a66:	f104 0e14 	add.w	lr, r4, #20
 8006a6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a7e:	b281      	uxth	r1, r0
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	fa1f f38a 	uxth.w	r3, sl
 8006a86:	1a5b      	subs	r3, r3, r1
 8006a88:	0c00      	lsrs	r0, r0, #16
 8006a8a:	4463      	add	r3, ip
 8006a8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a9a:	4576      	cmp	r6, lr
 8006a9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006aa0:	f849 3b04 	str.w	r3, [r9], #4
 8006aa4:	d8e6      	bhi.n	8006a74 <__mdiff+0x88>
 8006aa6:	1b33      	subs	r3, r6, r4
 8006aa8:	3b15      	subs	r3, #21
 8006aaa:	f023 0303 	bic.w	r3, r3, #3
 8006aae:	3415      	adds	r4, #21
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	42a6      	cmp	r6, r4
 8006ab4:	bf38      	it	cc
 8006ab6:	2304      	movcc	r3, #4
 8006ab8:	441d      	add	r5, r3
 8006aba:	445b      	add	r3, fp
 8006abc:	461e      	mov	r6, r3
 8006abe:	462c      	mov	r4, r5
 8006ac0:	4544      	cmp	r4, r8
 8006ac2:	d30e      	bcc.n	8006ae2 <__mdiff+0xf6>
 8006ac4:	f108 0103 	add.w	r1, r8, #3
 8006ac8:	1b49      	subs	r1, r1, r5
 8006aca:	f021 0103 	bic.w	r1, r1, #3
 8006ace:	3d03      	subs	r5, #3
 8006ad0:	45a8      	cmp	r8, r5
 8006ad2:	bf38      	it	cc
 8006ad4:	2100      	movcc	r1, #0
 8006ad6:	440b      	add	r3, r1
 8006ad8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006adc:	b199      	cbz	r1, 8006b06 <__mdiff+0x11a>
 8006ade:	6117      	str	r7, [r2, #16]
 8006ae0:	e79e      	b.n	8006a20 <__mdiff+0x34>
 8006ae2:	46e6      	mov	lr, ip
 8006ae4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ae8:	fa1f fc81 	uxth.w	ip, r1
 8006aec:	44f4      	add	ip, lr
 8006aee:	0c08      	lsrs	r0, r1, #16
 8006af0:	4471      	add	r1, lr
 8006af2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006af6:	b289      	uxth	r1, r1
 8006af8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006afc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b00:	f846 1b04 	str.w	r1, [r6], #4
 8006b04:	e7dc      	b.n	8006ac0 <__mdiff+0xd4>
 8006b06:	3f01      	subs	r7, #1
 8006b08:	e7e6      	b.n	8006ad8 <__mdiff+0xec>
 8006b0a:	bf00      	nop
 8006b0c:	08008d91 	.word	0x08008d91
 8006b10:	08008da2 	.word	0x08008da2

08006b14 <__ulp>:
 8006b14:	4b0e      	ldr	r3, [pc, #56]	@ (8006b50 <__ulp+0x3c>)
 8006b16:	400b      	ands	r3, r1
 8006b18:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	dc08      	bgt.n	8006b32 <__ulp+0x1e>
 8006b20:	425b      	negs	r3, r3
 8006b22:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006b26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b2a:	da04      	bge.n	8006b36 <__ulp+0x22>
 8006b2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006b30:	4113      	asrs	r3, r2
 8006b32:	2200      	movs	r2, #0
 8006b34:	e008      	b.n	8006b48 <__ulp+0x34>
 8006b36:	f1a2 0314 	sub.w	r3, r2, #20
 8006b3a:	2b1e      	cmp	r3, #30
 8006b3c:	bfd6      	itet	le
 8006b3e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006b42:	2201      	movgt	r2, #1
 8006b44:	40da      	lsrle	r2, r3
 8006b46:	2300      	movs	r3, #0
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	7ff00000 	.word	0x7ff00000

08006b54 <__b2d>:
 8006b54:	6902      	ldr	r2, [r0, #16]
 8006b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b58:	f100 0614 	add.w	r6, r0, #20
 8006b5c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006b60:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006b64:	4f1e      	ldr	r7, [pc, #120]	@ (8006be0 <__b2d+0x8c>)
 8006b66:	4620      	mov	r0, r4
 8006b68:	f7ff fd5a 	bl	8006620 <__hi0bits>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f1c0 0020 	rsb	r0, r0, #32
 8006b72:	2b0a      	cmp	r3, #10
 8006b74:	f1a2 0504 	sub.w	r5, r2, #4
 8006b78:	6008      	str	r0, [r1, #0]
 8006b7a:	dc12      	bgt.n	8006ba2 <__b2d+0x4e>
 8006b7c:	42ae      	cmp	r6, r5
 8006b7e:	bf2c      	ite	cs
 8006b80:	2200      	movcs	r2, #0
 8006b82:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006b86:	f1c3 0c0b 	rsb	ip, r3, #11
 8006b8a:	3315      	adds	r3, #21
 8006b8c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006b90:	fa04 f303 	lsl.w	r3, r4, r3
 8006b94:	fa22 f20c 	lsr.w	r2, r2, ip
 8006b98:	ea4e 0107 	orr.w	r1, lr, r7
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba2:	42ae      	cmp	r6, r5
 8006ba4:	bf36      	itet	cc
 8006ba6:	f1a2 0508 	subcc.w	r5, r2, #8
 8006baa:	2200      	movcs	r2, #0
 8006bac:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006bb0:	3b0b      	subs	r3, #11
 8006bb2:	d012      	beq.n	8006bda <__b2d+0x86>
 8006bb4:	f1c3 0720 	rsb	r7, r3, #32
 8006bb8:	fa22 f107 	lsr.w	r1, r2, r7
 8006bbc:	409c      	lsls	r4, r3
 8006bbe:	430c      	orrs	r4, r1
 8006bc0:	42b5      	cmp	r5, r6
 8006bc2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006bc6:	bf94      	ite	ls
 8006bc8:	2400      	movls	r4, #0
 8006bca:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006bce:	409a      	lsls	r2, r3
 8006bd0:	40fc      	lsrs	r4, r7
 8006bd2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006bd6:	4322      	orrs	r2, r4
 8006bd8:	e7e1      	b.n	8006b9e <__b2d+0x4a>
 8006bda:	ea44 0107 	orr.w	r1, r4, r7
 8006bde:	e7de      	b.n	8006b9e <__b2d+0x4a>
 8006be0:	3ff00000 	.word	0x3ff00000

08006be4 <__d2b>:
 8006be4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006be8:	2101      	movs	r1, #1
 8006bea:	4690      	mov	r8, r2
 8006bec:	4699      	mov	r9, r3
 8006bee:	9e08      	ldr	r6, [sp, #32]
 8006bf0:	f7ff fc24 	bl	800643c <_Balloc>
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	b930      	cbnz	r0, 8006c06 <__d2b+0x22>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bfe:	4b23      	ldr	r3, [pc, #140]	@ (8006c8c <__d2b+0xa8>)
 8006c00:	4823      	ldr	r0, [pc, #140]	@ (8006c90 <__d2b+0xac>)
 8006c02:	f001 f987 	bl	8007f14 <__assert_func>
 8006c06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c0e:	b10d      	cbz	r5, 8006c14 <__d2b+0x30>
 8006c10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	f1b8 0300 	subs.w	r3, r8, #0
 8006c1a:	d024      	beq.n	8006c66 <__d2b+0x82>
 8006c1c:	4668      	mov	r0, sp
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	f7ff fd1d 	bl	800665e <__lo0bits>
 8006c24:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c28:	b1d8      	cbz	r0, 8006c62 <__d2b+0x7e>
 8006c2a:	f1c0 0320 	rsb	r3, r0, #32
 8006c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c32:	430b      	orrs	r3, r1
 8006c34:	40c2      	lsrs	r2, r0
 8006c36:	6163      	str	r3, [r4, #20]
 8006c38:	9201      	str	r2, [sp, #4]
 8006c3a:	9b01      	ldr	r3, [sp, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	bf0c      	ite	eq
 8006c40:	2201      	moveq	r2, #1
 8006c42:	2202      	movne	r2, #2
 8006c44:	61a3      	str	r3, [r4, #24]
 8006c46:	6122      	str	r2, [r4, #16]
 8006c48:	b1ad      	cbz	r5, 8006c76 <__d2b+0x92>
 8006c4a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c4e:	4405      	add	r5, r0
 8006c50:	6035      	str	r5, [r6, #0]
 8006c52:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c58:	6018      	str	r0, [r3, #0]
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	b002      	add	sp, #8
 8006c5e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006c62:	6161      	str	r1, [r4, #20]
 8006c64:	e7e9      	b.n	8006c3a <__d2b+0x56>
 8006c66:	a801      	add	r0, sp, #4
 8006c68:	f7ff fcf9 	bl	800665e <__lo0bits>
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	6163      	str	r3, [r4, #20]
 8006c72:	3020      	adds	r0, #32
 8006c74:	e7e7      	b.n	8006c46 <__d2b+0x62>
 8006c76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c7e:	6030      	str	r0, [r6, #0]
 8006c80:	6918      	ldr	r0, [r3, #16]
 8006c82:	f7ff fccd 	bl	8006620 <__hi0bits>
 8006c86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c8a:	e7e4      	b.n	8006c56 <__d2b+0x72>
 8006c8c:	08008d91 	.word	0x08008d91
 8006c90:	08008da2 	.word	0x08008da2

08006c94 <__ratio>:
 8006c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	e9cd 1000 	strd	r1, r0, [sp]
 8006c9e:	a902      	add	r1, sp, #8
 8006ca0:	f7ff ff58 	bl	8006b54 <__b2d>
 8006ca4:	468b      	mov	fp, r1
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	460f      	mov	r7, r1
 8006caa:	9800      	ldr	r0, [sp, #0]
 8006cac:	a903      	add	r1, sp, #12
 8006cae:	f7ff ff51 	bl	8006b54 <__b2d>
 8006cb2:	460d      	mov	r5, r1
 8006cb4:	9b01      	ldr	r3, [sp, #4]
 8006cb6:	4689      	mov	r9, r1
 8006cb8:	6919      	ldr	r1, [r3, #16]
 8006cba:	9b00      	ldr	r3, [sp, #0]
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	1ac9      	subs	r1, r1, r3
 8006cc4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bfcd      	iteet	gt
 8006cd2:	463a      	movgt	r2, r7
 8006cd4:	462a      	movle	r2, r5
 8006cd6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006cda:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006cde:	bfd8      	it	le
 8006ce0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	4659      	mov	r1, fp
 8006cea:	f7f9 fd1f 	bl	800072c <__aeabi_ddiv>
 8006cee:	b005      	add	sp, #20
 8006cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006cf4 <__copybits>:
 8006cf4:	3901      	subs	r1, #1
 8006cf6:	b570      	push	{r4, r5, r6, lr}
 8006cf8:	1149      	asrs	r1, r1, #5
 8006cfa:	6914      	ldr	r4, [r2, #16]
 8006cfc:	3101      	adds	r1, #1
 8006cfe:	f102 0314 	add.w	r3, r2, #20
 8006d02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d0a:	1f05      	subs	r5, r0, #4
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	d30c      	bcc.n	8006d2a <__copybits+0x36>
 8006d10:	1aa3      	subs	r3, r4, r2
 8006d12:	3b11      	subs	r3, #17
 8006d14:	f023 0303 	bic.w	r3, r3, #3
 8006d18:	3211      	adds	r2, #17
 8006d1a:	42a2      	cmp	r2, r4
 8006d1c:	bf88      	it	hi
 8006d1e:	2300      	movhi	r3, #0
 8006d20:	4418      	add	r0, r3
 8006d22:	2300      	movs	r3, #0
 8006d24:	4288      	cmp	r0, r1
 8006d26:	d305      	bcc.n	8006d34 <__copybits+0x40>
 8006d28:	bd70      	pop	{r4, r5, r6, pc}
 8006d2a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d2e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d32:	e7eb      	b.n	8006d0c <__copybits+0x18>
 8006d34:	f840 3b04 	str.w	r3, [r0], #4
 8006d38:	e7f4      	b.n	8006d24 <__copybits+0x30>

08006d3a <__any_on>:
 8006d3a:	f100 0214 	add.w	r2, r0, #20
 8006d3e:	6900      	ldr	r0, [r0, #16]
 8006d40:	114b      	asrs	r3, r1, #5
 8006d42:	4298      	cmp	r0, r3
 8006d44:	b510      	push	{r4, lr}
 8006d46:	db11      	blt.n	8006d6c <__any_on+0x32>
 8006d48:	dd0a      	ble.n	8006d60 <__any_on+0x26>
 8006d4a:	f011 011f 	ands.w	r1, r1, #31
 8006d4e:	d007      	beq.n	8006d60 <__any_on+0x26>
 8006d50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d54:	fa24 f001 	lsr.w	r0, r4, r1
 8006d58:	fa00 f101 	lsl.w	r1, r0, r1
 8006d5c:	428c      	cmp	r4, r1
 8006d5e:	d10b      	bne.n	8006d78 <__any_on+0x3e>
 8006d60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d803      	bhi.n	8006d70 <__any_on+0x36>
 8006d68:	2000      	movs	r0, #0
 8006d6a:	bd10      	pop	{r4, pc}
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	e7f7      	b.n	8006d60 <__any_on+0x26>
 8006d70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d74:	2900      	cmp	r1, #0
 8006d76:	d0f5      	beq.n	8006d64 <__any_on+0x2a>
 8006d78:	2001      	movs	r0, #1
 8006d7a:	e7f6      	b.n	8006d6a <__any_on+0x30>

08006d7c <sulp>:
 8006d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d80:	460f      	mov	r7, r1
 8006d82:	4690      	mov	r8, r2
 8006d84:	f7ff fec6 	bl	8006b14 <__ulp>
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	f1b8 0f00 	cmp.w	r8, #0
 8006d90:	d011      	beq.n	8006db6 <sulp+0x3a>
 8006d92:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006d96:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dd0b      	ble.n	8006db6 <sulp+0x3a>
 8006d9e:	2400      	movs	r4, #0
 8006da0:	051b      	lsls	r3, r3, #20
 8006da2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006da6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006daa:	4622      	mov	r2, r4
 8006dac:	462b      	mov	r3, r5
 8006dae:	f7f9 fb93 	bl	80004d8 <__aeabi_dmul>
 8006db2:	4604      	mov	r4, r0
 8006db4:	460d      	mov	r5, r1
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006dc0 <_strtod_l>:
 8006dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	b09f      	sub	sp, #124	@ 0x7c
 8006dc6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006dc8:	2200      	movs	r2, #0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	921a      	str	r2, [sp, #104]	@ 0x68
 8006dce:	f04f 0a00 	mov.w	sl, #0
 8006dd2:	f04f 0b00 	mov.w	fp, #0
 8006dd6:	460a      	mov	r2, r1
 8006dd8:	9005      	str	r0, [sp, #20]
 8006dda:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ddc:	7811      	ldrb	r1, [r2, #0]
 8006dde:	292b      	cmp	r1, #43	@ 0x2b
 8006de0:	d048      	beq.n	8006e74 <_strtod_l+0xb4>
 8006de2:	d836      	bhi.n	8006e52 <_strtod_l+0x92>
 8006de4:	290d      	cmp	r1, #13
 8006de6:	d830      	bhi.n	8006e4a <_strtod_l+0x8a>
 8006de8:	2908      	cmp	r1, #8
 8006dea:	d830      	bhi.n	8006e4e <_strtod_l+0x8e>
 8006dec:	2900      	cmp	r1, #0
 8006dee:	d039      	beq.n	8006e64 <_strtod_l+0xa4>
 8006df0:	2200      	movs	r2, #0
 8006df2:	920e      	str	r2, [sp, #56]	@ 0x38
 8006df4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006df6:	782a      	ldrb	r2, [r5, #0]
 8006df8:	2a30      	cmp	r2, #48	@ 0x30
 8006dfa:	f040 80b0 	bne.w	8006f5e <_strtod_l+0x19e>
 8006dfe:	786a      	ldrb	r2, [r5, #1]
 8006e00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006e04:	2a58      	cmp	r2, #88	@ 0x58
 8006e06:	d16c      	bne.n	8006ee2 <_strtod_l+0x122>
 8006e08:	9302      	str	r3, [sp, #8]
 8006e0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e0c:	4a8f      	ldr	r2, [pc, #572]	@ (800704c <_strtod_l+0x28c>)
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	ab1a      	add	r3, sp, #104	@ 0x68
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	9805      	ldr	r0, [sp, #20]
 8006e16:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006e18:	a919      	add	r1, sp, #100	@ 0x64
 8006e1a:	f001 f915 	bl	8008048 <__gethex>
 8006e1e:	f010 060f 	ands.w	r6, r0, #15
 8006e22:	4604      	mov	r4, r0
 8006e24:	d005      	beq.n	8006e32 <_strtod_l+0x72>
 8006e26:	2e06      	cmp	r6, #6
 8006e28:	d126      	bne.n	8006e78 <_strtod_l+0xb8>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006e30:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 8582 	bne.w	800793e <_strtod_l+0xb7e>
 8006e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e3c:	b1bb      	cbz	r3, 8006e6e <_strtod_l+0xae>
 8006e3e:	4650      	mov	r0, sl
 8006e40:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006e44:	b01f      	add	sp, #124	@ 0x7c
 8006e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4a:	2920      	cmp	r1, #32
 8006e4c:	d1d0      	bne.n	8006df0 <_strtod_l+0x30>
 8006e4e:	3201      	adds	r2, #1
 8006e50:	e7c3      	b.n	8006dda <_strtod_l+0x1a>
 8006e52:	292d      	cmp	r1, #45	@ 0x2d
 8006e54:	d1cc      	bne.n	8006df0 <_strtod_l+0x30>
 8006e56:	2101      	movs	r1, #1
 8006e58:	910e      	str	r1, [sp, #56]	@ 0x38
 8006e5a:	1c51      	adds	r1, r2, #1
 8006e5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e5e:	7852      	ldrb	r2, [r2, #1]
 8006e60:	2a00      	cmp	r2, #0
 8006e62:	d1c7      	bne.n	8006df4 <_strtod_l+0x34>
 8006e64:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e66:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f040 8566 	bne.w	800793a <_strtod_l+0xb7a>
 8006e6e:	4650      	mov	r0, sl
 8006e70:	4659      	mov	r1, fp
 8006e72:	e7e7      	b.n	8006e44 <_strtod_l+0x84>
 8006e74:	2100      	movs	r1, #0
 8006e76:	e7ef      	b.n	8006e58 <_strtod_l+0x98>
 8006e78:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e7a:	b13a      	cbz	r2, 8006e8c <_strtod_l+0xcc>
 8006e7c:	2135      	movs	r1, #53	@ 0x35
 8006e7e:	a81c      	add	r0, sp, #112	@ 0x70
 8006e80:	f7ff ff38 	bl	8006cf4 <__copybits>
 8006e84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e86:	9805      	ldr	r0, [sp, #20]
 8006e88:	f7ff fb18 	bl	80064bc <_Bfree>
 8006e8c:	3e01      	subs	r6, #1
 8006e8e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006e90:	2e04      	cmp	r6, #4
 8006e92:	d806      	bhi.n	8006ea2 <_strtod_l+0xe2>
 8006e94:	e8df f006 	tbb	[pc, r6]
 8006e98:	201d0314 	.word	0x201d0314
 8006e9c:	14          	.byte	0x14
 8006e9d:	00          	.byte	0x00
 8006e9e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006ea2:	05e1      	lsls	r1, r4, #23
 8006ea4:	bf48      	it	mi
 8006ea6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006eaa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006eae:	0d1b      	lsrs	r3, r3, #20
 8006eb0:	051b      	lsls	r3, r3, #20
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1bd      	bne.n	8006e32 <_strtod_l+0x72>
 8006eb6:	f7fe fb27 	bl	8005508 <__errno>
 8006eba:	2322      	movs	r3, #34	@ 0x22
 8006ebc:	6003      	str	r3, [r0, #0]
 8006ebe:	e7b8      	b.n	8006e32 <_strtod_l+0x72>
 8006ec0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006ec4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006ec8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ecc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006ed0:	e7e7      	b.n	8006ea2 <_strtod_l+0xe2>
 8006ed2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007050 <_strtod_l+0x290>
 8006ed6:	e7e4      	b.n	8006ea2 <_strtod_l+0xe2>
 8006ed8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006edc:	f04f 3aff 	mov.w	sl, #4294967295
 8006ee0:	e7df      	b.n	8006ea2 <_strtod_l+0xe2>
 8006ee2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	2b30      	cmp	r3, #48	@ 0x30
 8006eec:	d0f9      	beq.n	8006ee2 <_strtod_l+0x122>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d09f      	beq.n	8006e32 <_strtod_l+0x72>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	2700      	movs	r7, #0
 8006ef6:	220a      	movs	r2, #10
 8006ef8:	46b9      	mov	r9, r7
 8006efa:	9308      	str	r3, [sp, #32]
 8006efc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006efe:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006f00:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f02:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006f04:	7805      	ldrb	r5, [r0, #0]
 8006f06:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006f0a:	b2d9      	uxtb	r1, r3
 8006f0c:	2909      	cmp	r1, #9
 8006f0e:	d928      	bls.n	8006f62 <_strtod_l+0x1a2>
 8006f10:	2201      	movs	r2, #1
 8006f12:	4950      	ldr	r1, [pc, #320]	@ (8007054 <_strtod_l+0x294>)
 8006f14:	f000 ffc8 	bl	8007ea8 <strncmp>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d032      	beq.n	8006f82 <_strtod_l+0x1c2>
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4603      	mov	r3, r0
 8006f22:	464d      	mov	r5, r9
 8006f24:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f26:	2a65      	cmp	r2, #101	@ 0x65
 8006f28:	d001      	beq.n	8006f2e <_strtod_l+0x16e>
 8006f2a:	2a45      	cmp	r2, #69	@ 0x45
 8006f2c:	d114      	bne.n	8006f58 <_strtod_l+0x198>
 8006f2e:	b91d      	cbnz	r5, 8006f38 <_strtod_l+0x178>
 8006f30:	9a08      	ldr	r2, [sp, #32]
 8006f32:	4302      	orrs	r2, r0
 8006f34:	d096      	beq.n	8006e64 <_strtod_l+0xa4>
 8006f36:	2500      	movs	r5, #0
 8006f38:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006f3a:	1c62      	adds	r2, r4, #1
 8006f3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f3e:	7862      	ldrb	r2, [r4, #1]
 8006f40:	2a2b      	cmp	r2, #43	@ 0x2b
 8006f42:	d07a      	beq.n	800703a <_strtod_l+0x27a>
 8006f44:	2a2d      	cmp	r2, #45	@ 0x2d
 8006f46:	d07e      	beq.n	8007046 <_strtod_l+0x286>
 8006f48:	f04f 0c00 	mov.w	ip, #0
 8006f4c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006f50:	2909      	cmp	r1, #9
 8006f52:	f240 8085 	bls.w	8007060 <_strtod_l+0x2a0>
 8006f56:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f58:	f04f 0800 	mov.w	r8, #0
 8006f5c:	e0a5      	b.n	80070aa <_strtod_l+0x2ea>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e7c8      	b.n	8006ef4 <_strtod_l+0x134>
 8006f62:	f1b9 0f08 	cmp.w	r9, #8
 8006f66:	bfd8      	it	le
 8006f68:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006f6a:	f100 0001 	add.w	r0, r0, #1
 8006f6e:	bfd6      	itet	le
 8006f70:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f74:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006f78:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006f7a:	f109 0901 	add.w	r9, r9, #1
 8006f7e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f80:	e7bf      	b.n	8006f02 <_strtod_l+0x142>
 8006f82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f88:	785a      	ldrb	r2, [r3, #1]
 8006f8a:	f1b9 0f00 	cmp.w	r9, #0
 8006f8e:	d03b      	beq.n	8007008 <_strtod_l+0x248>
 8006f90:	464d      	mov	r5, r9
 8006f92:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f94:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006f98:	2b09      	cmp	r3, #9
 8006f9a:	d912      	bls.n	8006fc2 <_strtod_l+0x202>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e7c2      	b.n	8006f26 <_strtod_l+0x166>
 8006fa0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fa8:	785a      	ldrb	r2, [r3, #1]
 8006faa:	2a30      	cmp	r2, #48	@ 0x30
 8006fac:	d0f8      	beq.n	8006fa0 <_strtod_l+0x1e0>
 8006fae:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	f200 84c8 	bhi.w	8007948 <_strtod_l+0xb88>
 8006fb8:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fba:	2000      	movs	r0, #0
 8006fbc:	4605      	mov	r5, r0
 8006fbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fc2:	3a30      	subs	r2, #48	@ 0x30
 8006fc4:	f100 0301 	add.w	r3, r0, #1
 8006fc8:	d018      	beq.n	8006ffc <_strtod_l+0x23c>
 8006fca:	462e      	mov	r6, r5
 8006fcc:	f04f 0e0a 	mov.w	lr, #10
 8006fd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fd2:	4419      	add	r1, r3
 8006fd4:	910a      	str	r1, [sp, #40]	@ 0x28
 8006fd6:	1c71      	adds	r1, r6, #1
 8006fd8:	eba1 0c05 	sub.w	ip, r1, r5
 8006fdc:	4563      	cmp	r3, ip
 8006fde:	dc15      	bgt.n	800700c <_strtod_l+0x24c>
 8006fe0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006fe4:	182b      	adds	r3, r5, r0
 8006fe6:	2b08      	cmp	r3, #8
 8006fe8:	f105 0501 	add.w	r5, r5, #1
 8006fec:	4405      	add	r5, r0
 8006fee:	dc1a      	bgt.n	8007026 <_strtod_l+0x266>
 8006ff0:	230a      	movs	r3, #10
 8006ff2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ff4:	fb03 2301 	mla	r3, r3, r1, r2
 8006ff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ffe:	4618      	mov	r0, r3
 8007000:	1c51      	adds	r1, r2, #1
 8007002:	9119      	str	r1, [sp, #100]	@ 0x64
 8007004:	7852      	ldrb	r2, [r2, #1]
 8007006:	e7c5      	b.n	8006f94 <_strtod_l+0x1d4>
 8007008:	4648      	mov	r0, r9
 800700a:	e7ce      	b.n	8006faa <_strtod_l+0x1ea>
 800700c:	2e08      	cmp	r6, #8
 800700e:	dc05      	bgt.n	800701c <_strtod_l+0x25c>
 8007010:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007012:	fb0e f606 	mul.w	r6, lr, r6
 8007016:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007018:	460e      	mov	r6, r1
 800701a:	e7dc      	b.n	8006fd6 <_strtod_l+0x216>
 800701c:	2910      	cmp	r1, #16
 800701e:	bfd8      	it	le
 8007020:	fb0e f707 	mulle.w	r7, lr, r7
 8007024:	e7f8      	b.n	8007018 <_strtod_l+0x258>
 8007026:	2b0f      	cmp	r3, #15
 8007028:	bfdc      	itt	le
 800702a:	230a      	movle	r3, #10
 800702c:	fb03 2707 	mlale	r7, r3, r7, r2
 8007030:	e7e3      	b.n	8006ffa <_strtod_l+0x23a>
 8007032:	2300      	movs	r3, #0
 8007034:	930a      	str	r3, [sp, #40]	@ 0x28
 8007036:	2301      	movs	r3, #1
 8007038:	e77a      	b.n	8006f30 <_strtod_l+0x170>
 800703a:	f04f 0c00 	mov.w	ip, #0
 800703e:	1ca2      	adds	r2, r4, #2
 8007040:	9219      	str	r2, [sp, #100]	@ 0x64
 8007042:	78a2      	ldrb	r2, [r4, #2]
 8007044:	e782      	b.n	8006f4c <_strtod_l+0x18c>
 8007046:	f04f 0c01 	mov.w	ip, #1
 800704a:	e7f8      	b.n	800703e <_strtod_l+0x27e>
 800704c:	08008fc4 	.word	0x08008fc4
 8007050:	7ff00000 	.word	0x7ff00000
 8007054:	08008dfb 	.word	0x08008dfb
 8007058:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800705a:	1c51      	adds	r1, r2, #1
 800705c:	9119      	str	r1, [sp, #100]	@ 0x64
 800705e:	7852      	ldrb	r2, [r2, #1]
 8007060:	2a30      	cmp	r2, #48	@ 0x30
 8007062:	d0f9      	beq.n	8007058 <_strtod_l+0x298>
 8007064:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007068:	2908      	cmp	r1, #8
 800706a:	f63f af75 	bhi.w	8006f58 <_strtod_l+0x198>
 800706e:	f04f 080a 	mov.w	r8, #10
 8007072:	3a30      	subs	r2, #48	@ 0x30
 8007074:	9209      	str	r2, [sp, #36]	@ 0x24
 8007076:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007078:	920f      	str	r2, [sp, #60]	@ 0x3c
 800707a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800707c:	1c56      	adds	r6, r2, #1
 800707e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007080:	7852      	ldrb	r2, [r2, #1]
 8007082:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007086:	f1be 0f09 	cmp.w	lr, #9
 800708a:	d939      	bls.n	8007100 <_strtod_l+0x340>
 800708c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800708e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007092:	1a76      	subs	r6, r6, r1
 8007094:	2e08      	cmp	r6, #8
 8007096:	dc03      	bgt.n	80070a0 <_strtod_l+0x2e0>
 8007098:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800709a:	4588      	cmp	r8, r1
 800709c:	bfa8      	it	ge
 800709e:	4688      	movge	r8, r1
 80070a0:	f1bc 0f00 	cmp.w	ip, #0
 80070a4:	d001      	beq.n	80070aa <_strtod_l+0x2ea>
 80070a6:	f1c8 0800 	rsb	r8, r8, #0
 80070aa:	2d00      	cmp	r5, #0
 80070ac:	d14e      	bne.n	800714c <_strtod_l+0x38c>
 80070ae:	9908      	ldr	r1, [sp, #32]
 80070b0:	4308      	orrs	r0, r1
 80070b2:	f47f aebe 	bne.w	8006e32 <_strtod_l+0x72>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f47f aed4 	bne.w	8006e64 <_strtod_l+0xa4>
 80070bc:	2a69      	cmp	r2, #105	@ 0x69
 80070be:	d028      	beq.n	8007112 <_strtod_l+0x352>
 80070c0:	dc25      	bgt.n	800710e <_strtod_l+0x34e>
 80070c2:	2a49      	cmp	r2, #73	@ 0x49
 80070c4:	d025      	beq.n	8007112 <_strtod_l+0x352>
 80070c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80070c8:	f47f aecc 	bne.w	8006e64 <_strtod_l+0xa4>
 80070cc:	4999      	ldr	r1, [pc, #612]	@ (8007334 <_strtod_l+0x574>)
 80070ce:	a819      	add	r0, sp, #100	@ 0x64
 80070d0:	f001 f9dc 	bl	800848c <__match>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f43f aec5 	beq.w	8006e64 <_strtod_l+0xa4>
 80070da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b28      	cmp	r3, #40	@ 0x28
 80070e0:	d12e      	bne.n	8007140 <_strtod_l+0x380>
 80070e2:	4995      	ldr	r1, [pc, #596]	@ (8007338 <_strtod_l+0x578>)
 80070e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80070e6:	a819      	add	r0, sp, #100	@ 0x64
 80070e8:	f001 f9e4 	bl	80084b4 <__hexnan>
 80070ec:	2805      	cmp	r0, #5
 80070ee:	d127      	bne.n	8007140 <_strtod_l+0x380>
 80070f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80070f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80070f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80070fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80070fe:	e698      	b.n	8006e32 <_strtod_l+0x72>
 8007100:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007102:	fb08 2101 	mla	r1, r8, r1, r2
 8007106:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800710a:	9209      	str	r2, [sp, #36]	@ 0x24
 800710c:	e7b5      	b.n	800707a <_strtod_l+0x2ba>
 800710e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007110:	e7da      	b.n	80070c8 <_strtod_l+0x308>
 8007112:	498a      	ldr	r1, [pc, #552]	@ (800733c <_strtod_l+0x57c>)
 8007114:	a819      	add	r0, sp, #100	@ 0x64
 8007116:	f001 f9b9 	bl	800848c <__match>
 800711a:	2800      	cmp	r0, #0
 800711c:	f43f aea2 	beq.w	8006e64 <_strtod_l+0xa4>
 8007120:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007122:	4987      	ldr	r1, [pc, #540]	@ (8007340 <_strtod_l+0x580>)
 8007124:	3b01      	subs	r3, #1
 8007126:	a819      	add	r0, sp, #100	@ 0x64
 8007128:	9319      	str	r3, [sp, #100]	@ 0x64
 800712a:	f001 f9af 	bl	800848c <__match>
 800712e:	b910      	cbnz	r0, 8007136 <_strtod_l+0x376>
 8007130:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007132:	3301      	adds	r3, #1
 8007134:	9319      	str	r3, [sp, #100]	@ 0x64
 8007136:	f04f 0a00 	mov.w	sl, #0
 800713a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007344 <_strtod_l+0x584>
 800713e:	e678      	b.n	8006e32 <_strtod_l+0x72>
 8007140:	4881      	ldr	r0, [pc, #516]	@ (8007348 <_strtod_l+0x588>)
 8007142:	f000 fee1 	bl	8007f08 <nan>
 8007146:	4682      	mov	sl, r0
 8007148:	468b      	mov	fp, r1
 800714a:	e672      	b.n	8006e32 <_strtod_l+0x72>
 800714c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800714e:	f1b9 0f00 	cmp.w	r9, #0
 8007152:	bf08      	it	eq
 8007154:	46a9      	moveq	r9, r5
 8007156:	eba8 0303 	sub.w	r3, r8, r3
 800715a:	2d10      	cmp	r5, #16
 800715c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800715e:	462c      	mov	r4, r5
 8007160:	9309      	str	r3, [sp, #36]	@ 0x24
 8007162:	bfa8      	it	ge
 8007164:	2410      	movge	r4, #16
 8007166:	f7f9 f93d 	bl	80003e4 <__aeabi_ui2d>
 800716a:	2d09      	cmp	r5, #9
 800716c:	4682      	mov	sl, r0
 800716e:	468b      	mov	fp, r1
 8007170:	dc11      	bgt.n	8007196 <_strtod_l+0x3d6>
 8007172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	f43f ae5c 	beq.w	8006e32 <_strtod_l+0x72>
 800717a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800717c:	dd76      	ble.n	800726c <_strtod_l+0x4ac>
 800717e:	2b16      	cmp	r3, #22
 8007180:	dc5d      	bgt.n	800723e <_strtod_l+0x47e>
 8007182:	4972      	ldr	r1, [pc, #456]	@ (800734c <_strtod_l+0x58c>)
 8007184:	4652      	mov	r2, sl
 8007186:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800718a:	465b      	mov	r3, fp
 800718c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007190:	f7f9 f9a2 	bl	80004d8 <__aeabi_dmul>
 8007194:	e7d7      	b.n	8007146 <_strtod_l+0x386>
 8007196:	4b6d      	ldr	r3, [pc, #436]	@ (800734c <_strtod_l+0x58c>)
 8007198:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800719c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80071a0:	f7f9 f99a 	bl	80004d8 <__aeabi_dmul>
 80071a4:	4682      	mov	sl, r0
 80071a6:	4638      	mov	r0, r7
 80071a8:	468b      	mov	fp, r1
 80071aa:	f7f9 f91b 	bl	80003e4 <__aeabi_ui2d>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4650      	mov	r0, sl
 80071b4:	4659      	mov	r1, fp
 80071b6:	f7f8 ffd9 	bl	800016c <__adddf3>
 80071ba:	2d0f      	cmp	r5, #15
 80071bc:	4682      	mov	sl, r0
 80071be:	468b      	mov	fp, r1
 80071c0:	ddd7      	ble.n	8007172 <_strtod_l+0x3b2>
 80071c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c4:	1b2c      	subs	r4, r5, r4
 80071c6:	441c      	add	r4, r3
 80071c8:	2c00      	cmp	r4, #0
 80071ca:	f340 8093 	ble.w	80072f4 <_strtod_l+0x534>
 80071ce:	f014 030f 	ands.w	r3, r4, #15
 80071d2:	d00a      	beq.n	80071ea <_strtod_l+0x42a>
 80071d4:	495d      	ldr	r1, [pc, #372]	@ (800734c <_strtod_l+0x58c>)
 80071d6:	4652      	mov	r2, sl
 80071d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071e0:	465b      	mov	r3, fp
 80071e2:	f7f9 f979 	bl	80004d8 <__aeabi_dmul>
 80071e6:	4682      	mov	sl, r0
 80071e8:	468b      	mov	fp, r1
 80071ea:	f034 040f 	bics.w	r4, r4, #15
 80071ee:	d073      	beq.n	80072d8 <_strtod_l+0x518>
 80071f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80071f4:	dd49      	ble.n	800728a <_strtod_l+0x4ca>
 80071f6:	2400      	movs	r4, #0
 80071f8:	46a0      	mov	r8, r4
 80071fa:	46a1      	mov	r9, r4
 80071fc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80071fe:	2322      	movs	r3, #34	@ 0x22
 8007200:	f04f 0a00 	mov.w	sl, #0
 8007204:	9a05      	ldr	r2, [sp, #20]
 8007206:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007344 <_strtod_l+0x584>
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800720e:	2b00      	cmp	r3, #0
 8007210:	f43f ae0f 	beq.w	8006e32 <_strtod_l+0x72>
 8007214:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007216:	9805      	ldr	r0, [sp, #20]
 8007218:	f7ff f950 	bl	80064bc <_Bfree>
 800721c:	4649      	mov	r1, r9
 800721e:	9805      	ldr	r0, [sp, #20]
 8007220:	f7ff f94c 	bl	80064bc <_Bfree>
 8007224:	4641      	mov	r1, r8
 8007226:	9805      	ldr	r0, [sp, #20]
 8007228:	f7ff f948 	bl	80064bc <_Bfree>
 800722c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800722e:	9805      	ldr	r0, [sp, #20]
 8007230:	f7ff f944 	bl	80064bc <_Bfree>
 8007234:	4621      	mov	r1, r4
 8007236:	9805      	ldr	r0, [sp, #20]
 8007238:	f7ff f940 	bl	80064bc <_Bfree>
 800723c:	e5f9      	b.n	8006e32 <_strtod_l+0x72>
 800723e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007240:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007244:	4293      	cmp	r3, r2
 8007246:	dbbc      	blt.n	80071c2 <_strtod_l+0x402>
 8007248:	4c40      	ldr	r4, [pc, #256]	@ (800734c <_strtod_l+0x58c>)
 800724a:	f1c5 050f 	rsb	r5, r5, #15
 800724e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007252:	4652      	mov	r2, sl
 8007254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007258:	465b      	mov	r3, fp
 800725a:	f7f9 f93d 	bl	80004d8 <__aeabi_dmul>
 800725e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007260:	1b5d      	subs	r5, r3, r5
 8007262:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007266:	e9d4 2300 	ldrd	r2, r3, [r4]
 800726a:	e791      	b.n	8007190 <_strtod_l+0x3d0>
 800726c:	3316      	adds	r3, #22
 800726e:	dba8      	blt.n	80071c2 <_strtod_l+0x402>
 8007270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007272:	4650      	mov	r0, sl
 8007274:	eba3 0808 	sub.w	r8, r3, r8
 8007278:	4b34      	ldr	r3, [pc, #208]	@ (800734c <_strtod_l+0x58c>)
 800727a:	4659      	mov	r1, fp
 800727c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007280:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007284:	f7f9 fa52 	bl	800072c <__aeabi_ddiv>
 8007288:	e75d      	b.n	8007146 <_strtod_l+0x386>
 800728a:	2300      	movs	r3, #0
 800728c:	4650      	mov	r0, sl
 800728e:	4659      	mov	r1, fp
 8007290:	461e      	mov	r6, r3
 8007292:	4f2f      	ldr	r7, [pc, #188]	@ (8007350 <_strtod_l+0x590>)
 8007294:	1124      	asrs	r4, r4, #4
 8007296:	2c01      	cmp	r4, #1
 8007298:	dc21      	bgt.n	80072de <_strtod_l+0x51e>
 800729a:	b10b      	cbz	r3, 80072a0 <_strtod_l+0x4e0>
 800729c:	4682      	mov	sl, r0
 800729e:	468b      	mov	fp, r1
 80072a0:	492b      	ldr	r1, [pc, #172]	@ (8007350 <_strtod_l+0x590>)
 80072a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80072a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80072aa:	4652      	mov	r2, sl
 80072ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072b0:	465b      	mov	r3, fp
 80072b2:	f7f9 f911 	bl	80004d8 <__aeabi_dmul>
 80072b6:	4b23      	ldr	r3, [pc, #140]	@ (8007344 <_strtod_l+0x584>)
 80072b8:	460a      	mov	r2, r1
 80072ba:	400b      	ands	r3, r1
 80072bc:	4925      	ldr	r1, [pc, #148]	@ (8007354 <_strtod_l+0x594>)
 80072be:	4682      	mov	sl, r0
 80072c0:	428b      	cmp	r3, r1
 80072c2:	d898      	bhi.n	80071f6 <_strtod_l+0x436>
 80072c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80072c8:	428b      	cmp	r3, r1
 80072ca:	bf86      	itte	hi
 80072cc:	f04f 3aff 	movhi.w	sl, #4294967295
 80072d0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007358 <_strtod_l+0x598>
 80072d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80072d8:	2300      	movs	r3, #0
 80072da:	9308      	str	r3, [sp, #32]
 80072dc:	e076      	b.n	80073cc <_strtod_l+0x60c>
 80072de:	07e2      	lsls	r2, r4, #31
 80072e0:	d504      	bpl.n	80072ec <_strtod_l+0x52c>
 80072e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e6:	f7f9 f8f7 	bl	80004d8 <__aeabi_dmul>
 80072ea:	2301      	movs	r3, #1
 80072ec:	3601      	adds	r6, #1
 80072ee:	1064      	asrs	r4, r4, #1
 80072f0:	3708      	adds	r7, #8
 80072f2:	e7d0      	b.n	8007296 <_strtod_l+0x4d6>
 80072f4:	d0f0      	beq.n	80072d8 <_strtod_l+0x518>
 80072f6:	4264      	negs	r4, r4
 80072f8:	f014 020f 	ands.w	r2, r4, #15
 80072fc:	d00a      	beq.n	8007314 <_strtod_l+0x554>
 80072fe:	4b13      	ldr	r3, [pc, #76]	@ (800734c <_strtod_l+0x58c>)
 8007300:	4650      	mov	r0, sl
 8007302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007306:	4659      	mov	r1, fp
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	f7f9 fa0e 	bl	800072c <__aeabi_ddiv>
 8007310:	4682      	mov	sl, r0
 8007312:	468b      	mov	fp, r1
 8007314:	1124      	asrs	r4, r4, #4
 8007316:	d0df      	beq.n	80072d8 <_strtod_l+0x518>
 8007318:	2c1f      	cmp	r4, #31
 800731a:	dd1f      	ble.n	800735c <_strtod_l+0x59c>
 800731c:	2400      	movs	r4, #0
 800731e:	46a0      	mov	r8, r4
 8007320:	46a1      	mov	r9, r4
 8007322:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007324:	2322      	movs	r3, #34	@ 0x22
 8007326:	9a05      	ldr	r2, [sp, #20]
 8007328:	f04f 0a00 	mov.w	sl, #0
 800732c:	f04f 0b00 	mov.w	fp, #0
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	e76b      	b.n	800720c <_strtod_l+0x44c>
 8007334:	08008ce9 	.word	0x08008ce9
 8007338:	08008fb0 	.word	0x08008fb0
 800733c:	08008ce1 	.word	0x08008ce1
 8007340:	08008d18 	.word	0x08008d18
 8007344:	7ff00000 	.word	0x7ff00000
 8007348:	08008e51 	.word	0x08008e51
 800734c:	08008ee8 	.word	0x08008ee8
 8007350:	08008ec0 	.word	0x08008ec0
 8007354:	7ca00000 	.word	0x7ca00000
 8007358:	7fefffff 	.word	0x7fefffff
 800735c:	f014 0310 	ands.w	r3, r4, #16
 8007360:	bf18      	it	ne
 8007362:	236a      	movne	r3, #106	@ 0x6a
 8007364:	4650      	mov	r0, sl
 8007366:	9308      	str	r3, [sp, #32]
 8007368:	4659      	mov	r1, fp
 800736a:	2300      	movs	r3, #0
 800736c:	4e77      	ldr	r6, [pc, #476]	@ (800754c <_strtod_l+0x78c>)
 800736e:	07e7      	lsls	r7, r4, #31
 8007370:	d504      	bpl.n	800737c <_strtod_l+0x5bc>
 8007372:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007376:	f7f9 f8af 	bl	80004d8 <__aeabi_dmul>
 800737a:	2301      	movs	r3, #1
 800737c:	1064      	asrs	r4, r4, #1
 800737e:	f106 0608 	add.w	r6, r6, #8
 8007382:	d1f4      	bne.n	800736e <_strtod_l+0x5ae>
 8007384:	b10b      	cbz	r3, 800738a <_strtod_l+0x5ca>
 8007386:	4682      	mov	sl, r0
 8007388:	468b      	mov	fp, r1
 800738a:	9b08      	ldr	r3, [sp, #32]
 800738c:	b1b3      	cbz	r3, 80073bc <_strtod_l+0x5fc>
 800738e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007392:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007396:	2b00      	cmp	r3, #0
 8007398:	4659      	mov	r1, fp
 800739a:	dd0f      	ble.n	80073bc <_strtod_l+0x5fc>
 800739c:	2b1f      	cmp	r3, #31
 800739e:	dd58      	ble.n	8007452 <_strtod_l+0x692>
 80073a0:	2b34      	cmp	r3, #52	@ 0x34
 80073a2:	bfd8      	it	le
 80073a4:	f04f 33ff 	movle.w	r3, #4294967295
 80073a8:	f04f 0a00 	mov.w	sl, #0
 80073ac:	bfcf      	iteee	gt
 80073ae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80073b2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80073b6:	4093      	lslle	r3, r2
 80073b8:	ea03 0b01 	andle.w	fp, r3, r1
 80073bc:	2200      	movs	r2, #0
 80073be:	2300      	movs	r3, #0
 80073c0:	4650      	mov	r0, sl
 80073c2:	4659      	mov	r1, fp
 80073c4:	f7f9 faf0 	bl	80009a8 <__aeabi_dcmpeq>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d1a7      	bne.n	800731c <_strtod_l+0x55c>
 80073cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073ce:	464a      	mov	r2, r9
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80073d4:	462b      	mov	r3, r5
 80073d6:	9805      	ldr	r0, [sp, #20]
 80073d8:	f7ff f8d8 	bl	800658c <__s2b>
 80073dc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80073de:	2800      	cmp	r0, #0
 80073e0:	f43f af09 	beq.w	80071f6 <_strtod_l+0x436>
 80073e4:	2400      	movs	r4, #0
 80073e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ea:	2a00      	cmp	r2, #0
 80073ec:	eba3 0308 	sub.w	r3, r3, r8
 80073f0:	bfa8      	it	ge
 80073f2:	2300      	movge	r3, #0
 80073f4:	46a0      	mov	r8, r4
 80073f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80073f8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80073fc:	9316      	str	r3, [sp, #88]	@ 0x58
 80073fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007400:	9805      	ldr	r0, [sp, #20]
 8007402:	6859      	ldr	r1, [r3, #4]
 8007404:	f7ff f81a 	bl	800643c <_Balloc>
 8007408:	4681      	mov	r9, r0
 800740a:	2800      	cmp	r0, #0
 800740c:	f43f aef7 	beq.w	80071fe <_strtod_l+0x43e>
 8007410:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007412:	300c      	adds	r0, #12
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	f103 010c 	add.w	r1, r3, #12
 800741a:	3202      	adds	r2, #2
 800741c:	0092      	lsls	r2, r2, #2
 800741e:	f000 fd65 	bl	8007eec <memcpy>
 8007422:	ab1c      	add	r3, sp, #112	@ 0x70
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	4652      	mov	r2, sl
 800742c:	465b      	mov	r3, fp
 800742e:	9805      	ldr	r0, [sp, #20]
 8007430:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007434:	f7ff fbd6 	bl	8006be4 <__d2b>
 8007438:	901a      	str	r0, [sp, #104]	@ 0x68
 800743a:	2800      	cmp	r0, #0
 800743c:	f43f aedf 	beq.w	80071fe <_strtod_l+0x43e>
 8007440:	2101      	movs	r1, #1
 8007442:	9805      	ldr	r0, [sp, #20]
 8007444:	f7ff f938 	bl	80066b8 <__i2b>
 8007448:	4680      	mov	r8, r0
 800744a:	b948      	cbnz	r0, 8007460 <_strtod_l+0x6a0>
 800744c:	f04f 0800 	mov.w	r8, #0
 8007450:	e6d5      	b.n	80071fe <_strtod_l+0x43e>
 8007452:	f04f 32ff 	mov.w	r2, #4294967295
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	ea03 0a0a 	and.w	sl, r3, sl
 800745e:	e7ad      	b.n	80073bc <_strtod_l+0x5fc>
 8007460:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007462:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007464:	2d00      	cmp	r5, #0
 8007466:	bfab      	itete	ge
 8007468:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800746a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800746c:	18ef      	addge	r7, r5, r3
 800746e:	1b5e      	sublt	r6, r3, r5
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	bfa8      	it	ge
 8007474:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007476:	eba5 0503 	sub.w	r5, r5, r3
 800747a:	4415      	add	r5, r2
 800747c:	4b34      	ldr	r3, [pc, #208]	@ (8007550 <_strtod_l+0x790>)
 800747e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007482:	bfb8      	it	lt
 8007484:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007486:	429d      	cmp	r5, r3
 8007488:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800748c:	da50      	bge.n	8007530 <_strtod_l+0x770>
 800748e:	1b5b      	subs	r3, r3, r5
 8007490:	2b1f      	cmp	r3, #31
 8007492:	f04f 0101 	mov.w	r1, #1
 8007496:	eba2 0203 	sub.w	r2, r2, r3
 800749a:	dc3d      	bgt.n	8007518 <_strtod_l+0x758>
 800749c:	fa01 f303 	lsl.w	r3, r1, r3
 80074a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074a2:	2300      	movs	r3, #0
 80074a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80074a6:	18bd      	adds	r5, r7, r2
 80074a8:	9b08      	ldr	r3, [sp, #32]
 80074aa:	42af      	cmp	r7, r5
 80074ac:	4416      	add	r6, r2
 80074ae:	441e      	add	r6, r3
 80074b0:	463b      	mov	r3, r7
 80074b2:	bfa8      	it	ge
 80074b4:	462b      	movge	r3, r5
 80074b6:	42b3      	cmp	r3, r6
 80074b8:	bfa8      	it	ge
 80074ba:	4633      	movge	r3, r6
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bfc2      	ittt	gt
 80074c0:	1aed      	subgt	r5, r5, r3
 80074c2:	1af6      	subgt	r6, r6, r3
 80074c4:	1aff      	subgt	r7, r7, r3
 80074c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	dd16      	ble.n	80074fa <_strtod_l+0x73a>
 80074cc:	4641      	mov	r1, r8
 80074ce:	461a      	mov	r2, r3
 80074d0:	9805      	ldr	r0, [sp, #20]
 80074d2:	f7ff f9a9 	bl	8006828 <__pow5mult>
 80074d6:	4680      	mov	r8, r0
 80074d8:	2800      	cmp	r0, #0
 80074da:	d0b7      	beq.n	800744c <_strtod_l+0x68c>
 80074dc:	4601      	mov	r1, r0
 80074de:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80074e0:	9805      	ldr	r0, [sp, #20]
 80074e2:	f7ff f8ff 	bl	80066e4 <__multiply>
 80074e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80074e8:	2800      	cmp	r0, #0
 80074ea:	f43f ae88 	beq.w	80071fe <_strtod_l+0x43e>
 80074ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074f0:	9805      	ldr	r0, [sp, #20]
 80074f2:	f7fe ffe3 	bl	80064bc <_Bfree>
 80074f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	dc1d      	bgt.n	800753a <_strtod_l+0x77a>
 80074fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	dd27      	ble.n	8007554 <_strtod_l+0x794>
 8007504:	4649      	mov	r1, r9
 8007506:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007508:	9805      	ldr	r0, [sp, #20]
 800750a:	f7ff f98d 	bl	8006828 <__pow5mult>
 800750e:	4681      	mov	r9, r0
 8007510:	bb00      	cbnz	r0, 8007554 <_strtod_l+0x794>
 8007512:	f04f 0900 	mov.w	r9, #0
 8007516:	e672      	b.n	80071fe <_strtod_l+0x43e>
 8007518:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800751c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007520:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007524:	35e2      	adds	r5, #226	@ 0xe2
 8007526:	fa01 f305 	lsl.w	r3, r1, r5
 800752a:	9310      	str	r3, [sp, #64]	@ 0x40
 800752c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800752e:	e7ba      	b.n	80074a6 <_strtod_l+0x6e6>
 8007530:	2300      	movs	r3, #0
 8007532:	9310      	str	r3, [sp, #64]	@ 0x40
 8007534:	2301      	movs	r3, #1
 8007536:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007538:	e7b5      	b.n	80074a6 <_strtod_l+0x6e6>
 800753a:	462a      	mov	r2, r5
 800753c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800753e:	9805      	ldr	r0, [sp, #20]
 8007540:	f7ff f9cc 	bl	80068dc <__lshift>
 8007544:	901a      	str	r0, [sp, #104]	@ 0x68
 8007546:	2800      	cmp	r0, #0
 8007548:	d1d9      	bne.n	80074fe <_strtod_l+0x73e>
 800754a:	e658      	b.n	80071fe <_strtod_l+0x43e>
 800754c:	08008fd8 	.word	0x08008fd8
 8007550:	fffffc02 	.word	0xfffffc02
 8007554:	2e00      	cmp	r6, #0
 8007556:	dd07      	ble.n	8007568 <_strtod_l+0x7a8>
 8007558:	4649      	mov	r1, r9
 800755a:	4632      	mov	r2, r6
 800755c:	9805      	ldr	r0, [sp, #20]
 800755e:	f7ff f9bd 	bl	80068dc <__lshift>
 8007562:	4681      	mov	r9, r0
 8007564:	2800      	cmp	r0, #0
 8007566:	d0d4      	beq.n	8007512 <_strtod_l+0x752>
 8007568:	2f00      	cmp	r7, #0
 800756a:	dd08      	ble.n	800757e <_strtod_l+0x7be>
 800756c:	4641      	mov	r1, r8
 800756e:	463a      	mov	r2, r7
 8007570:	9805      	ldr	r0, [sp, #20]
 8007572:	f7ff f9b3 	bl	80068dc <__lshift>
 8007576:	4680      	mov	r8, r0
 8007578:	2800      	cmp	r0, #0
 800757a:	f43f ae40 	beq.w	80071fe <_strtod_l+0x43e>
 800757e:	464a      	mov	r2, r9
 8007580:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007582:	9805      	ldr	r0, [sp, #20]
 8007584:	f7ff fa32 	bl	80069ec <__mdiff>
 8007588:	4604      	mov	r4, r0
 800758a:	2800      	cmp	r0, #0
 800758c:	f43f ae37 	beq.w	80071fe <_strtod_l+0x43e>
 8007590:	68c3      	ldr	r3, [r0, #12]
 8007592:	4641      	mov	r1, r8
 8007594:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007596:	2300      	movs	r3, #0
 8007598:	60c3      	str	r3, [r0, #12]
 800759a:	f7ff fa0b 	bl	80069b4 <__mcmp>
 800759e:	2800      	cmp	r0, #0
 80075a0:	da3d      	bge.n	800761e <_strtod_l+0x85e>
 80075a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075a4:	ea53 030a 	orrs.w	r3, r3, sl
 80075a8:	d163      	bne.n	8007672 <_strtod_l+0x8b2>
 80075aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d15f      	bne.n	8007672 <_strtod_l+0x8b2>
 80075b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075b6:	0d1b      	lsrs	r3, r3, #20
 80075b8:	051b      	lsls	r3, r3, #20
 80075ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80075be:	d958      	bls.n	8007672 <_strtod_l+0x8b2>
 80075c0:	6963      	ldr	r3, [r4, #20]
 80075c2:	b913      	cbnz	r3, 80075ca <_strtod_l+0x80a>
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	dd53      	ble.n	8007672 <_strtod_l+0x8b2>
 80075ca:	4621      	mov	r1, r4
 80075cc:	2201      	movs	r2, #1
 80075ce:	9805      	ldr	r0, [sp, #20]
 80075d0:	f7ff f984 	bl	80068dc <__lshift>
 80075d4:	4641      	mov	r1, r8
 80075d6:	4604      	mov	r4, r0
 80075d8:	f7ff f9ec 	bl	80069b4 <__mcmp>
 80075dc:	2800      	cmp	r0, #0
 80075de:	dd48      	ble.n	8007672 <_strtod_l+0x8b2>
 80075e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075e4:	9a08      	ldr	r2, [sp, #32]
 80075e6:	0d1b      	lsrs	r3, r3, #20
 80075e8:	051b      	lsls	r3, r3, #20
 80075ea:	2a00      	cmp	r2, #0
 80075ec:	d062      	beq.n	80076b4 <_strtod_l+0x8f4>
 80075ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80075f2:	d85f      	bhi.n	80076b4 <_strtod_l+0x8f4>
 80075f4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80075f8:	f67f ae94 	bls.w	8007324 <_strtod_l+0x564>
 80075fc:	4650      	mov	r0, sl
 80075fe:	4659      	mov	r1, fp
 8007600:	4ba3      	ldr	r3, [pc, #652]	@ (8007890 <_strtod_l+0xad0>)
 8007602:	2200      	movs	r2, #0
 8007604:	f7f8 ff68 	bl	80004d8 <__aeabi_dmul>
 8007608:	4ba2      	ldr	r3, [pc, #648]	@ (8007894 <_strtod_l+0xad4>)
 800760a:	4682      	mov	sl, r0
 800760c:	400b      	ands	r3, r1
 800760e:	468b      	mov	fp, r1
 8007610:	2b00      	cmp	r3, #0
 8007612:	f47f adff 	bne.w	8007214 <_strtod_l+0x454>
 8007616:	2322      	movs	r3, #34	@ 0x22
 8007618:	9a05      	ldr	r2, [sp, #20]
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	e5fa      	b.n	8007214 <_strtod_l+0x454>
 800761e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007622:	d165      	bne.n	80076f0 <_strtod_l+0x930>
 8007624:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007626:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800762a:	b35a      	cbz	r2, 8007684 <_strtod_l+0x8c4>
 800762c:	4a9a      	ldr	r2, [pc, #616]	@ (8007898 <_strtod_l+0xad8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d12b      	bne.n	800768a <_strtod_l+0x8ca>
 8007632:	9b08      	ldr	r3, [sp, #32]
 8007634:	4651      	mov	r1, sl
 8007636:	b303      	cbz	r3, 800767a <_strtod_l+0x8ba>
 8007638:	465a      	mov	r2, fp
 800763a:	4b96      	ldr	r3, [pc, #600]	@ (8007894 <_strtod_l+0xad4>)
 800763c:	4013      	ands	r3, r2
 800763e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007642:	f04f 32ff 	mov.w	r2, #4294967295
 8007646:	d81b      	bhi.n	8007680 <_strtod_l+0x8c0>
 8007648:	0d1b      	lsrs	r3, r3, #20
 800764a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	4299      	cmp	r1, r3
 8007654:	d119      	bne.n	800768a <_strtod_l+0x8ca>
 8007656:	4b91      	ldr	r3, [pc, #580]	@ (800789c <_strtod_l+0xadc>)
 8007658:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800765a:	429a      	cmp	r2, r3
 800765c:	d102      	bne.n	8007664 <_strtod_l+0x8a4>
 800765e:	3101      	adds	r1, #1
 8007660:	f43f adcd 	beq.w	80071fe <_strtod_l+0x43e>
 8007664:	f04f 0a00 	mov.w	sl, #0
 8007668:	4b8a      	ldr	r3, [pc, #552]	@ (8007894 <_strtod_l+0xad4>)
 800766a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800766c:	401a      	ands	r2, r3
 800766e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1c1      	bne.n	80075fc <_strtod_l+0x83c>
 8007678:	e5cc      	b.n	8007214 <_strtod_l+0x454>
 800767a:	f04f 33ff 	mov.w	r3, #4294967295
 800767e:	e7e8      	b.n	8007652 <_strtod_l+0x892>
 8007680:	4613      	mov	r3, r2
 8007682:	e7e6      	b.n	8007652 <_strtod_l+0x892>
 8007684:	ea53 030a 	orrs.w	r3, r3, sl
 8007688:	d0aa      	beq.n	80075e0 <_strtod_l+0x820>
 800768a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800768c:	b1db      	cbz	r3, 80076c6 <_strtod_l+0x906>
 800768e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007690:	4213      	tst	r3, r2
 8007692:	d0ee      	beq.n	8007672 <_strtod_l+0x8b2>
 8007694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007696:	4650      	mov	r0, sl
 8007698:	4659      	mov	r1, fp
 800769a:	9a08      	ldr	r2, [sp, #32]
 800769c:	b1bb      	cbz	r3, 80076ce <_strtod_l+0x90e>
 800769e:	f7ff fb6d 	bl	8006d7c <sulp>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076aa:	f7f8 fd5f 	bl	800016c <__adddf3>
 80076ae:	4682      	mov	sl, r0
 80076b0:	468b      	mov	fp, r1
 80076b2:	e7de      	b.n	8007672 <_strtod_l+0x8b2>
 80076b4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80076b8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80076bc:	f04f 3aff 	mov.w	sl, #4294967295
 80076c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80076c4:	e7d5      	b.n	8007672 <_strtod_l+0x8b2>
 80076c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076c8:	ea13 0f0a 	tst.w	r3, sl
 80076cc:	e7e1      	b.n	8007692 <_strtod_l+0x8d2>
 80076ce:	f7ff fb55 	bl	8006d7c <sulp>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076da:	f7f8 fd45 	bl	8000168 <__aeabi_dsub>
 80076de:	2200      	movs	r2, #0
 80076e0:	2300      	movs	r3, #0
 80076e2:	4682      	mov	sl, r0
 80076e4:	468b      	mov	fp, r1
 80076e6:	f7f9 f95f 	bl	80009a8 <__aeabi_dcmpeq>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d0c1      	beq.n	8007672 <_strtod_l+0x8b2>
 80076ee:	e619      	b.n	8007324 <_strtod_l+0x564>
 80076f0:	4641      	mov	r1, r8
 80076f2:	4620      	mov	r0, r4
 80076f4:	f7ff face 	bl	8006c94 <__ratio>
 80076f8:	2200      	movs	r2, #0
 80076fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80076fe:	4606      	mov	r6, r0
 8007700:	460f      	mov	r7, r1
 8007702:	f7f9 f965 	bl	80009d0 <__aeabi_dcmple>
 8007706:	2800      	cmp	r0, #0
 8007708:	d06d      	beq.n	80077e6 <_strtod_l+0xa26>
 800770a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d178      	bne.n	8007802 <_strtod_l+0xa42>
 8007710:	f1ba 0f00 	cmp.w	sl, #0
 8007714:	d156      	bne.n	80077c4 <_strtod_l+0xa04>
 8007716:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800771c:	2b00      	cmp	r3, #0
 800771e:	d158      	bne.n	80077d2 <_strtod_l+0xa12>
 8007720:	2200      	movs	r2, #0
 8007722:	4630      	mov	r0, r6
 8007724:	4639      	mov	r1, r7
 8007726:	4b5e      	ldr	r3, [pc, #376]	@ (80078a0 <_strtod_l+0xae0>)
 8007728:	f7f9 f948 	bl	80009bc <__aeabi_dcmplt>
 800772c:	2800      	cmp	r0, #0
 800772e:	d157      	bne.n	80077e0 <_strtod_l+0xa20>
 8007730:	4630      	mov	r0, r6
 8007732:	4639      	mov	r1, r7
 8007734:	2200      	movs	r2, #0
 8007736:	4b5b      	ldr	r3, [pc, #364]	@ (80078a4 <_strtod_l+0xae4>)
 8007738:	f7f8 fece 	bl	80004d8 <__aeabi_dmul>
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007744:	9606      	str	r6, [sp, #24]
 8007746:	9307      	str	r3, [sp, #28]
 8007748:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800774c:	4d51      	ldr	r5, [pc, #324]	@ (8007894 <_strtod_l+0xad4>)
 800774e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007752:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007754:	401d      	ands	r5, r3
 8007756:	4b54      	ldr	r3, [pc, #336]	@ (80078a8 <_strtod_l+0xae8>)
 8007758:	429d      	cmp	r5, r3
 800775a:	f040 80ab 	bne.w	80078b4 <_strtod_l+0xaf4>
 800775e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007760:	4650      	mov	r0, sl
 8007762:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007766:	4659      	mov	r1, fp
 8007768:	f7ff f9d4 	bl	8006b14 <__ulp>
 800776c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007770:	f7f8 feb2 	bl	80004d8 <__aeabi_dmul>
 8007774:	4652      	mov	r2, sl
 8007776:	465b      	mov	r3, fp
 8007778:	f7f8 fcf8 	bl	800016c <__adddf3>
 800777c:	460b      	mov	r3, r1
 800777e:	4945      	ldr	r1, [pc, #276]	@ (8007894 <_strtod_l+0xad4>)
 8007780:	4a4a      	ldr	r2, [pc, #296]	@ (80078ac <_strtod_l+0xaec>)
 8007782:	4019      	ands	r1, r3
 8007784:	4291      	cmp	r1, r2
 8007786:	4682      	mov	sl, r0
 8007788:	d942      	bls.n	8007810 <_strtod_l+0xa50>
 800778a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800778c:	4b43      	ldr	r3, [pc, #268]	@ (800789c <_strtod_l+0xadc>)
 800778e:	429a      	cmp	r2, r3
 8007790:	d103      	bne.n	800779a <_strtod_l+0x9da>
 8007792:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007794:	3301      	adds	r3, #1
 8007796:	f43f ad32 	beq.w	80071fe <_strtod_l+0x43e>
 800779a:	f04f 3aff 	mov.w	sl, #4294967295
 800779e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800789c <_strtod_l+0xadc>
 80077a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077a4:	9805      	ldr	r0, [sp, #20]
 80077a6:	f7fe fe89 	bl	80064bc <_Bfree>
 80077aa:	4649      	mov	r1, r9
 80077ac:	9805      	ldr	r0, [sp, #20]
 80077ae:	f7fe fe85 	bl	80064bc <_Bfree>
 80077b2:	4641      	mov	r1, r8
 80077b4:	9805      	ldr	r0, [sp, #20]
 80077b6:	f7fe fe81 	bl	80064bc <_Bfree>
 80077ba:	4621      	mov	r1, r4
 80077bc:	9805      	ldr	r0, [sp, #20]
 80077be:	f7fe fe7d 	bl	80064bc <_Bfree>
 80077c2:	e61c      	b.n	80073fe <_strtod_l+0x63e>
 80077c4:	f1ba 0f01 	cmp.w	sl, #1
 80077c8:	d103      	bne.n	80077d2 <_strtod_l+0xa12>
 80077ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f43f ada9 	beq.w	8007324 <_strtod_l+0x564>
 80077d2:	2200      	movs	r2, #0
 80077d4:	4b36      	ldr	r3, [pc, #216]	@ (80078b0 <_strtod_l+0xaf0>)
 80077d6:	2600      	movs	r6, #0
 80077d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80077dc:	4f30      	ldr	r7, [pc, #192]	@ (80078a0 <_strtod_l+0xae0>)
 80077de:	e7b3      	b.n	8007748 <_strtod_l+0x988>
 80077e0:	2600      	movs	r6, #0
 80077e2:	4f30      	ldr	r7, [pc, #192]	@ (80078a4 <_strtod_l+0xae4>)
 80077e4:	e7ac      	b.n	8007740 <_strtod_l+0x980>
 80077e6:	4630      	mov	r0, r6
 80077e8:	4639      	mov	r1, r7
 80077ea:	4b2e      	ldr	r3, [pc, #184]	@ (80078a4 <_strtod_l+0xae4>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	f7f8 fe73 	bl	80004d8 <__aeabi_dmul>
 80077f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077f4:	4606      	mov	r6, r0
 80077f6:	460f      	mov	r7, r1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d0a1      	beq.n	8007740 <_strtod_l+0x980>
 80077fc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007800:	e7a2      	b.n	8007748 <_strtod_l+0x988>
 8007802:	2200      	movs	r2, #0
 8007804:	4b26      	ldr	r3, [pc, #152]	@ (80078a0 <_strtod_l+0xae0>)
 8007806:	4616      	mov	r6, r2
 8007808:	461f      	mov	r7, r3
 800780a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800780e:	e79b      	b.n	8007748 <_strtod_l+0x988>
 8007810:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007814:	9b08      	ldr	r3, [sp, #32]
 8007816:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1c1      	bne.n	80077a2 <_strtod_l+0x9e2>
 800781e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007822:	0d1b      	lsrs	r3, r3, #20
 8007824:	051b      	lsls	r3, r3, #20
 8007826:	429d      	cmp	r5, r3
 8007828:	d1bb      	bne.n	80077a2 <_strtod_l+0x9e2>
 800782a:	4630      	mov	r0, r6
 800782c:	4639      	mov	r1, r7
 800782e:	f7f9 f99b 	bl	8000b68 <__aeabi_d2lz>
 8007832:	f7f8 fe23 	bl	800047c <__aeabi_l2d>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4630      	mov	r0, r6
 800783c:	4639      	mov	r1, r7
 800783e:	f7f8 fc93 	bl	8000168 <__aeabi_dsub>
 8007842:	460b      	mov	r3, r1
 8007844:	4602      	mov	r2, r0
 8007846:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800784a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800784e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007850:	ea46 060a 	orr.w	r6, r6, sl
 8007854:	431e      	orrs	r6, r3
 8007856:	d06a      	beq.n	800792e <_strtod_l+0xb6e>
 8007858:	a309      	add	r3, pc, #36	@ (adr r3, 8007880 <_strtod_l+0xac0>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f9 f8ad 	bl	80009bc <__aeabi_dcmplt>
 8007862:	2800      	cmp	r0, #0
 8007864:	f47f acd6 	bne.w	8007214 <_strtod_l+0x454>
 8007868:	a307      	add	r3, pc, #28	@ (adr r3, 8007888 <_strtod_l+0xac8>)
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007872:	f7f9 f8c1 	bl	80009f8 <__aeabi_dcmpgt>
 8007876:	2800      	cmp	r0, #0
 8007878:	d093      	beq.n	80077a2 <_strtod_l+0x9e2>
 800787a:	e4cb      	b.n	8007214 <_strtod_l+0x454>
 800787c:	f3af 8000 	nop.w
 8007880:	94a03595 	.word	0x94a03595
 8007884:	3fdfffff 	.word	0x3fdfffff
 8007888:	35afe535 	.word	0x35afe535
 800788c:	3fe00000 	.word	0x3fe00000
 8007890:	39500000 	.word	0x39500000
 8007894:	7ff00000 	.word	0x7ff00000
 8007898:	000fffff 	.word	0x000fffff
 800789c:	7fefffff 	.word	0x7fefffff
 80078a0:	3ff00000 	.word	0x3ff00000
 80078a4:	3fe00000 	.word	0x3fe00000
 80078a8:	7fe00000 	.word	0x7fe00000
 80078ac:	7c9fffff 	.word	0x7c9fffff
 80078b0:	bff00000 	.word	0xbff00000
 80078b4:	9b08      	ldr	r3, [sp, #32]
 80078b6:	b323      	cbz	r3, 8007902 <_strtod_l+0xb42>
 80078b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80078bc:	d821      	bhi.n	8007902 <_strtod_l+0xb42>
 80078be:	a328      	add	r3, pc, #160	@ (adr r3, 8007960 <_strtod_l+0xba0>)
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	4630      	mov	r0, r6
 80078c6:	4639      	mov	r1, r7
 80078c8:	f7f9 f882 	bl	80009d0 <__aeabi_dcmple>
 80078cc:	b1a0      	cbz	r0, 80078f8 <_strtod_l+0xb38>
 80078ce:	4639      	mov	r1, r7
 80078d0:	4630      	mov	r0, r6
 80078d2:	f7f9 f8d9 	bl	8000a88 <__aeabi_d2uiz>
 80078d6:	2801      	cmp	r0, #1
 80078d8:	bf38      	it	cc
 80078da:	2001      	movcc	r0, #1
 80078dc:	f7f8 fd82 	bl	80003e4 <__aeabi_ui2d>
 80078e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078e2:	4606      	mov	r6, r0
 80078e4:	460f      	mov	r7, r1
 80078e6:	b9fb      	cbnz	r3, 8007928 <_strtod_l+0xb68>
 80078e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80078ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80078f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80078f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80078f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80078fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80078fe:	1b5b      	subs	r3, r3, r5
 8007900:	9311      	str	r3, [sp, #68]	@ 0x44
 8007902:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007906:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800790a:	f7ff f903 	bl	8006b14 <__ulp>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4650      	mov	r0, sl
 8007914:	4659      	mov	r1, fp
 8007916:	f7f8 fddf 	bl	80004d8 <__aeabi_dmul>
 800791a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800791e:	f7f8 fc25 	bl	800016c <__adddf3>
 8007922:	4682      	mov	sl, r0
 8007924:	468b      	mov	fp, r1
 8007926:	e775      	b.n	8007814 <_strtod_l+0xa54>
 8007928:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800792c:	e7e0      	b.n	80078f0 <_strtod_l+0xb30>
 800792e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007968 <_strtod_l+0xba8>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f7f9 f842 	bl	80009bc <__aeabi_dcmplt>
 8007938:	e79d      	b.n	8007876 <_strtod_l+0xab6>
 800793a:	2300      	movs	r3, #0
 800793c:	930e      	str	r3, [sp, #56]	@ 0x38
 800793e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007940:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	f7ff ba79 	b.w	8006e3a <_strtod_l+0x7a>
 8007948:	2a65      	cmp	r2, #101	@ 0x65
 800794a:	f43f ab72 	beq.w	8007032 <_strtod_l+0x272>
 800794e:	2a45      	cmp	r2, #69	@ 0x45
 8007950:	f43f ab6f 	beq.w	8007032 <_strtod_l+0x272>
 8007954:	2301      	movs	r3, #1
 8007956:	f7ff bbaa 	b.w	80070ae <_strtod_l+0x2ee>
 800795a:	bf00      	nop
 800795c:	f3af 8000 	nop.w
 8007960:	ffc00000 	.word	0xffc00000
 8007964:	41dfffff 	.word	0x41dfffff
 8007968:	94a03595 	.word	0x94a03595
 800796c:	3fcfffff 	.word	0x3fcfffff

08007970 <_strtod_r>:
 8007970:	4b01      	ldr	r3, [pc, #4]	@ (8007978 <_strtod_r+0x8>)
 8007972:	f7ff ba25 	b.w	8006dc0 <_strtod_l>
 8007976:	bf00      	nop
 8007978:	20000068 	.word	0x20000068

0800797c <_strtol_l.isra.0>:
 800797c:	2b24      	cmp	r3, #36	@ 0x24
 800797e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007982:	4686      	mov	lr, r0
 8007984:	4690      	mov	r8, r2
 8007986:	d801      	bhi.n	800798c <_strtol_l.isra.0+0x10>
 8007988:	2b01      	cmp	r3, #1
 800798a:	d106      	bne.n	800799a <_strtol_l.isra.0+0x1e>
 800798c:	f7fd fdbc 	bl	8005508 <__errno>
 8007990:	2316      	movs	r3, #22
 8007992:	6003      	str	r3, [r0, #0]
 8007994:	2000      	movs	r0, #0
 8007996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799a:	460d      	mov	r5, r1
 800799c:	4833      	ldr	r0, [pc, #204]	@ (8007a6c <_strtol_l.isra.0+0xf0>)
 800799e:	462a      	mov	r2, r5
 80079a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079a4:	5d06      	ldrb	r6, [r0, r4]
 80079a6:	f016 0608 	ands.w	r6, r6, #8
 80079aa:	d1f8      	bne.n	800799e <_strtol_l.isra.0+0x22>
 80079ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80079ae:	d110      	bne.n	80079d2 <_strtol_l.isra.0+0x56>
 80079b0:	2601      	movs	r6, #1
 80079b2:	782c      	ldrb	r4, [r5, #0]
 80079b4:	1c95      	adds	r5, r2, #2
 80079b6:	f033 0210 	bics.w	r2, r3, #16
 80079ba:	d115      	bne.n	80079e8 <_strtol_l.isra.0+0x6c>
 80079bc:	2c30      	cmp	r4, #48	@ 0x30
 80079be:	d10d      	bne.n	80079dc <_strtol_l.isra.0+0x60>
 80079c0:	782a      	ldrb	r2, [r5, #0]
 80079c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079c6:	2a58      	cmp	r2, #88	@ 0x58
 80079c8:	d108      	bne.n	80079dc <_strtol_l.isra.0+0x60>
 80079ca:	786c      	ldrb	r4, [r5, #1]
 80079cc:	3502      	adds	r5, #2
 80079ce:	2310      	movs	r3, #16
 80079d0:	e00a      	b.n	80079e8 <_strtol_l.isra.0+0x6c>
 80079d2:	2c2b      	cmp	r4, #43	@ 0x2b
 80079d4:	bf04      	itt	eq
 80079d6:	782c      	ldrbeq	r4, [r5, #0]
 80079d8:	1c95      	addeq	r5, r2, #2
 80079da:	e7ec      	b.n	80079b6 <_strtol_l.isra.0+0x3a>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1f6      	bne.n	80079ce <_strtol_l.isra.0+0x52>
 80079e0:	2c30      	cmp	r4, #48	@ 0x30
 80079e2:	bf14      	ite	ne
 80079e4:	230a      	movne	r3, #10
 80079e6:	2308      	moveq	r3, #8
 80079e8:	2200      	movs	r2, #0
 80079ea:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80079ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80079f2:	fbbc f9f3 	udiv	r9, ip, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80079fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007a00:	2f09      	cmp	r7, #9
 8007a02:	d80f      	bhi.n	8007a24 <_strtol_l.isra.0+0xa8>
 8007a04:	463c      	mov	r4, r7
 8007a06:	42a3      	cmp	r3, r4
 8007a08:	dd1b      	ble.n	8007a42 <_strtol_l.isra.0+0xc6>
 8007a0a:	1c57      	adds	r7, r2, #1
 8007a0c:	d007      	beq.n	8007a1e <_strtol_l.isra.0+0xa2>
 8007a0e:	4581      	cmp	r9, r0
 8007a10:	d314      	bcc.n	8007a3c <_strtol_l.isra.0+0xc0>
 8007a12:	d101      	bne.n	8007a18 <_strtol_l.isra.0+0x9c>
 8007a14:	45a2      	cmp	sl, r4
 8007a16:	db11      	blt.n	8007a3c <_strtol_l.isra.0+0xc0>
 8007a18:	2201      	movs	r2, #1
 8007a1a:	fb00 4003 	mla	r0, r0, r3, r4
 8007a1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a22:	e7eb      	b.n	80079fc <_strtol_l.isra.0+0x80>
 8007a24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007a28:	2f19      	cmp	r7, #25
 8007a2a:	d801      	bhi.n	8007a30 <_strtol_l.isra.0+0xb4>
 8007a2c:	3c37      	subs	r4, #55	@ 0x37
 8007a2e:	e7ea      	b.n	8007a06 <_strtol_l.isra.0+0x8a>
 8007a30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a34:	2f19      	cmp	r7, #25
 8007a36:	d804      	bhi.n	8007a42 <_strtol_l.isra.0+0xc6>
 8007a38:	3c57      	subs	r4, #87	@ 0x57
 8007a3a:	e7e4      	b.n	8007a06 <_strtol_l.isra.0+0x8a>
 8007a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a40:	e7ed      	b.n	8007a1e <_strtol_l.isra.0+0xa2>
 8007a42:	1c53      	adds	r3, r2, #1
 8007a44:	d108      	bne.n	8007a58 <_strtol_l.isra.0+0xdc>
 8007a46:	2322      	movs	r3, #34	@ 0x22
 8007a48:	4660      	mov	r0, ip
 8007a4a:	f8ce 3000 	str.w	r3, [lr]
 8007a4e:	f1b8 0f00 	cmp.w	r8, #0
 8007a52:	d0a0      	beq.n	8007996 <_strtol_l.isra.0+0x1a>
 8007a54:	1e69      	subs	r1, r5, #1
 8007a56:	e006      	b.n	8007a66 <_strtol_l.isra.0+0xea>
 8007a58:	b106      	cbz	r6, 8007a5c <_strtol_l.isra.0+0xe0>
 8007a5a:	4240      	negs	r0, r0
 8007a5c:	f1b8 0f00 	cmp.w	r8, #0
 8007a60:	d099      	beq.n	8007996 <_strtol_l.isra.0+0x1a>
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	d1f6      	bne.n	8007a54 <_strtol_l.isra.0+0xd8>
 8007a66:	f8c8 1000 	str.w	r1, [r8]
 8007a6a:	e794      	b.n	8007996 <_strtol_l.isra.0+0x1a>
 8007a6c:	08009001 	.word	0x08009001

08007a70 <_strtol_r>:
 8007a70:	f7ff bf84 	b.w	800797c <_strtol_l.isra.0>

08007a74 <__ssputs_r>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	461f      	mov	r7, r3
 8007a7a:	688e      	ldr	r6, [r1, #8]
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	42be      	cmp	r6, r7
 8007a80:	460c      	mov	r4, r1
 8007a82:	4690      	mov	r8, r2
 8007a84:	680b      	ldr	r3, [r1, #0]
 8007a86:	d82d      	bhi.n	8007ae4 <__ssputs_r+0x70>
 8007a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a90:	d026      	beq.n	8007ae0 <__ssputs_r+0x6c>
 8007a92:	6965      	ldr	r5, [r4, #20]
 8007a94:	6909      	ldr	r1, [r1, #16]
 8007a96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a9a:	eba3 0901 	sub.w	r9, r3, r1
 8007a9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aa2:	1c7b      	adds	r3, r7, #1
 8007aa4:	444b      	add	r3, r9
 8007aa6:	106d      	asrs	r5, r5, #1
 8007aa8:	429d      	cmp	r5, r3
 8007aaa:	bf38      	it	cc
 8007aac:	461d      	movcc	r5, r3
 8007aae:	0553      	lsls	r3, r2, #21
 8007ab0:	d527      	bpl.n	8007b02 <__ssputs_r+0x8e>
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f7fe fc36 	bl	8006324 <_malloc_r>
 8007ab8:	4606      	mov	r6, r0
 8007aba:	b360      	cbz	r0, 8007b16 <__ssputs_r+0xa2>
 8007abc:	464a      	mov	r2, r9
 8007abe:	6921      	ldr	r1, [r4, #16]
 8007ac0:	f000 fa14 	bl	8007eec <memcpy>
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	6126      	str	r6, [r4, #16]
 8007ad2:	444e      	add	r6, r9
 8007ad4:	6026      	str	r6, [r4, #0]
 8007ad6:	463e      	mov	r6, r7
 8007ad8:	6165      	str	r5, [r4, #20]
 8007ada:	eba5 0509 	sub.w	r5, r5, r9
 8007ade:	60a5      	str	r5, [r4, #8]
 8007ae0:	42be      	cmp	r6, r7
 8007ae2:	d900      	bls.n	8007ae6 <__ssputs_r+0x72>
 8007ae4:	463e      	mov	r6, r7
 8007ae6:	4632      	mov	r2, r6
 8007ae8:	4641      	mov	r1, r8
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	f000 f9c2 	bl	8007e74 <memmove>
 8007af0:	2000      	movs	r0, #0
 8007af2:	68a3      	ldr	r3, [r4, #8]
 8007af4:	1b9b      	subs	r3, r3, r6
 8007af6:	60a3      	str	r3, [r4, #8]
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	4433      	add	r3, r6
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b02:	462a      	mov	r2, r5
 8007b04:	f000 fd83 	bl	800860e <_realloc_r>
 8007b08:	4606      	mov	r6, r0
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d1e0      	bne.n	8007ad0 <__ssputs_r+0x5c>
 8007b0e:	4650      	mov	r0, sl
 8007b10:	6921      	ldr	r1, [r4, #16]
 8007b12:	f7fe fb95 	bl	8006240 <_free_r>
 8007b16:	230c      	movs	r3, #12
 8007b18:	f8ca 3000 	str.w	r3, [sl]
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	e7e9      	b.n	8007afe <__ssputs_r+0x8a>
	...

08007b2c <_svfiprintf_r>:
 8007b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b30:	4698      	mov	r8, r3
 8007b32:	898b      	ldrh	r3, [r1, #12]
 8007b34:	4607      	mov	r7, r0
 8007b36:	061b      	lsls	r3, r3, #24
 8007b38:	460d      	mov	r5, r1
 8007b3a:	4614      	mov	r4, r2
 8007b3c:	b09d      	sub	sp, #116	@ 0x74
 8007b3e:	d510      	bpl.n	8007b62 <_svfiprintf_r+0x36>
 8007b40:	690b      	ldr	r3, [r1, #16]
 8007b42:	b973      	cbnz	r3, 8007b62 <_svfiprintf_r+0x36>
 8007b44:	2140      	movs	r1, #64	@ 0x40
 8007b46:	f7fe fbed 	bl	8006324 <_malloc_r>
 8007b4a:	6028      	str	r0, [r5, #0]
 8007b4c:	6128      	str	r0, [r5, #16]
 8007b4e:	b930      	cbnz	r0, 8007b5e <_svfiprintf_r+0x32>
 8007b50:	230c      	movs	r3, #12
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	b01d      	add	sp, #116	@ 0x74
 8007b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5e:	2340      	movs	r3, #64	@ 0x40
 8007b60:	616b      	str	r3, [r5, #20]
 8007b62:	2300      	movs	r3, #0
 8007b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b66:	2320      	movs	r3, #32
 8007b68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b6c:	2330      	movs	r3, #48	@ 0x30
 8007b6e:	f04f 0901 	mov.w	r9, #1
 8007b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b76:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007d10 <_svfiprintf_r+0x1e4>
 8007b7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b7e:	4623      	mov	r3, r4
 8007b80:	469a      	mov	sl, r3
 8007b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b86:	b10a      	cbz	r2, 8007b8c <_svfiprintf_r+0x60>
 8007b88:	2a25      	cmp	r2, #37	@ 0x25
 8007b8a:	d1f9      	bne.n	8007b80 <_svfiprintf_r+0x54>
 8007b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b90:	d00b      	beq.n	8007baa <_svfiprintf_r+0x7e>
 8007b92:	465b      	mov	r3, fp
 8007b94:	4622      	mov	r2, r4
 8007b96:	4629      	mov	r1, r5
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f7ff ff6b 	bl	8007a74 <__ssputs_r>
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f000 80a7 	beq.w	8007cf2 <_svfiprintf_r+0x1c6>
 8007ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ba6:	445a      	add	r2, fp
 8007ba8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007baa:	f89a 3000 	ldrb.w	r3, [sl]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 809f 	beq.w	8007cf2 <_svfiprintf_r+0x1c6>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bbe:	f10a 0a01 	add.w	sl, sl, #1
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	9307      	str	r3, [sp, #28]
 8007bc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bca:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bcc:	4654      	mov	r4, sl
 8007bce:	2205      	movs	r2, #5
 8007bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd4:	484e      	ldr	r0, [pc, #312]	@ (8007d10 <_svfiprintf_r+0x1e4>)
 8007bd6:	f7fd fcc4 	bl	8005562 <memchr>
 8007bda:	9a04      	ldr	r2, [sp, #16]
 8007bdc:	b9d8      	cbnz	r0, 8007c16 <_svfiprintf_r+0xea>
 8007bde:	06d0      	lsls	r0, r2, #27
 8007be0:	bf44      	itt	mi
 8007be2:	2320      	movmi	r3, #32
 8007be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007be8:	0711      	lsls	r1, r2, #28
 8007bea:	bf44      	itt	mi
 8007bec:	232b      	movmi	r3, #43	@ 0x2b
 8007bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bf8:	d015      	beq.n	8007c26 <_svfiprintf_r+0xfa>
 8007bfa:	4654      	mov	r4, sl
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	f04f 0c0a 	mov.w	ip, #10
 8007c02:	9a07      	ldr	r2, [sp, #28]
 8007c04:	4621      	mov	r1, r4
 8007c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c0a:	3b30      	subs	r3, #48	@ 0x30
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	d94b      	bls.n	8007ca8 <_svfiprintf_r+0x17c>
 8007c10:	b1b0      	cbz	r0, 8007c40 <_svfiprintf_r+0x114>
 8007c12:	9207      	str	r2, [sp, #28]
 8007c14:	e014      	b.n	8007c40 <_svfiprintf_r+0x114>
 8007c16:	eba0 0308 	sub.w	r3, r0, r8
 8007c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	46a2      	mov	sl, r4
 8007c22:	9304      	str	r3, [sp, #16]
 8007c24:	e7d2      	b.n	8007bcc <_svfiprintf_r+0xa0>
 8007c26:	9b03      	ldr	r3, [sp, #12]
 8007c28:	1d19      	adds	r1, r3, #4
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	9103      	str	r1, [sp, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bfbb      	ittet	lt
 8007c32:	425b      	neglt	r3, r3
 8007c34:	f042 0202 	orrlt.w	r2, r2, #2
 8007c38:	9307      	strge	r3, [sp, #28]
 8007c3a:	9307      	strlt	r3, [sp, #28]
 8007c3c:	bfb8      	it	lt
 8007c3e:	9204      	strlt	r2, [sp, #16]
 8007c40:	7823      	ldrb	r3, [r4, #0]
 8007c42:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c44:	d10a      	bne.n	8007c5c <_svfiprintf_r+0x130>
 8007c46:	7863      	ldrb	r3, [r4, #1]
 8007c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c4a:	d132      	bne.n	8007cb2 <_svfiprintf_r+0x186>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	3402      	adds	r4, #2
 8007c50:	1d1a      	adds	r2, r3, #4
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	9203      	str	r2, [sp, #12]
 8007c56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c5a:	9305      	str	r3, [sp, #20]
 8007c5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007d14 <_svfiprintf_r+0x1e8>
 8007c60:	2203      	movs	r2, #3
 8007c62:	4650      	mov	r0, sl
 8007c64:	7821      	ldrb	r1, [r4, #0]
 8007c66:	f7fd fc7c 	bl	8005562 <memchr>
 8007c6a:	b138      	cbz	r0, 8007c7c <_svfiprintf_r+0x150>
 8007c6c:	2240      	movs	r2, #64	@ 0x40
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	eba0 000a 	sub.w	r0, r0, sl
 8007c74:	4082      	lsls	r2, r0
 8007c76:	4313      	orrs	r3, r2
 8007c78:	3401      	adds	r4, #1
 8007c7a:	9304      	str	r3, [sp, #16]
 8007c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c80:	2206      	movs	r2, #6
 8007c82:	4825      	ldr	r0, [pc, #148]	@ (8007d18 <_svfiprintf_r+0x1ec>)
 8007c84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c88:	f7fd fc6b 	bl	8005562 <memchr>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d036      	beq.n	8007cfe <_svfiprintf_r+0x1d2>
 8007c90:	4b22      	ldr	r3, [pc, #136]	@ (8007d1c <_svfiprintf_r+0x1f0>)
 8007c92:	bb1b      	cbnz	r3, 8007cdc <_svfiprintf_r+0x1b0>
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	3307      	adds	r3, #7
 8007c98:	f023 0307 	bic.w	r3, r3, #7
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	9303      	str	r3, [sp, #12]
 8007ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca2:	4433      	add	r3, r6
 8007ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ca6:	e76a      	b.n	8007b7e <_svfiprintf_r+0x52>
 8007ca8:	460c      	mov	r4, r1
 8007caa:	2001      	movs	r0, #1
 8007cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb0:	e7a8      	b.n	8007c04 <_svfiprintf_r+0xd8>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f04f 0c0a 	mov.w	ip, #10
 8007cb8:	4619      	mov	r1, r3
 8007cba:	3401      	adds	r4, #1
 8007cbc:	9305      	str	r3, [sp, #20]
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc4:	3a30      	subs	r2, #48	@ 0x30
 8007cc6:	2a09      	cmp	r2, #9
 8007cc8:	d903      	bls.n	8007cd2 <_svfiprintf_r+0x1a6>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0c6      	beq.n	8007c5c <_svfiprintf_r+0x130>
 8007cce:	9105      	str	r1, [sp, #20]
 8007cd0:	e7c4      	b.n	8007c5c <_svfiprintf_r+0x130>
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cda:	e7f0      	b.n	8007cbe <_svfiprintf_r+0x192>
 8007cdc:	ab03      	add	r3, sp, #12
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8007d20 <_svfiprintf_r+0x1f4>)
 8007ce6:	a904      	add	r1, sp, #16
 8007ce8:	f7fc fcce 	bl	8004688 <_printf_float>
 8007cec:	1c42      	adds	r2, r0, #1
 8007cee:	4606      	mov	r6, r0
 8007cf0:	d1d6      	bne.n	8007ca0 <_svfiprintf_r+0x174>
 8007cf2:	89ab      	ldrh	r3, [r5, #12]
 8007cf4:	065b      	lsls	r3, r3, #25
 8007cf6:	f53f af2d 	bmi.w	8007b54 <_svfiprintf_r+0x28>
 8007cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cfc:	e72c      	b.n	8007b58 <_svfiprintf_r+0x2c>
 8007cfe:	ab03      	add	r3, sp, #12
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	462a      	mov	r2, r5
 8007d04:	4638      	mov	r0, r7
 8007d06:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <_svfiprintf_r+0x1f4>)
 8007d08:	a904      	add	r1, sp, #16
 8007d0a:	f7fc ff5b 	bl	8004bc4 <_printf_i>
 8007d0e:	e7ed      	b.n	8007cec <_svfiprintf_r+0x1c0>
 8007d10:	08008dfd 	.word	0x08008dfd
 8007d14:	08008e03 	.word	0x08008e03
 8007d18:	08008e07 	.word	0x08008e07
 8007d1c:	08004689 	.word	0x08004689
 8007d20:	08007a75 	.word	0x08007a75

08007d24 <__sflush_r>:
 8007d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	0716      	lsls	r6, r2, #28
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	d454      	bmi.n	8007ddc <__sflush_r+0xb8>
 8007d32:	684b      	ldr	r3, [r1, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	dc02      	bgt.n	8007d3e <__sflush_r+0x1a>
 8007d38:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	dd48      	ble.n	8007dd0 <__sflush_r+0xac>
 8007d3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d40:	2e00      	cmp	r6, #0
 8007d42:	d045      	beq.n	8007dd0 <__sflush_r+0xac>
 8007d44:	2300      	movs	r3, #0
 8007d46:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d4a:	682f      	ldr	r7, [r5, #0]
 8007d4c:	6a21      	ldr	r1, [r4, #32]
 8007d4e:	602b      	str	r3, [r5, #0]
 8007d50:	d030      	beq.n	8007db4 <__sflush_r+0x90>
 8007d52:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	0759      	lsls	r1, r3, #29
 8007d58:	d505      	bpl.n	8007d66 <__sflush_r+0x42>
 8007d5a:	6863      	ldr	r3, [r4, #4]
 8007d5c:	1ad2      	subs	r2, r2, r3
 8007d5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d60:	b10b      	cbz	r3, 8007d66 <__sflush_r+0x42>
 8007d62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d64:	1ad2      	subs	r2, r2, r3
 8007d66:	2300      	movs	r3, #0
 8007d68:	4628      	mov	r0, r5
 8007d6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d6c:	6a21      	ldr	r1, [r4, #32]
 8007d6e:	47b0      	blx	r6
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	d106      	bne.n	8007d84 <__sflush_r+0x60>
 8007d76:	6829      	ldr	r1, [r5, #0]
 8007d78:	291d      	cmp	r1, #29
 8007d7a:	d82b      	bhi.n	8007dd4 <__sflush_r+0xb0>
 8007d7c:	4a28      	ldr	r2, [pc, #160]	@ (8007e20 <__sflush_r+0xfc>)
 8007d7e:	40ca      	lsrs	r2, r1
 8007d80:	07d6      	lsls	r6, r2, #31
 8007d82:	d527      	bpl.n	8007dd4 <__sflush_r+0xb0>
 8007d84:	2200      	movs	r2, #0
 8007d86:	6062      	str	r2, [r4, #4]
 8007d88:	6922      	ldr	r2, [r4, #16]
 8007d8a:	04d9      	lsls	r1, r3, #19
 8007d8c:	6022      	str	r2, [r4, #0]
 8007d8e:	d504      	bpl.n	8007d9a <__sflush_r+0x76>
 8007d90:	1c42      	adds	r2, r0, #1
 8007d92:	d101      	bne.n	8007d98 <__sflush_r+0x74>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b903      	cbnz	r3, 8007d9a <__sflush_r+0x76>
 8007d98:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d9c:	602f      	str	r7, [r5, #0]
 8007d9e:	b1b9      	cbz	r1, 8007dd0 <__sflush_r+0xac>
 8007da0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007da4:	4299      	cmp	r1, r3
 8007da6:	d002      	beq.n	8007dae <__sflush_r+0x8a>
 8007da8:	4628      	mov	r0, r5
 8007daa:	f7fe fa49 	bl	8006240 <_free_r>
 8007dae:	2300      	movs	r3, #0
 8007db0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007db2:	e00d      	b.n	8007dd0 <__sflush_r+0xac>
 8007db4:	2301      	movs	r3, #1
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b0      	blx	r6
 8007dba:	4602      	mov	r2, r0
 8007dbc:	1c50      	adds	r0, r2, #1
 8007dbe:	d1c9      	bne.n	8007d54 <__sflush_r+0x30>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0c6      	beq.n	8007d54 <__sflush_r+0x30>
 8007dc6:	2b1d      	cmp	r3, #29
 8007dc8:	d001      	beq.n	8007dce <__sflush_r+0xaa>
 8007dca:	2b16      	cmp	r3, #22
 8007dcc:	d11d      	bne.n	8007e0a <__sflush_r+0xe6>
 8007dce:	602f      	str	r7, [r5, #0]
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	e021      	b.n	8007e18 <__sflush_r+0xf4>
 8007dd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dd8:	b21b      	sxth	r3, r3
 8007dda:	e01a      	b.n	8007e12 <__sflush_r+0xee>
 8007ddc:	690f      	ldr	r7, [r1, #16]
 8007dde:	2f00      	cmp	r7, #0
 8007de0:	d0f6      	beq.n	8007dd0 <__sflush_r+0xac>
 8007de2:	0793      	lsls	r3, r2, #30
 8007de4:	bf18      	it	ne
 8007de6:	2300      	movne	r3, #0
 8007de8:	680e      	ldr	r6, [r1, #0]
 8007dea:	bf08      	it	eq
 8007dec:	694b      	ldreq	r3, [r1, #20]
 8007dee:	1bf6      	subs	r6, r6, r7
 8007df0:	600f      	str	r7, [r1, #0]
 8007df2:	608b      	str	r3, [r1, #8]
 8007df4:	2e00      	cmp	r6, #0
 8007df6:	ddeb      	ble.n	8007dd0 <__sflush_r+0xac>
 8007df8:	4633      	mov	r3, r6
 8007dfa:	463a      	mov	r2, r7
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	6a21      	ldr	r1, [r4, #32]
 8007e00:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007e04:	47e0      	blx	ip
 8007e06:	2800      	cmp	r0, #0
 8007e08:	dc07      	bgt.n	8007e1a <__sflush_r+0xf6>
 8007e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e12:	f04f 30ff 	mov.w	r0, #4294967295
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e1a:	4407      	add	r7, r0
 8007e1c:	1a36      	subs	r6, r6, r0
 8007e1e:	e7e9      	b.n	8007df4 <__sflush_r+0xd0>
 8007e20:	20400001 	.word	0x20400001

08007e24 <_fflush_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	690b      	ldr	r3, [r1, #16]
 8007e28:	4605      	mov	r5, r0
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	b913      	cbnz	r3, 8007e34 <_fflush_r+0x10>
 8007e2e:	2500      	movs	r5, #0
 8007e30:	4628      	mov	r0, r5
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	b118      	cbz	r0, 8007e3e <_fflush_r+0x1a>
 8007e36:	6a03      	ldr	r3, [r0, #32]
 8007e38:	b90b      	cbnz	r3, 8007e3e <_fflush_r+0x1a>
 8007e3a:	f7fd fa77 	bl	800532c <__sinit>
 8007e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0f3      	beq.n	8007e2e <_fflush_r+0xa>
 8007e46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e48:	07d0      	lsls	r0, r2, #31
 8007e4a:	d404      	bmi.n	8007e56 <_fflush_r+0x32>
 8007e4c:	0599      	lsls	r1, r3, #22
 8007e4e:	d402      	bmi.n	8007e56 <_fflush_r+0x32>
 8007e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e52:	f7fd fb84 	bl	800555e <__retarget_lock_acquire_recursive>
 8007e56:	4628      	mov	r0, r5
 8007e58:	4621      	mov	r1, r4
 8007e5a:	f7ff ff63 	bl	8007d24 <__sflush_r>
 8007e5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e60:	4605      	mov	r5, r0
 8007e62:	07da      	lsls	r2, r3, #31
 8007e64:	d4e4      	bmi.n	8007e30 <_fflush_r+0xc>
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	059b      	lsls	r3, r3, #22
 8007e6a:	d4e1      	bmi.n	8007e30 <_fflush_r+0xc>
 8007e6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e6e:	f7fd fb77 	bl	8005560 <__retarget_lock_release_recursive>
 8007e72:	e7dd      	b.n	8007e30 <_fflush_r+0xc>

08007e74 <memmove>:
 8007e74:	4288      	cmp	r0, r1
 8007e76:	b510      	push	{r4, lr}
 8007e78:	eb01 0402 	add.w	r4, r1, r2
 8007e7c:	d902      	bls.n	8007e84 <memmove+0x10>
 8007e7e:	4284      	cmp	r4, r0
 8007e80:	4623      	mov	r3, r4
 8007e82:	d807      	bhi.n	8007e94 <memmove+0x20>
 8007e84:	1e43      	subs	r3, r0, #1
 8007e86:	42a1      	cmp	r1, r4
 8007e88:	d008      	beq.n	8007e9c <memmove+0x28>
 8007e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e92:	e7f8      	b.n	8007e86 <memmove+0x12>
 8007e94:	4601      	mov	r1, r0
 8007e96:	4402      	add	r2, r0
 8007e98:	428a      	cmp	r2, r1
 8007e9a:	d100      	bne.n	8007e9e <memmove+0x2a>
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ea6:	e7f7      	b.n	8007e98 <memmove+0x24>

08007ea8 <strncmp>:
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	b16a      	cbz	r2, 8007ec8 <strncmp+0x20>
 8007eac:	3901      	subs	r1, #1
 8007eae:	1884      	adds	r4, r0, r2
 8007eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d103      	bne.n	8007ec4 <strncmp+0x1c>
 8007ebc:	42a0      	cmp	r0, r4
 8007ebe:	d001      	beq.n	8007ec4 <strncmp+0x1c>
 8007ec0:	2a00      	cmp	r2, #0
 8007ec2:	d1f5      	bne.n	8007eb0 <strncmp+0x8>
 8007ec4:	1ad0      	subs	r0, r2, r3
 8007ec6:	bd10      	pop	{r4, pc}
 8007ec8:	4610      	mov	r0, r2
 8007eca:	e7fc      	b.n	8007ec6 <strncmp+0x1e>

08007ecc <_sbrk_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	2300      	movs	r3, #0
 8007ed0:	4d05      	ldr	r5, [pc, #20]	@ (8007ee8 <_sbrk_r+0x1c>)
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	4608      	mov	r0, r1
 8007ed6:	602b      	str	r3, [r5, #0]
 8007ed8:	f7f9 fb24 	bl	8001524 <_sbrk>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d102      	bne.n	8007ee6 <_sbrk_r+0x1a>
 8007ee0:	682b      	ldr	r3, [r5, #0]
 8007ee2:	b103      	cbz	r3, 8007ee6 <_sbrk_r+0x1a>
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}
 8007ee8:	200003b0 	.word	0x200003b0

08007eec <memcpy>:
 8007eec:	440a      	add	r2, r1
 8007eee:	4291      	cmp	r1, r2
 8007ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ef4:	d100      	bne.n	8007ef8 <memcpy+0xc>
 8007ef6:	4770      	bx	lr
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007efe:	4291      	cmp	r1, r2
 8007f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f04:	d1f9      	bne.n	8007efa <memcpy+0xe>
 8007f06:	bd10      	pop	{r4, pc}

08007f08 <nan>:
 8007f08:	2000      	movs	r0, #0
 8007f0a:	4901      	ldr	r1, [pc, #4]	@ (8007f10 <nan+0x8>)
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	7ff80000 	.word	0x7ff80000

08007f14 <__assert_func>:
 8007f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f16:	4614      	mov	r4, r2
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4b09      	ldr	r3, [pc, #36]	@ (8007f40 <__assert_func+0x2c>)
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68d8      	ldr	r0, [r3, #12]
 8007f22:	b14c      	cbz	r4, 8007f38 <__assert_func+0x24>
 8007f24:	4b07      	ldr	r3, [pc, #28]	@ (8007f44 <__assert_func+0x30>)
 8007f26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f2a:	9100      	str	r1, [sp, #0]
 8007f2c:	462b      	mov	r3, r5
 8007f2e:	4906      	ldr	r1, [pc, #24]	@ (8007f48 <__assert_func+0x34>)
 8007f30:	f000 fba8 	bl	8008684 <fiprintf>
 8007f34:	f000 fbb8 	bl	80086a8 <abort>
 8007f38:	4b04      	ldr	r3, [pc, #16]	@ (8007f4c <__assert_func+0x38>)
 8007f3a:	461c      	mov	r4, r3
 8007f3c:	e7f3      	b.n	8007f26 <__assert_func+0x12>
 8007f3e:	bf00      	nop
 8007f40:	20000018 	.word	0x20000018
 8007f44:	08008e16 	.word	0x08008e16
 8007f48:	08008e23 	.word	0x08008e23
 8007f4c:	08008e51 	.word	0x08008e51

08007f50 <_calloc_r>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	fba1 5402 	umull	r5, r4, r1, r2
 8007f56:	b934      	cbnz	r4, 8007f66 <_calloc_r+0x16>
 8007f58:	4629      	mov	r1, r5
 8007f5a:	f7fe f9e3 	bl	8006324 <_malloc_r>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	b928      	cbnz	r0, 8007f6e <_calloc_r+0x1e>
 8007f62:	4630      	mov	r0, r6
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
 8007f66:	220c      	movs	r2, #12
 8007f68:	2600      	movs	r6, #0
 8007f6a:	6002      	str	r2, [r0, #0]
 8007f6c:	e7f9      	b.n	8007f62 <_calloc_r+0x12>
 8007f6e:	462a      	mov	r2, r5
 8007f70:	4621      	mov	r1, r4
 8007f72:	f7fd fa76 	bl	8005462 <memset>
 8007f76:	e7f4      	b.n	8007f62 <_calloc_r+0x12>

08007f78 <rshift>:
 8007f78:	6903      	ldr	r3, [r0, #16]
 8007f7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f82:	f100 0414 	add.w	r4, r0, #20
 8007f86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f8a:	dd46      	ble.n	800801a <rshift+0xa2>
 8007f8c:	f011 011f 	ands.w	r1, r1, #31
 8007f90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f98:	d10c      	bne.n	8007fb4 <rshift+0x3c>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	f100 0710 	add.w	r7, r0, #16
 8007fa0:	42b1      	cmp	r1, r6
 8007fa2:	d335      	bcc.n	8008010 <rshift+0x98>
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	1eea      	subs	r2, r5, #3
 8007faa:	4296      	cmp	r6, r2
 8007fac:	bf38      	it	cc
 8007fae:	2300      	movcc	r3, #0
 8007fb0:	4423      	add	r3, r4
 8007fb2:	e015      	b.n	8007fe0 <rshift+0x68>
 8007fb4:	46a1      	mov	r9, r4
 8007fb6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007fba:	f1c1 0820 	rsb	r8, r1, #32
 8007fbe:	40cf      	lsrs	r7, r1
 8007fc0:	f105 0e04 	add.w	lr, r5, #4
 8007fc4:	4576      	cmp	r6, lr
 8007fc6:	46f4      	mov	ip, lr
 8007fc8:	d816      	bhi.n	8007ff8 <rshift+0x80>
 8007fca:	1a9a      	subs	r2, r3, r2
 8007fcc:	0092      	lsls	r2, r2, #2
 8007fce:	3a04      	subs	r2, #4
 8007fd0:	3501      	adds	r5, #1
 8007fd2:	42ae      	cmp	r6, r5
 8007fd4:	bf38      	it	cc
 8007fd6:	2200      	movcc	r2, #0
 8007fd8:	18a3      	adds	r3, r4, r2
 8007fda:	50a7      	str	r7, [r4, r2]
 8007fdc:	b107      	cbz	r7, 8007fe0 <rshift+0x68>
 8007fde:	3304      	adds	r3, #4
 8007fe0:	42a3      	cmp	r3, r4
 8007fe2:	eba3 0204 	sub.w	r2, r3, r4
 8007fe6:	bf08      	it	eq
 8007fe8:	2300      	moveq	r3, #0
 8007fea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fee:	6102      	str	r2, [r0, #16]
 8007ff0:	bf08      	it	eq
 8007ff2:	6143      	streq	r3, [r0, #20]
 8007ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ff8:	f8dc c000 	ldr.w	ip, [ip]
 8007ffc:	fa0c fc08 	lsl.w	ip, ip, r8
 8008000:	ea4c 0707 	orr.w	r7, ip, r7
 8008004:	f849 7b04 	str.w	r7, [r9], #4
 8008008:	f85e 7b04 	ldr.w	r7, [lr], #4
 800800c:	40cf      	lsrs	r7, r1
 800800e:	e7d9      	b.n	8007fc4 <rshift+0x4c>
 8008010:	f851 cb04 	ldr.w	ip, [r1], #4
 8008014:	f847 cf04 	str.w	ip, [r7, #4]!
 8008018:	e7c2      	b.n	8007fa0 <rshift+0x28>
 800801a:	4623      	mov	r3, r4
 800801c:	e7e0      	b.n	8007fe0 <rshift+0x68>

0800801e <__hexdig_fun>:
 800801e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008022:	2b09      	cmp	r3, #9
 8008024:	d802      	bhi.n	800802c <__hexdig_fun+0xe>
 8008026:	3820      	subs	r0, #32
 8008028:	b2c0      	uxtb	r0, r0
 800802a:	4770      	bx	lr
 800802c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008030:	2b05      	cmp	r3, #5
 8008032:	d801      	bhi.n	8008038 <__hexdig_fun+0x1a>
 8008034:	3847      	subs	r0, #71	@ 0x47
 8008036:	e7f7      	b.n	8008028 <__hexdig_fun+0xa>
 8008038:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800803c:	2b05      	cmp	r3, #5
 800803e:	d801      	bhi.n	8008044 <__hexdig_fun+0x26>
 8008040:	3827      	subs	r0, #39	@ 0x27
 8008042:	e7f1      	b.n	8008028 <__hexdig_fun+0xa>
 8008044:	2000      	movs	r0, #0
 8008046:	4770      	bx	lr

08008048 <__gethex>:
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	468a      	mov	sl, r1
 800804e:	4690      	mov	r8, r2
 8008050:	b085      	sub	sp, #20
 8008052:	9302      	str	r3, [sp, #8]
 8008054:	680b      	ldr	r3, [r1, #0]
 8008056:	9001      	str	r0, [sp, #4]
 8008058:	1c9c      	adds	r4, r3, #2
 800805a:	46a1      	mov	r9, r4
 800805c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008060:	2830      	cmp	r0, #48	@ 0x30
 8008062:	d0fa      	beq.n	800805a <__gethex+0x12>
 8008064:	eba9 0303 	sub.w	r3, r9, r3
 8008068:	f1a3 0b02 	sub.w	fp, r3, #2
 800806c:	f7ff ffd7 	bl	800801e <__hexdig_fun>
 8008070:	4605      	mov	r5, r0
 8008072:	2800      	cmp	r0, #0
 8008074:	d168      	bne.n	8008148 <__gethex+0x100>
 8008076:	2201      	movs	r2, #1
 8008078:	4648      	mov	r0, r9
 800807a:	499f      	ldr	r1, [pc, #636]	@ (80082f8 <__gethex+0x2b0>)
 800807c:	f7ff ff14 	bl	8007ea8 <strncmp>
 8008080:	4607      	mov	r7, r0
 8008082:	2800      	cmp	r0, #0
 8008084:	d167      	bne.n	8008156 <__gethex+0x10e>
 8008086:	f899 0001 	ldrb.w	r0, [r9, #1]
 800808a:	4626      	mov	r6, r4
 800808c:	f7ff ffc7 	bl	800801e <__hexdig_fun>
 8008090:	2800      	cmp	r0, #0
 8008092:	d062      	beq.n	800815a <__gethex+0x112>
 8008094:	4623      	mov	r3, r4
 8008096:	7818      	ldrb	r0, [r3, #0]
 8008098:	4699      	mov	r9, r3
 800809a:	2830      	cmp	r0, #48	@ 0x30
 800809c:	f103 0301 	add.w	r3, r3, #1
 80080a0:	d0f9      	beq.n	8008096 <__gethex+0x4e>
 80080a2:	f7ff ffbc 	bl	800801e <__hexdig_fun>
 80080a6:	fab0 f580 	clz	r5, r0
 80080aa:	f04f 0b01 	mov.w	fp, #1
 80080ae:	096d      	lsrs	r5, r5, #5
 80080b0:	464a      	mov	r2, r9
 80080b2:	4616      	mov	r6, r2
 80080b4:	7830      	ldrb	r0, [r6, #0]
 80080b6:	3201      	adds	r2, #1
 80080b8:	f7ff ffb1 	bl	800801e <__hexdig_fun>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1f8      	bne.n	80080b2 <__gethex+0x6a>
 80080c0:	2201      	movs	r2, #1
 80080c2:	4630      	mov	r0, r6
 80080c4:	498c      	ldr	r1, [pc, #560]	@ (80082f8 <__gethex+0x2b0>)
 80080c6:	f7ff feef 	bl	8007ea8 <strncmp>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d13f      	bne.n	800814e <__gethex+0x106>
 80080ce:	b944      	cbnz	r4, 80080e2 <__gethex+0x9a>
 80080d0:	1c74      	adds	r4, r6, #1
 80080d2:	4622      	mov	r2, r4
 80080d4:	4616      	mov	r6, r2
 80080d6:	7830      	ldrb	r0, [r6, #0]
 80080d8:	3201      	adds	r2, #1
 80080da:	f7ff ffa0 	bl	800801e <__hexdig_fun>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d1f8      	bne.n	80080d4 <__gethex+0x8c>
 80080e2:	1ba4      	subs	r4, r4, r6
 80080e4:	00a7      	lsls	r7, r4, #2
 80080e6:	7833      	ldrb	r3, [r6, #0]
 80080e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80080ec:	2b50      	cmp	r3, #80	@ 0x50
 80080ee:	d13e      	bne.n	800816e <__gethex+0x126>
 80080f0:	7873      	ldrb	r3, [r6, #1]
 80080f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80080f4:	d033      	beq.n	800815e <__gethex+0x116>
 80080f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80080f8:	d034      	beq.n	8008164 <__gethex+0x11c>
 80080fa:	2400      	movs	r4, #0
 80080fc:	1c71      	adds	r1, r6, #1
 80080fe:	7808      	ldrb	r0, [r1, #0]
 8008100:	f7ff ff8d 	bl	800801e <__hexdig_fun>
 8008104:	1e43      	subs	r3, r0, #1
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b18      	cmp	r3, #24
 800810a:	d830      	bhi.n	800816e <__gethex+0x126>
 800810c:	f1a0 0210 	sub.w	r2, r0, #16
 8008110:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008114:	f7ff ff83 	bl	800801e <__hexdig_fun>
 8008118:	f100 3cff 	add.w	ip, r0, #4294967295
 800811c:	fa5f fc8c 	uxtb.w	ip, ip
 8008120:	f1bc 0f18 	cmp.w	ip, #24
 8008124:	f04f 030a 	mov.w	r3, #10
 8008128:	d91e      	bls.n	8008168 <__gethex+0x120>
 800812a:	b104      	cbz	r4, 800812e <__gethex+0xe6>
 800812c:	4252      	negs	r2, r2
 800812e:	4417      	add	r7, r2
 8008130:	f8ca 1000 	str.w	r1, [sl]
 8008134:	b1ed      	cbz	r5, 8008172 <__gethex+0x12a>
 8008136:	f1bb 0f00 	cmp.w	fp, #0
 800813a:	bf0c      	ite	eq
 800813c:	2506      	moveq	r5, #6
 800813e:	2500      	movne	r5, #0
 8008140:	4628      	mov	r0, r5
 8008142:	b005      	add	sp, #20
 8008144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008148:	2500      	movs	r5, #0
 800814a:	462c      	mov	r4, r5
 800814c:	e7b0      	b.n	80080b0 <__gethex+0x68>
 800814e:	2c00      	cmp	r4, #0
 8008150:	d1c7      	bne.n	80080e2 <__gethex+0x9a>
 8008152:	4627      	mov	r7, r4
 8008154:	e7c7      	b.n	80080e6 <__gethex+0x9e>
 8008156:	464e      	mov	r6, r9
 8008158:	462f      	mov	r7, r5
 800815a:	2501      	movs	r5, #1
 800815c:	e7c3      	b.n	80080e6 <__gethex+0x9e>
 800815e:	2400      	movs	r4, #0
 8008160:	1cb1      	adds	r1, r6, #2
 8008162:	e7cc      	b.n	80080fe <__gethex+0xb6>
 8008164:	2401      	movs	r4, #1
 8008166:	e7fb      	b.n	8008160 <__gethex+0x118>
 8008168:	fb03 0002 	mla	r0, r3, r2, r0
 800816c:	e7ce      	b.n	800810c <__gethex+0xc4>
 800816e:	4631      	mov	r1, r6
 8008170:	e7de      	b.n	8008130 <__gethex+0xe8>
 8008172:	4629      	mov	r1, r5
 8008174:	eba6 0309 	sub.w	r3, r6, r9
 8008178:	3b01      	subs	r3, #1
 800817a:	2b07      	cmp	r3, #7
 800817c:	dc0a      	bgt.n	8008194 <__gethex+0x14c>
 800817e:	9801      	ldr	r0, [sp, #4]
 8008180:	f7fe f95c 	bl	800643c <_Balloc>
 8008184:	4604      	mov	r4, r0
 8008186:	b940      	cbnz	r0, 800819a <__gethex+0x152>
 8008188:	4602      	mov	r2, r0
 800818a:	21e4      	movs	r1, #228	@ 0xe4
 800818c:	4b5b      	ldr	r3, [pc, #364]	@ (80082fc <__gethex+0x2b4>)
 800818e:	485c      	ldr	r0, [pc, #368]	@ (8008300 <__gethex+0x2b8>)
 8008190:	f7ff fec0 	bl	8007f14 <__assert_func>
 8008194:	3101      	adds	r1, #1
 8008196:	105b      	asrs	r3, r3, #1
 8008198:	e7ef      	b.n	800817a <__gethex+0x132>
 800819a:	2300      	movs	r3, #0
 800819c:	f100 0a14 	add.w	sl, r0, #20
 80081a0:	4655      	mov	r5, sl
 80081a2:	469b      	mov	fp, r3
 80081a4:	45b1      	cmp	r9, r6
 80081a6:	d337      	bcc.n	8008218 <__gethex+0x1d0>
 80081a8:	f845 bb04 	str.w	fp, [r5], #4
 80081ac:	eba5 050a 	sub.w	r5, r5, sl
 80081b0:	10ad      	asrs	r5, r5, #2
 80081b2:	6125      	str	r5, [r4, #16]
 80081b4:	4658      	mov	r0, fp
 80081b6:	f7fe fa33 	bl	8006620 <__hi0bits>
 80081ba:	016d      	lsls	r5, r5, #5
 80081bc:	f8d8 6000 	ldr.w	r6, [r8]
 80081c0:	1a2d      	subs	r5, r5, r0
 80081c2:	42b5      	cmp	r5, r6
 80081c4:	dd54      	ble.n	8008270 <__gethex+0x228>
 80081c6:	1bad      	subs	r5, r5, r6
 80081c8:	4629      	mov	r1, r5
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7fe fdb5 	bl	8006d3a <__any_on>
 80081d0:	4681      	mov	r9, r0
 80081d2:	b178      	cbz	r0, 80081f4 <__gethex+0x1ac>
 80081d4:	f04f 0901 	mov.w	r9, #1
 80081d8:	1e6b      	subs	r3, r5, #1
 80081da:	1159      	asrs	r1, r3, #5
 80081dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80081e0:	f003 021f 	and.w	r2, r3, #31
 80081e4:	fa09 f202 	lsl.w	r2, r9, r2
 80081e8:	420a      	tst	r2, r1
 80081ea:	d003      	beq.n	80081f4 <__gethex+0x1ac>
 80081ec:	454b      	cmp	r3, r9
 80081ee:	dc36      	bgt.n	800825e <__gethex+0x216>
 80081f0:	f04f 0902 	mov.w	r9, #2
 80081f4:	4629      	mov	r1, r5
 80081f6:	4620      	mov	r0, r4
 80081f8:	f7ff febe 	bl	8007f78 <rshift>
 80081fc:	442f      	add	r7, r5
 80081fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008202:	42bb      	cmp	r3, r7
 8008204:	da42      	bge.n	800828c <__gethex+0x244>
 8008206:	4621      	mov	r1, r4
 8008208:	9801      	ldr	r0, [sp, #4]
 800820a:	f7fe f957 	bl	80064bc <_Bfree>
 800820e:	2300      	movs	r3, #0
 8008210:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008212:	25a3      	movs	r5, #163	@ 0xa3
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	e793      	b.n	8008140 <__gethex+0xf8>
 8008218:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800821c:	2a2e      	cmp	r2, #46	@ 0x2e
 800821e:	d012      	beq.n	8008246 <__gethex+0x1fe>
 8008220:	2b20      	cmp	r3, #32
 8008222:	d104      	bne.n	800822e <__gethex+0x1e6>
 8008224:	f845 bb04 	str.w	fp, [r5], #4
 8008228:	f04f 0b00 	mov.w	fp, #0
 800822c:	465b      	mov	r3, fp
 800822e:	7830      	ldrb	r0, [r6, #0]
 8008230:	9303      	str	r3, [sp, #12]
 8008232:	f7ff fef4 	bl	800801e <__hexdig_fun>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	f000 000f 	and.w	r0, r0, #15
 800823c:	4098      	lsls	r0, r3
 800823e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008242:	3304      	adds	r3, #4
 8008244:	e7ae      	b.n	80081a4 <__gethex+0x15c>
 8008246:	45b1      	cmp	r9, r6
 8008248:	d8ea      	bhi.n	8008220 <__gethex+0x1d8>
 800824a:	2201      	movs	r2, #1
 800824c:	4630      	mov	r0, r6
 800824e:	492a      	ldr	r1, [pc, #168]	@ (80082f8 <__gethex+0x2b0>)
 8008250:	9303      	str	r3, [sp, #12]
 8008252:	f7ff fe29 	bl	8007ea8 <strncmp>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	2800      	cmp	r0, #0
 800825a:	d1e1      	bne.n	8008220 <__gethex+0x1d8>
 800825c:	e7a2      	b.n	80081a4 <__gethex+0x15c>
 800825e:	4620      	mov	r0, r4
 8008260:	1ea9      	subs	r1, r5, #2
 8008262:	f7fe fd6a 	bl	8006d3a <__any_on>
 8008266:	2800      	cmp	r0, #0
 8008268:	d0c2      	beq.n	80081f0 <__gethex+0x1a8>
 800826a:	f04f 0903 	mov.w	r9, #3
 800826e:	e7c1      	b.n	80081f4 <__gethex+0x1ac>
 8008270:	da09      	bge.n	8008286 <__gethex+0x23e>
 8008272:	1b75      	subs	r5, r6, r5
 8008274:	4621      	mov	r1, r4
 8008276:	462a      	mov	r2, r5
 8008278:	9801      	ldr	r0, [sp, #4]
 800827a:	f7fe fb2f 	bl	80068dc <__lshift>
 800827e:	4604      	mov	r4, r0
 8008280:	1b7f      	subs	r7, r7, r5
 8008282:	f100 0a14 	add.w	sl, r0, #20
 8008286:	f04f 0900 	mov.w	r9, #0
 800828a:	e7b8      	b.n	80081fe <__gethex+0x1b6>
 800828c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008290:	42bd      	cmp	r5, r7
 8008292:	dd6f      	ble.n	8008374 <__gethex+0x32c>
 8008294:	1bed      	subs	r5, r5, r7
 8008296:	42ae      	cmp	r6, r5
 8008298:	dc34      	bgt.n	8008304 <__gethex+0x2bc>
 800829a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d022      	beq.n	80082e8 <__gethex+0x2a0>
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d024      	beq.n	80082f0 <__gethex+0x2a8>
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d115      	bne.n	80082d6 <__gethex+0x28e>
 80082aa:	42ae      	cmp	r6, r5
 80082ac:	d113      	bne.n	80082d6 <__gethex+0x28e>
 80082ae:	2e01      	cmp	r6, #1
 80082b0:	d10b      	bne.n	80082ca <__gethex+0x282>
 80082b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80082b6:	9a02      	ldr	r2, [sp, #8]
 80082b8:	2562      	movs	r5, #98	@ 0x62
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	2301      	movs	r3, #1
 80082be:	6123      	str	r3, [r4, #16]
 80082c0:	f8ca 3000 	str.w	r3, [sl]
 80082c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082c6:	601c      	str	r4, [r3, #0]
 80082c8:	e73a      	b.n	8008140 <__gethex+0xf8>
 80082ca:	4620      	mov	r0, r4
 80082cc:	1e71      	subs	r1, r6, #1
 80082ce:	f7fe fd34 	bl	8006d3a <__any_on>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d1ed      	bne.n	80082b2 <__gethex+0x26a>
 80082d6:	4621      	mov	r1, r4
 80082d8:	9801      	ldr	r0, [sp, #4]
 80082da:	f7fe f8ef 	bl	80064bc <_Bfree>
 80082de:	2300      	movs	r3, #0
 80082e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082e2:	2550      	movs	r5, #80	@ 0x50
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	e72b      	b.n	8008140 <__gethex+0xf8>
 80082e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f3      	bne.n	80082d6 <__gethex+0x28e>
 80082ee:	e7e0      	b.n	80082b2 <__gethex+0x26a>
 80082f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1dd      	bne.n	80082b2 <__gethex+0x26a>
 80082f6:	e7ee      	b.n	80082d6 <__gethex+0x28e>
 80082f8:	08008dfb 	.word	0x08008dfb
 80082fc:	08008d91 	.word	0x08008d91
 8008300:	08008e52 	.word	0x08008e52
 8008304:	1e6f      	subs	r7, r5, #1
 8008306:	f1b9 0f00 	cmp.w	r9, #0
 800830a:	d130      	bne.n	800836e <__gethex+0x326>
 800830c:	b127      	cbz	r7, 8008318 <__gethex+0x2d0>
 800830e:	4639      	mov	r1, r7
 8008310:	4620      	mov	r0, r4
 8008312:	f7fe fd12 	bl	8006d3a <__any_on>
 8008316:	4681      	mov	r9, r0
 8008318:	2301      	movs	r3, #1
 800831a:	4629      	mov	r1, r5
 800831c:	1b76      	subs	r6, r6, r5
 800831e:	2502      	movs	r5, #2
 8008320:	117a      	asrs	r2, r7, #5
 8008322:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008326:	f007 071f 	and.w	r7, r7, #31
 800832a:	40bb      	lsls	r3, r7
 800832c:	4213      	tst	r3, r2
 800832e:	4620      	mov	r0, r4
 8008330:	bf18      	it	ne
 8008332:	f049 0902 	orrne.w	r9, r9, #2
 8008336:	f7ff fe1f 	bl	8007f78 <rshift>
 800833a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800833e:	f1b9 0f00 	cmp.w	r9, #0
 8008342:	d047      	beq.n	80083d4 <__gethex+0x38c>
 8008344:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d015      	beq.n	8008378 <__gethex+0x330>
 800834c:	2b03      	cmp	r3, #3
 800834e:	d017      	beq.n	8008380 <__gethex+0x338>
 8008350:	2b01      	cmp	r3, #1
 8008352:	d109      	bne.n	8008368 <__gethex+0x320>
 8008354:	f019 0f02 	tst.w	r9, #2
 8008358:	d006      	beq.n	8008368 <__gethex+0x320>
 800835a:	f8da 3000 	ldr.w	r3, [sl]
 800835e:	ea49 0903 	orr.w	r9, r9, r3
 8008362:	f019 0f01 	tst.w	r9, #1
 8008366:	d10e      	bne.n	8008386 <__gethex+0x33e>
 8008368:	f045 0510 	orr.w	r5, r5, #16
 800836c:	e032      	b.n	80083d4 <__gethex+0x38c>
 800836e:	f04f 0901 	mov.w	r9, #1
 8008372:	e7d1      	b.n	8008318 <__gethex+0x2d0>
 8008374:	2501      	movs	r5, #1
 8008376:	e7e2      	b.n	800833e <__gethex+0x2f6>
 8008378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800837a:	f1c3 0301 	rsb	r3, r3, #1
 800837e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0f0      	beq.n	8008368 <__gethex+0x320>
 8008386:	f04f 0c00 	mov.w	ip, #0
 800838a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800838e:	f104 0314 	add.w	r3, r4, #20
 8008392:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008396:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800839a:	4618      	mov	r0, r3
 800839c:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80083a4:	d01b      	beq.n	80083de <__gethex+0x396>
 80083a6:	3201      	adds	r2, #1
 80083a8:	6002      	str	r2, [r0, #0]
 80083aa:	2d02      	cmp	r5, #2
 80083ac:	f104 0314 	add.w	r3, r4, #20
 80083b0:	d13c      	bne.n	800842c <__gethex+0x3e4>
 80083b2:	f8d8 2000 	ldr.w	r2, [r8]
 80083b6:	3a01      	subs	r2, #1
 80083b8:	42b2      	cmp	r2, r6
 80083ba:	d109      	bne.n	80083d0 <__gethex+0x388>
 80083bc:	2201      	movs	r2, #1
 80083be:	1171      	asrs	r1, r6, #5
 80083c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083c4:	f006 061f 	and.w	r6, r6, #31
 80083c8:	fa02 f606 	lsl.w	r6, r2, r6
 80083cc:	421e      	tst	r6, r3
 80083ce:	d13a      	bne.n	8008446 <__gethex+0x3fe>
 80083d0:	f045 0520 	orr.w	r5, r5, #32
 80083d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083d6:	601c      	str	r4, [r3, #0]
 80083d8:	9b02      	ldr	r3, [sp, #8]
 80083da:	601f      	str	r7, [r3, #0]
 80083dc:	e6b0      	b.n	8008140 <__gethex+0xf8>
 80083de:	4299      	cmp	r1, r3
 80083e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80083e4:	d8d9      	bhi.n	800839a <__gethex+0x352>
 80083e6:	68a3      	ldr	r3, [r4, #8]
 80083e8:	459b      	cmp	fp, r3
 80083ea:	db17      	blt.n	800841c <__gethex+0x3d4>
 80083ec:	6861      	ldr	r1, [r4, #4]
 80083ee:	9801      	ldr	r0, [sp, #4]
 80083f0:	3101      	adds	r1, #1
 80083f2:	f7fe f823 	bl	800643c <_Balloc>
 80083f6:	4681      	mov	r9, r0
 80083f8:	b918      	cbnz	r0, 8008402 <__gethex+0x3ba>
 80083fa:	4602      	mov	r2, r0
 80083fc:	2184      	movs	r1, #132	@ 0x84
 80083fe:	4b19      	ldr	r3, [pc, #100]	@ (8008464 <__gethex+0x41c>)
 8008400:	e6c5      	b.n	800818e <__gethex+0x146>
 8008402:	6922      	ldr	r2, [r4, #16]
 8008404:	f104 010c 	add.w	r1, r4, #12
 8008408:	3202      	adds	r2, #2
 800840a:	0092      	lsls	r2, r2, #2
 800840c:	300c      	adds	r0, #12
 800840e:	f7ff fd6d 	bl	8007eec <memcpy>
 8008412:	4621      	mov	r1, r4
 8008414:	9801      	ldr	r0, [sp, #4]
 8008416:	f7fe f851 	bl	80064bc <_Bfree>
 800841a:	464c      	mov	r4, r9
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	6122      	str	r2, [r4, #16]
 8008422:	2201      	movs	r2, #1
 8008424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008428:	615a      	str	r2, [r3, #20]
 800842a:	e7be      	b.n	80083aa <__gethex+0x362>
 800842c:	6922      	ldr	r2, [r4, #16]
 800842e:	455a      	cmp	r2, fp
 8008430:	dd0b      	ble.n	800844a <__gethex+0x402>
 8008432:	2101      	movs	r1, #1
 8008434:	4620      	mov	r0, r4
 8008436:	f7ff fd9f 	bl	8007f78 <rshift>
 800843a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800843e:	3701      	adds	r7, #1
 8008440:	42bb      	cmp	r3, r7
 8008442:	f6ff aee0 	blt.w	8008206 <__gethex+0x1be>
 8008446:	2501      	movs	r5, #1
 8008448:	e7c2      	b.n	80083d0 <__gethex+0x388>
 800844a:	f016 061f 	ands.w	r6, r6, #31
 800844e:	d0fa      	beq.n	8008446 <__gethex+0x3fe>
 8008450:	4453      	add	r3, sl
 8008452:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008456:	f7fe f8e3 	bl	8006620 <__hi0bits>
 800845a:	f1c6 0620 	rsb	r6, r6, #32
 800845e:	42b0      	cmp	r0, r6
 8008460:	dbe7      	blt.n	8008432 <__gethex+0x3ea>
 8008462:	e7f0      	b.n	8008446 <__gethex+0x3fe>
 8008464:	08008d91 	.word	0x08008d91

08008468 <L_shift>:
 8008468:	f1c2 0208 	rsb	r2, r2, #8
 800846c:	0092      	lsls	r2, r2, #2
 800846e:	b570      	push	{r4, r5, r6, lr}
 8008470:	f1c2 0620 	rsb	r6, r2, #32
 8008474:	6843      	ldr	r3, [r0, #4]
 8008476:	6804      	ldr	r4, [r0, #0]
 8008478:	fa03 f506 	lsl.w	r5, r3, r6
 800847c:	432c      	orrs	r4, r5
 800847e:	40d3      	lsrs	r3, r2
 8008480:	6004      	str	r4, [r0, #0]
 8008482:	f840 3f04 	str.w	r3, [r0, #4]!
 8008486:	4288      	cmp	r0, r1
 8008488:	d3f4      	bcc.n	8008474 <L_shift+0xc>
 800848a:	bd70      	pop	{r4, r5, r6, pc}

0800848c <__match>:
 800848c:	b530      	push	{r4, r5, lr}
 800848e:	6803      	ldr	r3, [r0, #0]
 8008490:	3301      	adds	r3, #1
 8008492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008496:	b914      	cbnz	r4, 800849e <__match+0x12>
 8008498:	6003      	str	r3, [r0, #0]
 800849a:	2001      	movs	r0, #1
 800849c:	bd30      	pop	{r4, r5, pc}
 800849e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80084a6:	2d19      	cmp	r5, #25
 80084a8:	bf98      	it	ls
 80084aa:	3220      	addls	r2, #32
 80084ac:	42a2      	cmp	r2, r4
 80084ae:	d0f0      	beq.n	8008492 <__match+0x6>
 80084b0:	2000      	movs	r0, #0
 80084b2:	e7f3      	b.n	800849c <__match+0x10>

080084b4 <__hexnan>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	2500      	movs	r5, #0
 80084ba:	680b      	ldr	r3, [r1, #0]
 80084bc:	4682      	mov	sl, r0
 80084be:	115e      	asrs	r6, r3, #5
 80084c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084c4:	f013 031f 	ands.w	r3, r3, #31
 80084c8:	bf18      	it	ne
 80084ca:	3604      	addne	r6, #4
 80084cc:	1f37      	subs	r7, r6, #4
 80084ce:	4690      	mov	r8, r2
 80084d0:	46b9      	mov	r9, r7
 80084d2:	463c      	mov	r4, r7
 80084d4:	46ab      	mov	fp, r5
 80084d6:	b087      	sub	sp, #28
 80084d8:	6801      	ldr	r1, [r0, #0]
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	f846 5c04 	str.w	r5, [r6, #-4]
 80084e0:	9502      	str	r5, [sp, #8]
 80084e2:	784a      	ldrb	r2, [r1, #1]
 80084e4:	1c4b      	adds	r3, r1, #1
 80084e6:	9303      	str	r3, [sp, #12]
 80084e8:	b342      	cbz	r2, 800853c <__hexnan+0x88>
 80084ea:	4610      	mov	r0, r2
 80084ec:	9105      	str	r1, [sp, #20]
 80084ee:	9204      	str	r2, [sp, #16]
 80084f0:	f7ff fd95 	bl	800801e <__hexdig_fun>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d151      	bne.n	800859c <__hexnan+0xe8>
 80084f8:	9a04      	ldr	r2, [sp, #16]
 80084fa:	9905      	ldr	r1, [sp, #20]
 80084fc:	2a20      	cmp	r2, #32
 80084fe:	d818      	bhi.n	8008532 <__hexnan+0x7e>
 8008500:	9b02      	ldr	r3, [sp, #8]
 8008502:	459b      	cmp	fp, r3
 8008504:	dd13      	ble.n	800852e <__hexnan+0x7a>
 8008506:	454c      	cmp	r4, r9
 8008508:	d206      	bcs.n	8008518 <__hexnan+0x64>
 800850a:	2d07      	cmp	r5, #7
 800850c:	dc04      	bgt.n	8008518 <__hexnan+0x64>
 800850e:	462a      	mov	r2, r5
 8008510:	4649      	mov	r1, r9
 8008512:	4620      	mov	r0, r4
 8008514:	f7ff ffa8 	bl	8008468 <L_shift>
 8008518:	4544      	cmp	r4, r8
 800851a:	d952      	bls.n	80085c2 <__hexnan+0x10e>
 800851c:	2300      	movs	r3, #0
 800851e:	f1a4 0904 	sub.w	r9, r4, #4
 8008522:	f844 3c04 	str.w	r3, [r4, #-4]
 8008526:	461d      	mov	r5, r3
 8008528:	464c      	mov	r4, r9
 800852a:	f8cd b008 	str.w	fp, [sp, #8]
 800852e:	9903      	ldr	r1, [sp, #12]
 8008530:	e7d7      	b.n	80084e2 <__hexnan+0x2e>
 8008532:	2a29      	cmp	r2, #41	@ 0x29
 8008534:	d157      	bne.n	80085e6 <__hexnan+0x132>
 8008536:	3102      	adds	r1, #2
 8008538:	f8ca 1000 	str.w	r1, [sl]
 800853c:	f1bb 0f00 	cmp.w	fp, #0
 8008540:	d051      	beq.n	80085e6 <__hexnan+0x132>
 8008542:	454c      	cmp	r4, r9
 8008544:	d206      	bcs.n	8008554 <__hexnan+0xa0>
 8008546:	2d07      	cmp	r5, #7
 8008548:	dc04      	bgt.n	8008554 <__hexnan+0xa0>
 800854a:	462a      	mov	r2, r5
 800854c:	4649      	mov	r1, r9
 800854e:	4620      	mov	r0, r4
 8008550:	f7ff ff8a 	bl	8008468 <L_shift>
 8008554:	4544      	cmp	r4, r8
 8008556:	d936      	bls.n	80085c6 <__hexnan+0x112>
 8008558:	4623      	mov	r3, r4
 800855a:	f1a8 0204 	sub.w	r2, r8, #4
 800855e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008562:	429f      	cmp	r7, r3
 8008564:	f842 1f04 	str.w	r1, [r2, #4]!
 8008568:	d2f9      	bcs.n	800855e <__hexnan+0xaa>
 800856a:	1b3b      	subs	r3, r7, r4
 800856c:	f023 0303 	bic.w	r3, r3, #3
 8008570:	3304      	adds	r3, #4
 8008572:	3401      	adds	r4, #1
 8008574:	3e03      	subs	r6, #3
 8008576:	42b4      	cmp	r4, r6
 8008578:	bf88      	it	hi
 800857a:	2304      	movhi	r3, #4
 800857c:	2200      	movs	r2, #0
 800857e:	4443      	add	r3, r8
 8008580:	f843 2b04 	str.w	r2, [r3], #4
 8008584:	429f      	cmp	r7, r3
 8008586:	d2fb      	bcs.n	8008580 <__hexnan+0xcc>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	b91b      	cbnz	r3, 8008594 <__hexnan+0xe0>
 800858c:	4547      	cmp	r7, r8
 800858e:	d128      	bne.n	80085e2 <__hexnan+0x12e>
 8008590:	2301      	movs	r3, #1
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	2005      	movs	r0, #5
 8008596:	b007      	add	sp, #28
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	3501      	adds	r5, #1
 800859e:	2d08      	cmp	r5, #8
 80085a0:	f10b 0b01 	add.w	fp, fp, #1
 80085a4:	dd06      	ble.n	80085b4 <__hexnan+0x100>
 80085a6:	4544      	cmp	r4, r8
 80085a8:	d9c1      	bls.n	800852e <__hexnan+0x7a>
 80085aa:	2300      	movs	r3, #0
 80085ac:	2501      	movs	r5, #1
 80085ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80085b2:	3c04      	subs	r4, #4
 80085b4:	6822      	ldr	r2, [r4, #0]
 80085b6:	f000 000f 	and.w	r0, r0, #15
 80085ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80085be:	6020      	str	r0, [r4, #0]
 80085c0:	e7b5      	b.n	800852e <__hexnan+0x7a>
 80085c2:	2508      	movs	r5, #8
 80085c4:	e7b3      	b.n	800852e <__hexnan+0x7a>
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0dd      	beq.n	8008588 <__hexnan+0xd4>
 80085cc:	f04f 32ff 	mov.w	r2, #4294967295
 80085d0:	f1c3 0320 	rsb	r3, r3, #32
 80085d4:	40da      	lsrs	r2, r3
 80085d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80085da:	4013      	ands	r3, r2
 80085dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80085e0:	e7d2      	b.n	8008588 <__hexnan+0xd4>
 80085e2:	3f04      	subs	r7, #4
 80085e4:	e7d0      	b.n	8008588 <__hexnan+0xd4>
 80085e6:	2004      	movs	r0, #4
 80085e8:	e7d5      	b.n	8008596 <__hexnan+0xe2>

080085ea <__ascii_mbtowc>:
 80085ea:	b082      	sub	sp, #8
 80085ec:	b901      	cbnz	r1, 80085f0 <__ascii_mbtowc+0x6>
 80085ee:	a901      	add	r1, sp, #4
 80085f0:	b142      	cbz	r2, 8008604 <__ascii_mbtowc+0x1a>
 80085f2:	b14b      	cbz	r3, 8008608 <__ascii_mbtowc+0x1e>
 80085f4:	7813      	ldrb	r3, [r2, #0]
 80085f6:	600b      	str	r3, [r1, #0]
 80085f8:	7812      	ldrb	r2, [r2, #0]
 80085fa:	1e10      	subs	r0, r2, #0
 80085fc:	bf18      	it	ne
 80085fe:	2001      	movne	r0, #1
 8008600:	b002      	add	sp, #8
 8008602:	4770      	bx	lr
 8008604:	4610      	mov	r0, r2
 8008606:	e7fb      	b.n	8008600 <__ascii_mbtowc+0x16>
 8008608:	f06f 0001 	mvn.w	r0, #1
 800860c:	e7f8      	b.n	8008600 <__ascii_mbtowc+0x16>

0800860e <_realloc_r>:
 800860e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008612:	4607      	mov	r7, r0
 8008614:	4614      	mov	r4, r2
 8008616:	460d      	mov	r5, r1
 8008618:	b921      	cbnz	r1, 8008624 <_realloc_r+0x16>
 800861a:	4611      	mov	r1, r2
 800861c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	f7fd be80 	b.w	8006324 <_malloc_r>
 8008624:	b92a      	cbnz	r2, 8008632 <_realloc_r+0x24>
 8008626:	f7fd fe0b 	bl	8006240 <_free_r>
 800862a:	4625      	mov	r5, r4
 800862c:	4628      	mov	r0, r5
 800862e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008632:	f000 f840 	bl	80086b6 <_malloc_usable_size_r>
 8008636:	4284      	cmp	r4, r0
 8008638:	4606      	mov	r6, r0
 800863a:	d802      	bhi.n	8008642 <_realloc_r+0x34>
 800863c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008640:	d8f4      	bhi.n	800862c <_realloc_r+0x1e>
 8008642:	4621      	mov	r1, r4
 8008644:	4638      	mov	r0, r7
 8008646:	f7fd fe6d 	bl	8006324 <_malloc_r>
 800864a:	4680      	mov	r8, r0
 800864c:	b908      	cbnz	r0, 8008652 <_realloc_r+0x44>
 800864e:	4645      	mov	r5, r8
 8008650:	e7ec      	b.n	800862c <_realloc_r+0x1e>
 8008652:	42b4      	cmp	r4, r6
 8008654:	4622      	mov	r2, r4
 8008656:	4629      	mov	r1, r5
 8008658:	bf28      	it	cs
 800865a:	4632      	movcs	r2, r6
 800865c:	f7ff fc46 	bl	8007eec <memcpy>
 8008660:	4629      	mov	r1, r5
 8008662:	4638      	mov	r0, r7
 8008664:	f7fd fdec 	bl	8006240 <_free_r>
 8008668:	e7f1      	b.n	800864e <_realloc_r+0x40>

0800866a <__ascii_wctomb>:
 800866a:	4603      	mov	r3, r0
 800866c:	4608      	mov	r0, r1
 800866e:	b141      	cbz	r1, 8008682 <__ascii_wctomb+0x18>
 8008670:	2aff      	cmp	r2, #255	@ 0xff
 8008672:	d904      	bls.n	800867e <__ascii_wctomb+0x14>
 8008674:	228a      	movs	r2, #138	@ 0x8a
 8008676:	f04f 30ff 	mov.w	r0, #4294967295
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	4770      	bx	lr
 800867e:	2001      	movs	r0, #1
 8008680:	700a      	strb	r2, [r1, #0]
 8008682:	4770      	bx	lr

08008684 <fiprintf>:
 8008684:	b40e      	push	{r1, r2, r3}
 8008686:	b503      	push	{r0, r1, lr}
 8008688:	4601      	mov	r1, r0
 800868a:	ab03      	add	r3, sp, #12
 800868c:	4805      	ldr	r0, [pc, #20]	@ (80086a4 <fiprintf+0x20>)
 800868e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008692:	6800      	ldr	r0, [r0, #0]
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	f000 f83d 	bl	8008714 <_vfiprintf_r>
 800869a:	b002      	add	sp, #8
 800869c:	f85d eb04 	ldr.w	lr, [sp], #4
 80086a0:	b003      	add	sp, #12
 80086a2:	4770      	bx	lr
 80086a4:	20000018 	.word	0x20000018

080086a8 <abort>:
 80086a8:	2006      	movs	r0, #6
 80086aa:	b508      	push	{r3, lr}
 80086ac:	f000 fa06 	bl	8008abc <raise>
 80086b0:	2001      	movs	r0, #1
 80086b2:	f7f8 fec2 	bl	800143a <_exit>

080086b6 <_malloc_usable_size_r>:
 80086b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ba:	1f18      	subs	r0, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	bfbc      	itt	lt
 80086c0:	580b      	ldrlt	r3, [r1, r0]
 80086c2:	18c0      	addlt	r0, r0, r3
 80086c4:	4770      	bx	lr

080086c6 <__sfputc_r>:
 80086c6:	6893      	ldr	r3, [r2, #8]
 80086c8:	b410      	push	{r4}
 80086ca:	3b01      	subs	r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	6093      	str	r3, [r2, #8]
 80086d0:	da07      	bge.n	80086e2 <__sfputc_r+0x1c>
 80086d2:	6994      	ldr	r4, [r2, #24]
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	db01      	blt.n	80086dc <__sfputc_r+0x16>
 80086d8:	290a      	cmp	r1, #10
 80086da:	d102      	bne.n	80086e2 <__sfputc_r+0x1c>
 80086dc:	bc10      	pop	{r4}
 80086de:	f000 b931 	b.w	8008944 <__swbuf_r>
 80086e2:	6813      	ldr	r3, [r2, #0]
 80086e4:	1c58      	adds	r0, r3, #1
 80086e6:	6010      	str	r0, [r2, #0]
 80086e8:	7019      	strb	r1, [r3, #0]
 80086ea:	4608      	mov	r0, r1
 80086ec:	bc10      	pop	{r4}
 80086ee:	4770      	bx	lr

080086f0 <__sfputs_r>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	4606      	mov	r6, r0
 80086f4:	460f      	mov	r7, r1
 80086f6:	4614      	mov	r4, r2
 80086f8:	18d5      	adds	r5, r2, r3
 80086fa:	42ac      	cmp	r4, r5
 80086fc:	d101      	bne.n	8008702 <__sfputs_r+0x12>
 80086fe:	2000      	movs	r0, #0
 8008700:	e007      	b.n	8008712 <__sfputs_r+0x22>
 8008702:	463a      	mov	r2, r7
 8008704:	4630      	mov	r0, r6
 8008706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870a:	f7ff ffdc 	bl	80086c6 <__sfputc_r>
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	d1f3      	bne.n	80086fa <__sfputs_r+0xa>
 8008712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008714 <_vfiprintf_r>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	460d      	mov	r5, r1
 800871a:	4614      	mov	r4, r2
 800871c:	4698      	mov	r8, r3
 800871e:	4606      	mov	r6, r0
 8008720:	b09d      	sub	sp, #116	@ 0x74
 8008722:	b118      	cbz	r0, 800872c <_vfiprintf_r+0x18>
 8008724:	6a03      	ldr	r3, [r0, #32]
 8008726:	b90b      	cbnz	r3, 800872c <_vfiprintf_r+0x18>
 8008728:	f7fc fe00 	bl	800532c <__sinit>
 800872c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800872e:	07d9      	lsls	r1, r3, #31
 8008730:	d405      	bmi.n	800873e <_vfiprintf_r+0x2a>
 8008732:	89ab      	ldrh	r3, [r5, #12]
 8008734:	059a      	lsls	r2, r3, #22
 8008736:	d402      	bmi.n	800873e <_vfiprintf_r+0x2a>
 8008738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800873a:	f7fc ff10 	bl	800555e <__retarget_lock_acquire_recursive>
 800873e:	89ab      	ldrh	r3, [r5, #12]
 8008740:	071b      	lsls	r3, r3, #28
 8008742:	d501      	bpl.n	8008748 <_vfiprintf_r+0x34>
 8008744:	692b      	ldr	r3, [r5, #16]
 8008746:	b99b      	cbnz	r3, 8008770 <_vfiprintf_r+0x5c>
 8008748:	4629      	mov	r1, r5
 800874a:	4630      	mov	r0, r6
 800874c:	f000 f938 	bl	80089c0 <__swsetup_r>
 8008750:	b170      	cbz	r0, 8008770 <_vfiprintf_r+0x5c>
 8008752:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008754:	07dc      	lsls	r4, r3, #31
 8008756:	d504      	bpl.n	8008762 <_vfiprintf_r+0x4e>
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	b01d      	add	sp, #116	@ 0x74
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008762:	89ab      	ldrh	r3, [r5, #12]
 8008764:	0598      	lsls	r0, r3, #22
 8008766:	d4f7      	bmi.n	8008758 <_vfiprintf_r+0x44>
 8008768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800876a:	f7fc fef9 	bl	8005560 <__retarget_lock_release_recursive>
 800876e:	e7f3      	b.n	8008758 <_vfiprintf_r+0x44>
 8008770:	2300      	movs	r3, #0
 8008772:	9309      	str	r3, [sp, #36]	@ 0x24
 8008774:	2320      	movs	r3, #32
 8008776:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800877a:	2330      	movs	r3, #48	@ 0x30
 800877c:	f04f 0901 	mov.w	r9, #1
 8008780:	f8cd 800c 	str.w	r8, [sp, #12]
 8008784:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008930 <_vfiprintf_r+0x21c>
 8008788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800878c:	4623      	mov	r3, r4
 800878e:	469a      	mov	sl, r3
 8008790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008794:	b10a      	cbz	r2, 800879a <_vfiprintf_r+0x86>
 8008796:	2a25      	cmp	r2, #37	@ 0x25
 8008798:	d1f9      	bne.n	800878e <_vfiprintf_r+0x7a>
 800879a:	ebba 0b04 	subs.w	fp, sl, r4
 800879e:	d00b      	beq.n	80087b8 <_vfiprintf_r+0xa4>
 80087a0:	465b      	mov	r3, fp
 80087a2:	4622      	mov	r2, r4
 80087a4:	4629      	mov	r1, r5
 80087a6:	4630      	mov	r0, r6
 80087a8:	f7ff ffa2 	bl	80086f0 <__sfputs_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	f000 80a7 	beq.w	8008900 <_vfiprintf_r+0x1ec>
 80087b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087b4:	445a      	add	r2, fp
 80087b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80087b8:	f89a 3000 	ldrb.w	r3, [sl]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 809f 	beq.w	8008900 <_vfiprintf_r+0x1ec>
 80087c2:	2300      	movs	r3, #0
 80087c4:	f04f 32ff 	mov.w	r2, #4294967295
 80087c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087cc:	f10a 0a01 	add.w	sl, sl, #1
 80087d0:	9304      	str	r3, [sp, #16]
 80087d2:	9307      	str	r3, [sp, #28]
 80087d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80087da:	4654      	mov	r4, sl
 80087dc:	2205      	movs	r2, #5
 80087de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e2:	4853      	ldr	r0, [pc, #332]	@ (8008930 <_vfiprintf_r+0x21c>)
 80087e4:	f7fc febd 	bl	8005562 <memchr>
 80087e8:	9a04      	ldr	r2, [sp, #16]
 80087ea:	b9d8      	cbnz	r0, 8008824 <_vfiprintf_r+0x110>
 80087ec:	06d1      	lsls	r1, r2, #27
 80087ee:	bf44      	itt	mi
 80087f0:	2320      	movmi	r3, #32
 80087f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087f6:	0713      	lsls	r3, r2, #28
 80087f8:	bf44      	itt	mi
 80087fa:	232b      	movmi	r3, #43	@ 0x2b
 80087fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008800:	f89a 3000 	ldrb.w	r3, [sl]
 8008804:	2b2a      	cmp	r3, #42	@ 0x2a
 8008806:	d015      	beq.n	8008834 <_vfiprintf_r+0x120>
 8008808:	4654      	mov	r4, sl
 800880a:	2000      	movs	r0, #0
 800880c:	f04f 0c0a 	mov.w	ip, #10
 8008810:	9a07      	ldr	r2, [sp, #28]
 8008812:	4621      	mov	r1, r4
 8008814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008818:	3b30      	subs	r3, #48	@ 0x30
 800881a:	2b09      	cmp	r3, #9
 800881c:	d94b      	bls.n	80088b6 <_vfiprintf_r+0x1a2>
 800881e:	b1b0      	cbz	r0, 800884e <_vfiprintf_r+0x13a>
 8008820:	9207      	str	r2, [sp, #28]
 8008822:	e014      	b.n	800884e <_vfiprintf_r+0x13a>
 8008824:	eba0 0308 	sub.w	r3, r0, r8
 8008828:	fa09 f303 	lsl.w	r3, r9, r3
 800882c:	4313      	orrs	r3, r2
 800882e:	46a2      	mov	sl, r4
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	e7d2      	b.n	80087da <_vfiprintf_r+0xc6>
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	1d19      	adds	r1, r3, #4
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	9103      	str	r1, [sp, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfbb      	ittet	lt
 8008840:	425b      	neglt	r3, r3
 8008842:	f042 0202 	orrlt.w	r2, r2, #2
 8008846:	9307      	strge	r3, [sp, #28]
 8008848:	9307      	strlt	r3, [sp, #28]
 800884a:	bfb8      	it	lt
 800884c:	9204      	strlt	r2, [sp, #16]
 800884e:	7823      	ldrb	r3, [r4, #0]
 8008850:	2b2e      	cmp	r3, #46	@ 0x2e
 8008852:	d10a      	bne.n	800886a <_vfiprintf_r+0x156>
 8008854:	7863      	ldrb	r3, [r4, #1]
 8008856:	2b2a      	cmp	r3, #42	@ 0x2a
 8008858:	d132      	bne.n	80088c0 <_vfiprintf_r+0x1ac>
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	3402      	adds	r4, #2
 800885e:	1d1a      	adds	r2, r3, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	9203      	str	r2, [sp, #12]
 8008864:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008868:	9305      	str	r3, [sp, #20]
 800886a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008934 <_vfiprintf_r+0x220>
 800886e:	2203      	movs	r2, #3
 8008870:	4650      	mov	r0, sl
 8008872:	7821      	ldrb	r1, [r4, #0]
 8008874:	f7fc fe75 	bl	8005562 <memchr>
 8008878:	b138      	cbz	r0, 800888a <_vfiprintf_r+0x176>
 800887a:	2240      	movs	r2, #64	@ 0x40
 800887c:	9b04      	ldr	r3, [sp, #16]
 800887e:	eba0 000a 	sub.w	r0, r0, sl
 8008882:	4082      	lsls	r2, r0
 8008884:	4313      	orrs	r3, r2
 8008886:	3401      	adds	r4, #1
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800888e:	2206      	movs	r2, #6
 8008890:	4829      	ldr	r0, [pc, #164]	@ (8008938 <_vfiprintf_r+0x224>)
 8008892:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008896:	f7fc fe64 	bl	8005562 <memchr>
 800889a:	2800      	cmp	r0, #0
 800889c:	d03f      	beq.n	800891e <_vfiprintf_r+0x20a>
 800889e:	4b27      	ldr	r3, [pc, #156]	@ (800893c <_vfiprintf_r+0x228>)
 80088a0:	bb1b      	cbnz	r3, 80088ea <_vfiprintf_r+0x1d6>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	3307      	adds	r3, #7
 80088a6:	f023 0307 	bic.w	r3, r3, #7
 80088aa:	3308      	adds	r3, #8
 80088ac:	9303      	str	r3, [sp, #12]
 80088ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b0:	443b      	add	r3, r7
 80088b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088b4:	e76a      	b.n	800878c <_vfiprintf_r+0x78>
 80088b6:	460c      	mov	r4, r1
 80088b8:	2001      	movs	r0, #1
 80088ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80088be:	e7a8      	b.n	8008812 <_vfiprintf_r+0xfe>
 80088c0:	2300      	movs	r3, #0
 80088c2:	f04f 0c0a 	mov.w	ip, #10
 80088c6:	4619      	mov	r1, r3
 80088c8:	3401      	adds	r4, #1
 80088ca:	9305      	str	r3, [sp, #20]
 80088cc:	4620      	mov	r0, r4
 80088ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088d2:	3a30      	subs	r2, #48	@ 0x30
 80088d4:	2a09      	cmp	r2, #9
 80088d6:	d903      	bls.n	80088e0 <_vfiprintf_r+0x1cc>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0c6      	beq.n	800886a <_vfiprintf_r+0x156>
 80088dc:	9105      	str	r1, [sp, #20]
 80088de:	e7c4      	b.n	800886a <_vfiprintf_r+0x156>
 80088e0:	4604      	mov	r4, r0
 80088e2:	2301      	movs	r3, #1
 80088e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088e8:	e7f0      	b.n	80088cc <_vfiprintf_r+0x1b8>
 80088ea:	ab03      	add	r3, sp, #12
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	462a      	mov	r2, r5
 80088f0:	4630      	mov	r0, r6
 80088f2:	4b13      	ldr	r3, [pc, #76]	@ (8008940 <_vfiprintf_r+0x22c>)
 80088f4:	a904      	add	r1, sp, #16
 80088f6:	f7fb fec7 	bl	8004688 <_printf_float>
 80088fa:	4607      	mov	r7, r0
 80088fc:	1c78      	adds	r0, r7, #1
 80088fe:	d1d6      	bne.n	80088ae <_vfiprintf_r+0x19a>
 8008900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008902:	07d9      	lsls	r1, r3, #31
 8008904:	d405      	bmi.n	8008912 <_vfiprintf_r+0x1fe>
 8008906:	89ab      	ldrh	r3, [r5, #12]
 8008908:	059a      	lsls	r2, r3, #22
 800890a:	d402      	bmi.n	8008912 <_vfiprintf_r+0x1fe>
 800890c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800890e:	f7fc fe27 	bl	8005560 <__retarget_lock_release_recursive>
 8008912:	89ab      	ldrh	r3, [r5, #12]
 8008914:	065b      	lsls	r3, r3, #25
 8008916:	f53f af1f 	bmi.w	8008758 <_vfiprintf_r+0x44>
 800891a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800891c:	e71e      	b.n	800875c <_vfiprintf_r+0x48>
 800891e:	ab03      	add	r3, sp, #12
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	462a      	mov	r2, r5
 8008924:	4630      	mov	r0, r6
 8008926:	4b06      	ldr	r3, [pc, #24]	@ (8008940 <_vfiprintf_r+0x22c>)
 8008928:	a904      	add	r1, sp, #16
 800892a:	f7fc f94b 	bl	8004bc4 <_printf_i>
 800892e:	e7e4      	b.n	80088fa <_vfiprintf_r+0x1e6>
 8008930:	08008dfd 	.word	0x08008dfd
 8008934:	08008e03 	.word	0x08008e03
 8008938:	08008e07 	.word	0x08008e07
 800893c:	08004689 	.word	0x08004689
 8008940:	080086f1 	.word	0x080086f1

08008944 <__swbuf_r>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	460e      	mov	r6, r1
 8008948:	4614      	mov	r4, r2
 800894a:	4605      	mov	r5, r0
 800894c:	b118      	cbz	r0, 8008956 <__swbuf_r+0x12>
 800894e:	6a03      	ldr	r3, [r0, #32]
 8008950:	b90b      	cbnz	r3, 8008956 <__swbuf_r+0x12>
 8008952:	f7fc fceb 	bl	800532c <__sinit>
 8008956:	69a3      	ldr	r3, [r4, #24]
 8008958:	60a3      	str	r3, [r4, #8]
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	071a      	lsls	r2, r3, #28
 800895e:	d501      	bpl.n	8008964 <__swbuf_r+0x20>
 8008960:	6923      	ldr	r3, [r4, #16]
 8008962:	b943      	cbnz	r3, 8008976 <__swbuf_r+0x32>
 8008964:	4621      	mov	r1, r4
 8008966:	4628      	mov	r0, r5
 8008968:	f000 f82a 	bl	80089c0 <__swsetup_r>
 800896c:	b118      	cbz	r0, 8008976 <__swbuf_r+0x32>
 800896e:	f04f 37ff 	mov.w	r7, #4294967295
 8008972:	4638      	mov	r0, r7
 8008974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	6922      	ldr	r2, [r4, #16]
 800897a:	b2f6      	uxtb	r6, r6
 800897c:	1a98      	subs	r0, r3, r2
 800897e:	6963      	ldr	r3, [r4, #20]
 8008980:	4637      	mov	r7, r6
 8008982:	4283      	cmp	r3, r0
 8008984:	dc05      	bgt.n	8008992 <__swbuf_r+0x4e>
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f7ff fa4b 	bl	8007e24 <_fflush_r>
 800898e:	2800      	cmp	r0, #0
 8008990:	d1ed      	bne.n	800896e <__swbuf_r+0x2a>
 8008992:	68a3      	ldr	r3, [r4, #8]
 8008994:	3b01      	subs	r3, #1
 8008996:	60a3      	str	r3, [r4, #8]
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	6022      	str	r2, [r4, #0]
 800899e:	701e      	strb	r6, [r3, #0]
 80089a0:	6962      	ldr	r2, [r4, #20]
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d004      	beq.n	80089b2 <__swbuf_r+0x6e>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	07db      	lsls	r3, r3, #31
 80089ac:	d5e1      	bpl.n	8008972 <__swbuf_r+0x2e>
 80089ae:	2e0a      	cmp	r6, #10
 80089b0:	d1df      	bne.n	8008972 <__swbuf_r+0x2e>
 80089b2:	4621      	mov	r1, r4
 80089b4:	4628      	mov	r0, r5
 80089b6:	f7ff fa35 	bl	8007e24 <_fflush_r>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d0d9      	beq.n	8008972 <__swbuf_r+0x2e>
 80089be:	e7d6      	b.n	800896e <__swbuf_r+0x2a>

080089c0 <__swsetup_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4b29      	ldr	r3, [pc, #164]	@ (8008a68 <__swsetup_r+0xa8>)
 80089c4:	4605      	mov	r5, r0
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	460c      	mov	r4, r1
 80089ca:	b118      	cbz	r0, 80089d4 <__swsetup_r+0x14>
 80089cc:	6a03      	ldr	r3, [r0, #32]
 80089ce:	b90b      	cbnz	r3, 80089d4 <__swsetup_r+0x14>
 80089d0:	f7fc fcac 	bl	800532c <__sinit>
 80089d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d8:	0719      	lsls	r1, r3, #28
 80089da:	d422      	bmi.n	8008a22 <__swsetup_r+0x62>
 80089dc:	06da      	lsls	r2, r3, #27
 80089de:	d407      	bmi.n	80089f0 <__swsetup_r+0x30>
 80089e0:	2209      	movs	r2, #9
 80089e2:	602a      	str	r2, [r5, #0]
 80089e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	e033      	b.n	8008a58 <__swsetup_r+0x98>
 80089f0:	0758      	lsls	r0, r3, #29
 80089f2:	d512      	bpl.n	8008a1a <__swsetup_r+0x5a>
 80089f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089f6:	b141      	cbz	r1, 8008a0a <__swsetup_r+0x4a>
 80089f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089fc:	4299      	cmp	r1, r3
 80089fe:	d002      	beq.n	8008a06 <__swsetup_r+0x46>
 8008a00:	4628      	mov	r0, r5
 8008a02:	f7fd fc1d 	bl	8006240 <_free_r>
 8008a06:	2300      	movs	r3, #0
 8008a08:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	2300      	movs	r3, #0
 8008a14:	6063      	str	r3, [r4, #4]
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f043 0308 	orr.w	r3, r3, #8
 8008a20:	81a3      	strh	r3, [r4, #12]
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	b94b      	cbnz	r3, 8008a3a <__swsetup_r+0x7a>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a30:	d003      	beq.n	8008a3a <__swsetup_r+0x7a>
 8008a32:	4621      	mov	r1, r4
 8008a34:	4628      	mov	r0, r5
 8008a36:	f000 f882 	bl	8008b3e <__smakebuf_r>
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	f013 0201 	ands.w	r2, r3, #1
 8008a42:	d00a      	beq.n	8008a5a <__swsetup_r+0x9a>
 8008a44:	2200      	movs	r2, #0
 8008a46:	60a2      	str	r2, [r4, #8]
 8008a48:	6962      	ldr	r2, [r4, #20]
 8008a4a:	4252      	negs	r2, r2
 8008a4c:	61a2      	str	r2, [r4, #24]
 8008a4e:	6922      	ldr	r2, [r4, #16]
 8008a50:	b942      	cbnz	r2, 8008a64 <__swsetup_r+0xa4>
 8008a52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a56:	d1c5      	bne.n	80089e4 <__swsetup_r+0x24>
 8008a58:	bd38      	pop	{r3, r4, r5, pc}
 8008a5a:	0799      	lsls	r1, r3, #30
 8008a5c:	bf58      	it	pl
 8008a5e:	6962      	ldrpl	r2, [r4, #20]
 8008a60:	60a2      	str	r2, [r4, #8]
 8008a62:	e7f4      	b.n	8008a4e <__swsetup_r+0x8e>
 8008a64:	2000      	movs	r0, #0
 8008a66:	e7f7      	b.n	8008a58 <__swsetup_r+0x98>
 8008a68:	20000018 	.word	0x20000018

08008a6c <_raise_r>:
 8008a6c:	291f      	cmp	r1, #31
 8008a6e:	b538      	push	{r3, r4, r5, lr}
 8008a70:	4605      	mov	r5, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	d904      	bls.n	8008a80 <_raise_r+0x14>
 8008a76:	2316      	movs	r3, #22
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a82:	b112      	cbz	r2, 8008a8a <_raise_r+0x1e>
 8008a84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a88:	b94b      	cbnz	r3, 8008a9e <_raise_r+0x32>
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f000 f830 	bl	8008af0 <_getpid_r>
 8008a90:	4622      	mov	r2, r4
 8008a92:	4601      	mov	r1, r0
 8008a94:	4628      	mov	r0, r5
 8008a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9a:	f000 b817 	b.w	8008acc <_kill_r>
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d00a      	beq.n	8008ab8 <_raise_r+0x4c>
 8008aa2:	1c59      	adds	r1, r3, #1
 8008aa4:	d103      	bne.n	8008aae <_raise_r+0x42>
 8008aa6:	2316      	movs	r3, #22
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	2001      	movs	r0, #1
 8008aac:	e7e7      	b.n	8008a7e <_raise_r+0x12>
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ab6:	4798      	blx	r3
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e7e0      	b.n	8008a7e <_raise_r+0x12>

08008abc <raise>:
 8008abc:	4b02      	ldr	r3, [pc, #8]	@ (8008ac8 <raise+0xc>)
 8008abe:	4601      	mov	r1, r0
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	f7ff bfd3 	b.w	8008a6c <_raise_r>
 8008ac6:	bf00      	nop
 8008ac8:	20000018 	.word	0x20000018

08008acc <_kill_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	2300      	movs	r3, #0
 8008ad0:	4d06      	ldr	r5, [pc, #24]	@ (8008aec <_kill_r+0x20>)
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	f7f8 fc9e 	bl	800141a <_kill>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	d102      	bne.n	8008ae8 <_kill_r+0x1c>
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	b103      	cbz	r3, 8008ae8 <_kill_r+0x1c>
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	bd38      	pop	{r3, r4, r5, pc}
 8008aea:	bf00      	nop
 8008aec:	200003b0 	.word	0x200003b0

08008af0 <_getpid_r>:
 8008af0:	f7f8 bc8c 	b.w	800140c <_getpid>

08008af4 <__swhatbuf_r>:
 8008af4:	b570      	push	{r4, r5, r6, lr}
 8008af6:	460c      	mov	r4, r1
 8008af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afc:	4615      	mov	r5, r2
 8008afe:	2900      	cmp	r1, #0
 8008b00:	461e      	mov	r6, r3
 8008b02:	b096      	sub	sp, #88	@ 0x58
 8008b04:	da0c      	bge.n	8008b20 <__swhatbuf_r+0x2c>
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	2100      	movs	r1, #0
 8008b0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b0e:	bf14      	ite	ne
 8008b10:	2340      	movne	r3, #64	@ 0x40
 8008b12:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b16:	2000      	movs	r0, #0
 8008b18:	6031      	str	r1, [r6, #0]
 8008b1a:	602b      	str	r3, [r5, #0]
 8008b1c:	b016      	add	sp, #88	@ 0x58
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	466a      	mov	r2, sp
 8008b22:	f000 f849 	bl	8008bb8 <_fstat_r>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	dbed      	blt.n	8008b06 <__swhatbuf_r+0x12>
 8008b2a:	9901      	ldr	r1, [sp, #4]
 8008b2c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b30:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b34:	4259      	negs	r1, r3
 8008b36:	4159      	adcs	r1, r3
 8008b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b3c:	e7eb      	b.n	8008b16 <__swhatbuf_r+0x22>

08008b3e <__smakebuf_r>:
 8008b3e:	898b      	ldrh	r3, [r1, #12]
 8008b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b42:	079d      	lsls	r5, r3, #30
 8008b44:	4606      	mov	r6, r0
 8008b46:	460c      	mov	r4, r1
 8008b48:	d507      	bpl.n	8008b5a <__smakebuf_r+0x1c>
 8008b4a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	6123      	str	r3, [r4, #16]
 8008b52:	2301      	movs	r3, #1
 8008b54:	6163      	str	r3, [r4, #20]
 8008b56:	b003      	add	sp, #12
 8008b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b5a:	466a      	mov	r2, sp
 8008b5c:	ab01      	add	r3, sp, #4
 8008b5e:	f7ff ffc9 	bl	8008af4 <__swhatbuf_r>
 8008b62:	9f00      	ldr	r7, [sp, #0]
 8008b64:	4605      	mov	r5, r0
 8008b66:	4639      	mov	r1, r7
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f7fd fbdb 	bl	8006324 <_malloc_r>
 8008b6e:	b948      	cbnz	r0, 8008b84 <__smakebuf_r+0x46>
 8008b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b74:	059a      	lsls	r2, r3, #22
 8008b76:	d4ee      	bmi.n	8008b56 <__smakebuf_r+0x18>
 8008b78:	f023 0303 	bic.w	r3, r3, #3
 8008b7c:	f043 0302 	orr.w	r3, r3, #2
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	e7e2      	b.n	8008b4a <__smakebuf_r+0xc>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	9b01      	ldr	r3, [sp, #4]
 8008b92:	6020      	str	r0, [r4, #0]
 8008b94:	b15b      	cbz	r3, 8008bae <__smakebuf_r+0x70>
 8008b96:	4630      	mov	r0, r6
 8008b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b9c:	f000 f81e 	bl	8008bdc <_isatty_r>
 8008ba0:	b128      	cbz	r0, 8008bae <__smakebuf_r+0x70>
 8008ba2:	89a3      	ldrh	r3, [r4, #12]
 8008ba4:	f023 0303 	bic.w	r3, r3, #3
 8008ba8:	f043 0301 	orr.w	r3, r3, #1
 8008bac:	81a3      	strh	r3, [r4, #12]
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	431d      	orrs	r5, r3
 8008bb2:	81a5      	strh	r5, [r4, #12]
 8008bb4:	e7cf      	b.n	8008b56 <__smakebuf_r+0x18>
	...

08008bb8 <_fstat_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4d06      	ldr	r5, [pc, #24]	@ (8008bd8 <_fstat_r+0x20>)
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	602b      	str	r3, [r5, #0]
 8008bc6:	f7f8 fc87 	bl	80014d8 <_fstat>
 8008bca:	1c43      	adds	r3, r0, #1
 8008bcc:	d102      	bne.n	8008bd4 <_fstat_r+0x1c>
 8008bce:	682b      	ldr	r3, [r5, #0]
 8008bd0:	b103      	cbz	r3, 8008bd4 <_fstat_r+0x1c>
 8008bd2:	6023      	str	r3, [r4, #0]
 8008bd4:	bd38      	pop	{r3, r4, r5, pc}
 8008bd6:	bf00      	nop
 8008bd8:	200003b0 	.word	0x200003b0

08008bdc <_isatty_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	2300      	movs	r3, #0
 8008be0:	4d05      	ldr	r5, [pc, #20]	@ (8008bf8 <_isatty_r+0x1c>)
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7f8 fc85 	bl	80014f6 <_isatty>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_isatty_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_isatty_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	200003b0 	.word	0x200003b0

08008bfc <_init>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	bf00      	nop
 8008c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c02:	bc08      	pop	{r3}
 8008c04:	469e      	mov	lr, r3
 8008c06:	4770      	bx	lr

08008c08 <_fini>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	bf00      	nop
 8008c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0e:	bc08      	pop	{r3}
 8008c10:	469e      	mov	lr, r3
 8008c12:	4770      	bx	lr
